St. John’s
Newfoundland and Labrador
Finite-state Parsing of Cayuga Morphology
by
⃝c Dougal Graham
A thesis submitted to the School of Graduate Studies in partial fulfillment of the requirements for the degree of Master of Arts
Department of Linguistics Memorial University of Newfoundland
June 2007
Abstract
This paper presents a detailed description of the design and implementation of a comput- erized morphological segmentation tool for Cayuga nouns. Speakers of polysynthetic First Nations languages are presented with an array of difficulties when it comes to word seg- mentation and dictionary access. This program demonstrates that finite-state techniques are applicable to these morphologically complex languages and are worth further study and development in order to create useful tools for speakers and learners of thesis languages.
ii
Acknowledgments
I would like to thank my supervisor, Dr. Carrie Dyck, for the constant support and insight she provided me during the course of this project and the writing of this document and for travel funding. As well, I thank Dr. Todd Wareham for providing me with an introduction to the world of finite-state computing.
My parents have been very supportive throughout my work, and my academic career, for which I am very thankful.
The kind donation of on-campus working space by Dr. Yvan Rose was also very much appreciated and saved me a lot of walking time.
I would like to thank the department of linguistics at Memorial for helping me to stay well organised, despite my worst efforts, and for the funding I received.
Lastly, I’d like to thank Krista Gammon for encouraging me to keep on working and persevering with me.
iii
Terminology
FS Finite-State
FSM Finite-State Machine FSA Finite-State Automaton FST Finite-State Transducer TTS Text-to-speech
Abbreviations
NLP Natural Language Processing kB Kilobytes
Glosses
UR Underlying representation
SR Surface representation
A Agent: arbitrary term used to denote the type of prefix that represents the subject of an active transitive verb
P Patient: arbitrary term used to denote the type of prefix that represents the direct object of an active transitive verb
1-3 1st to 3rd persons
i Inclusive: the 2nd person is included in the speech act
e Exclusive: the 2nd person is excluded from the speech act
s Singular: one participant
d Dual: two participants, including the speaker and another
p Plural: three or more participants
dp Non-singular: two or more participants
m Masculine
f(i) Feminine(-Indefinite): refers to females, a mixed group of people or ‘someone’ zn Zoic-Neuter: refers to animals or inanimate objects
iv
Contents
Abstract ii Acknowledgments iii Abbreviations iv
1 Introduction 1
2 PriorWork 4
2.1 On-Line Spanish Morphological Analyser/Generator . . . . . . . . . . . . . . 5
2.2 TemplaticMorphologyandReduplication.................... 5
2.3 Syllabification................................... 8
2.4 SpellingCorrection ................................ 9
2.5 Finite-state Applications to Polysynthetic Languages . . . . . . . . . . . . . 10
3 Finite-state machines 12
3.1 FSAasaModelofBehaviour .......................... 12 3.2 FSAasLinguisticModel............................. 14 3.3 Finite-stateTransducers ............................. 15 3.4 Bidirectionality .................................. 16 3.5 Composition.................................... 17 3.6 Modularity .................................... 19
4 The Cayuga Language 21
4.1 Orthography.................................... 22
4.2 MorphologyofCayugaNouns .......................... 23 4.2.1 DefectiveNouns.............................. 23 4.2.2 BasicNouns................................ 24
4.2.3 Inalienably Possessed Nouns (Body Part Nouns) . . . . . . . . . . . . 28 4.2.4 De-verbalNouns ............................. 31
4.3 Overview of Cayuga Morpho-phonological Variation . . . . . . . . . . . . . . 32
4.4 ImplicationsoftheData ............................. 33
5 Issues in Implementation
34
v
5.1 DictionaryAccess................................. 34
5.2 ComputationalProblems............................. 38 5.2.1 Non-determinism ............................. 38 5.2.2 Long-distanceDependancies....................... 40
5.3 Summary ..................................... 43
6 Methodology 44
6.1 Requirements ................................... 44
6.1.1 IdealDictionaryOutput ......................... 44
6.1.2 Thorough Testing of Morpho-phonological Rules . . . . . . . . . . . . 48
6.1.3 Applicability of FS Framework to Morphologically Complex Languages 48
6.2 Specifications ................................... 49
6.3 ToolsandDataStructure ............................ 50 6.3.1 Lexc.................................... 51 6.3.2 Rule-likeNotation ............................ 53
6.4 Summary ..................................... 54
7 Results 55
7.1 FinalProgramComponents ........................... 55 7.1.1 LexiconModule.............................. 55 7.1.2 RulesModule ............................... 69 7.1.3 SemanticsModules ............................ 72 7.1.4 Interface.................................. 73
7.2 Addressingtherequirements........................... 76
7.2.1 7.2.2 7.2.3 7.2.4 7.2.5
8 Conclusion
TestingofRules.............................. 76 Generation&Segmentation ....................... 78 FSApplicabilitytoPolysyntheticLanguages . . . . . . . . . . . . . . 78 IdealDictionaryAccess.......................... 79 Efficiency, Elegance and Usability - Abstract vs. Concrete Versions . 79
83
8.1 FutureWork.................................... 83 8.2 SummaryConclusions .............................. 84
A Morpho-phonological and Clean-up rules 87
vi
B Code 89
B.1 AbstractVersion ................................. 89 B.1.1 AbstractLexicon ............................. 89 B.1.2 AbstractSemanticLexicon........................ 103
B.2 ConcreteVersion ................................. 118 B.2.1 ConcreteLexicon ............................. 118 B.2.2 ConcreteSemanticLexicon........................ 140
C Test Cases 165
C.1 DatafortheAbstractApproach......................... 165
C.2 DatafortheConcreteApproach......................... 177
vii
List of Tables
4.1 PhonemicInventoryandSpellings........................ 22
4.2 AlternateOrthographies ............................. 23
4.3 BasicNounsPatientPrefixAllomorphs-C-stems . . . . . . . . . . . . . . . 26
4.4 BasicNounsPatientPrefixAllomorphs-V-stems . . . . . . . . . . . . . . . 27
4.5 Inalienably Possessed Noun Agent Prefix Allomorphs - C-Stems . . . . . . . 29
4.6 Inalienably Possessed Noun Agent Prefix Allomorphs - V-Stems . . . . . . . 29
4.7 MultipleRuleApplications............................ 32
6.1 SampleCayugalexcLexicon. .......................... 52
7.1 BasicNoun“allRoots”Sub-lexicon ....................... 59
7.2 TwoRulesforOptionalPrefixSegmentRemoval. . . . . . . . . . . . . . . . 71
7.3 Morpho-phonologicalRuleApplication ..................... 71
7.4 lexcsamplesforsemanticsmoduleandlexiconmodule . . . . . . . . . . . . 72
7.5 StagesofOutputfromUserInterface ...................... 75
7.6 Rule-testingSamples ............................... 77
7.7 BasicNounsPatientPrefixAllomorphs-C-stems . . . . . . . . . . . . . . . 77
7.8 SizesofFinalSegmenterFSTs.......................... 79
7.9 Time (in seconds) for 100 iterations of morpheme combination of the test
corpora ...................................... 80
7.10 Time (in seconds) for 100 iterations of segmentation of the test corpora . . . 80
C.1 UnpossessedBasicNouns............................. 165
C.2 PossessedBasicNouns .............................. 166
C.3 DeverbalNouns.................................. 171
C.4 DefectiveNouns.................................. 172
C.5 InalienableNouns................................. 173
C.6 UnpossessedInalienableNouns ......................... 176
C.7 UnpossessedBasicNouns............................. 177
C.8 PossessedBasicNouns .............................. 178
C.9 DeverbalNouns.................................. 182
C.10DefectiveNouns.................................. 183 C.11InalienableNouns................................. 184 C.12UnpossessedInalienableNouns ......................... 187
viii
List of Figures
7.1 AbstractDefectiveNounSub-lexiconStructure . . . . . . . . . . . . . . . . 56 7.2 AbstractDe-verbalNounSub-lexiconStructure . . . . . . . . . . . . . . . . 57 7.3 AbstractBasicNounSub-lexiconStructure................... 58 7.4 AbstractInalienableNounSub-lexiconStructure. . . . . . . . . . . . . . . . 60 7.5 AbstractLexiconStructure............................ 65 7.6 ConcreteApproachBasicNounLexicons .................... 68 7.7 CompleteProgramFlowChart ......................... 74
ix
x
Chapter 1
Introduction
Recently, finite-state methodology has emerged as the primary framework for natural lan- guage processing (NLP) and computational models of languages (Beesley and Karttunen, 2003:pg. XV). In the past several years, much work has been done to create finite-state implementations of lexicons, spelling correction systems (Vilares et al., 2004), morphological parsers (Reichel and Weilhammer, 2004), speech synthesis programs and so forth for a wide variety of languages (Alegria et al., 2002; Beesley and Karttunen, 2003; Beesley and Kart- tunen, 2000). The initial demand for the production of these sorts of systems tends to fall on the most widely spoken languages, and those with the longest linguistic traditions, such as English, Finnish, German, French and other European languages. Not much, if any, work, however has yet been done with respect to the specific needs of First Nations languages in particular or, more generally, polysynthetic languages.
Such work would, however, be worthwhile. It would allow for a thorough and systematic evaluation of the posited morpho-phonological rules for the language studied. It would extend our understanding of finite-state machines (FSM) since polysyntehtic languages tend to be significantly more morphologically complex than the European languages traditionally studied. Furthermore, such a project could lead to further useful applications in the future such as an auto-segmenting dictionary or text to speech (TTS) system for the language.
1
In that light, I have created an FSM that recognizes1, generates2 and segments all and only the valid noun forms of Cayuga (Iroquoian) with four primary goals in mind.
The first goal is to demonstrate that useful segmentation tools could be quickly gener- ated for morphologically complex languages in which speakers encounter difficulties because of segmentation issues. Secondly this project will provide a thorough testing of the morpho- phonological rules currently posited for Cayuga nominal forms. Thirdly the project will determine the potential computational costs and usability issues of designing finite-state transducers (FST) with different kinds of output. Finally, this project will provide a pre- liminary investigation into the applicability of the finite-state framework to polysynthetic languages.
This document has been designed so as to satisfy the needs of the disciplines of both linguistics and computer science. With that in mind, it should be clear why this document is somewhat different from a standard linguistics thesis, and from a computer science thesis. The first half of the document (chapters 2-4) are primarily linguistically oriented. Chapter 5 sits nicely on the fence and forms a bridge into the latter half of the document (chapters 6-7) which are generally more computationally oriented.
The document is organized as follows: chapter 2 discusses prior work in finite-state natural language processing; chapter 3 contains an overview of what finite-state machines are and how they work; chapter 4 is a discussion of Cayuga nominal morphology and morpho- phonology; the 5th chapter describes some linguistic and computational problems arising from the data discussed in chapter 4. Chapter 6 lays out the requirements for the creation of the program and describes the tools and data structures used to create it. Chapter 7
1A finite-state machine that recognizes all and only the valid words of a language reports an error on any word that does not exist in the language and never reports an error for a word that does exist in the language.
2A finite-state machine can also be set to output all words that it recognizes (footnote 1). 2

contains a detailed explanation of the program and its components as well as an analysis of how well the program was able to meet the requirements laid out in chapter 6. Finally, chapter 8 contains an overview of lessons learned and potential applications for future work.
3
Chapter 2
Prior Work
The applications of FSMs have been an important domain for research in the fields of math- ematics, computer science and more recently, linguistics. Numerous applications make use of FSMs to work with a wide variety of languages, from Spanish (Tzoukerman and Liberman, 1990; Tinsley, Accessed: 2007 02 13), to Finnish (Koskenniemi, 1997) to Arabic and Malay (Beesley and Karttunen, 2000).
Finite-state technology is widely used in the field of NLP (Beesley and Karttunen, 2003: and references; Roche and Schabes, 1997: and references; Mohri, 1997: and references; Karttunen, 2001: and references), but the focus has been on European languages(Tzoukerman and Liberman, 1990; Kiraz and M ̈obius, 1998), with some attention paid to agglutinating1 languages(Koskenniemi and Church, 1988; Oflazer, 1994), but no attention to highly polysyn- thetic2 languages. I will briefly describe here a few implementations of finite-state technol- ogy that deal with a variety of languages in order to illustrate the versatility of finite-state methodology.
1Agglutinative: “A language in which words typically contain a linear sequence of morphs” (Crystal, 2003:17)
2Polysynthetic: “A language “characterized by morphologically complex long word forms” (Crystal, 2003:359)
4
2.1 On-Line Spanish Morphological Analyser/Generator
Finite-state methods are ideal for the decomposition and analysis of concatenative3 mor- phology. John Tinsley developed a morphological analyser and generator for Spanish using XFST (Tinsley, Accessed: 2007 02 13). The machine takes user input in the form of sen- tences, parses them into single-word tokens using a program called tokenize and analyses them individually using another program named lookup, then returns the result to the user.
The analyser currently achieves approximately 85% coverage on unrestricted text. The machine parses each word-form from a lexical form into a surface form as follows:
(1) Lexical: hablar+Verb+PresInd+1P+Sg Surface: hablo
Tinsley’s model is a good demonstration of how finite-state machines can be applied to practical applications. The entered word is associated with a set of semantic tags describing the class of word (noun, verb, etc.) and also its semantic constituents (singular, plural, present, past etc.) all of this information is then output to the user in an easy to read manner.
2.2 Templatic Morphology and Reduplication
Initially, it is unclear whether FS technology can handle complex morphosyntactic phe- nomena such as reduplication and templatic morphology. Recursive processes in natural languages, such as reduplication, are context sensitive and therefore cannot be generally represented as finite-state (Chomsky, 1956). However, these non-finite-state aspects of lan-
3Concatenative: “Characterised by the joining together of a linear sequence of morphemes” (Crystal, 2003:93)
5

guage can be implemented in the finite-state for any specific case of a bounded length. (Frank and Satta, 1998)
The finite-state framework can not only deal with concatenative morphology but also complex non-concatenative morphology such as reduplication as found in Malay or tem- platic morphology as found in Arabic. Compile-replace is a formalism developed by Beesley and Karttunen (2000:375-420) to handle phenomena such as templatic morphology(2) and reduplication(3), and is a great example of the versatility and applicability of finite-state methods to a variety of morphologically complex languages.
In (2) we see an example of templatic morphology in Arabic in which there is a conso- nantal root template which can take a variety of vowels to convey aspect, voice, etc.
(2) a. k  t  b -Triliteral Root
b. CaCaC-Template
c. katab -Surface Representation
The compile-replace formalism makes it possible to create general templates (2-a, 2-b) from specific words (2-c). The consonantal and vowel templates can be separated by one FST and then processed by a second FST in order to determine the meaning of the triliteral root and the meaning of the CaCaC templatic morpheme.
Without compile-replace, reduplication can be difficult to formalise in a traditional finite- state framework. There are, essentially, two types of reduplication: fixed-length reduplication in which a constant number of phones or syllables are reduplicated or full-length reduplication in which an entire morpheme or group of morphemes form is copied.
Fixed-length reduplication is easily formalised by specifying the criteria describing what must be reduplicated. Full-length reduplication, however, is of variable length and relies
6
on information that lies in the lexicon (i.e., a stem, or some other morpheme group) of potentially unbounded length. This means reduplication cannot easily be specified using only a normal rule-based formalism, since it does not have access to lexical information.
In (3) we see an example of the type of full-stem reduplication that compile-replace can handle.
(3) a. buku book
book
buku -buku
book -Reduplication (Plural) books
b.
The programmer can specify “buku” as a stem that may be reduplicated and the compile- replace algorithm will take such information into account, producing the form in example (3-b). Compile-replace can also handle less complex types of reduplication such as redupli- cated prefixes and affixes. One need only specify the sub-lexicon containing the forms that can undergo reduplication and the rule for processing them and then XFST is able to copy the form according to the specifications.4
This work demonstrates the finite-state framework’s ability to deal with both concatena- tive and non-concatenative morphology. The following discussion explains other applications of the finite-state framework in NLP such as syllabification and spelling correction.
4XFST and the notion of ”sub-lexicon” are detailed in chapter 6.3 7

2.3 Syllabification
Text to speech (TTS) systems often face the problem of creating a natural intonation contour and stress pattern in the words they produce. Such patterns are generally based at least partly upon the syllable structure of the words being spoken. It is therefore often very desirable to have an algorithm for the syllabification of word-forms.
With these applications in mind, Kiraz and M ̈obius (1998) created a finite-state ap- plication in order to syllabify German and English words. For example, the English nouns below in (4) and (5)5 take different syllabifications, affecting the pronunciation:
(4) a. Nightrate b. [naIt^-ôet]
(5) a. Nitrate b. [naI-tôet]
 ̊
As can be seen in (4)-(5) the different syllabifications affect both the voicing of the [ô] and
the release of the [t].
This, particular example, however, could not at first be accounted for using Kiraz et al.’s syllabification system. Because the two words are underlyingly identical (UR: /naItôet/), the machine has no way of determining that there is a difference between the two. In this case, Kiraz et al. were able to encode references to morpheme boundaries as a way of dealing with this specific problem. By specifically defining a morpheme boundary, the machine was able to syllabify taking that reference point into account, thereby generating
5From (Kiraz and Mo ̈bius, 1998)
8
proper syllabifications for most compound nouns. However, Kiraz et al. mention (without examples) that in some cases even the specific designation of morpheme boundaries was not sufficient for the machine to determine which syllabification was correct, and so in some cases the most common syllabification was not always correct.
The Kiraz et al algorithm also used a probabilistic ‘weighting’ method to determine which syllabification was most likely in a given case. This allowed the machine to run more quickly (as per the demands of a TTS system), but had the drawback of occasionally pro- ducing incorrect output if the most common syllabification was not always correct. Despite these algorithmic drawbacks, Kiraz et al.’s system is a good example of the use of the finite- state framework for the development of a complex high speed NLP application. A further example of such an application follows below.
2.4 Spelling Correction
As a back end to future NLP work in Basque, Alegria et al. (2002) created a finite-state spelling correction program and analyser/generator composed of three separate modules. This modular approach lends itself well to the finite-state framework, as discussed in more detail in §3.6.
The first module checks the spelling of a word against the standard Basque spelling. If unable to find a correct spelling in the first module, the machine then employs the second module to see if the word conforms to certain dialectal variances or common competence errors. Finally, should both those options fail, the program accesses a third module that attempts to guess what form the user was attempting to produce such that it might be corrected. The advantage of such an approach is that one can implement all three dictionary types in a single machine. The second and third modules are especially useful for Basque,
9
since there are numerous regional dialectal variances.
Another spell-checking/error-correction system has been developed for Galician (Vilares et al., 2004), and a system has been developed for Turkish as well (Oflazer, 1994). This wide variety of languages for which such systems have been developed demonstrates that finite- state techniques are widely cross-linguistically applicable. Additionally such systems have a variety of uses, for example in checking potential mis-spellings in an online dictionary.
2.5 Finite-state Applications to Polysynthetic Languages
One motivation for this project was to attempt to determine if the finite-state framework would be computationally and practically useful for designing tools for morphologically com- plex languages.
Most languages for which finite-state approaches have been used are less morphologically complex than First Nations languages (§2). There are several aspects of First Nations languages that could cause problems for the finite-state framework and it is necessary to determine if the framework is computationally adequate for the needs of these languages.
Most Indo-European languages do not have extensive obligatory prefixation, and fur- thermore only generally allow for a small number of a small set of prefixes to attach to a word, with very few changes occurring; the same is true of their suffixes. Cayuga words, however, require a high number of obligatory prefixes and many allomorphic rules.
For example the finite-state analyzer of Spanish applies only 4 replace rules to deal with changes to the form of noun stems and affixes (Tinsley, Accessed: 2007 02 13). Cayuga, on the other hand, will minimally require 10. The greater number of morpho-phonological rules and the need to encode long-distance dependancies are the two primary potential sources of
10
computational complexity facing the design of a finite-state application for a First Nations language.
As discussed in §2.2, other very morphologically complex languages, such as Arabic and Malay, have benefited from applications implemented in the finite-state framework (Beesley and Karttunen, 2003). However, these languages display a different kind of complexity of morphology from First Nations languages. While reduplication and templatic morphology are very complex, they are essentially different from the large degree of prefixation, morpho- logical variation and long-distance dependancy that occur in First Nations languages. The following chapters demonstrate that despite these differences and challenges, it is generally plausible to implement polysynthetic morphology in the FS framework.
11
Chapter 3
Finite-state machines
Before describing the structure of my program, it is necessary to define finite-state machines and some of their formal properties.
Abstractly, finite state machines (FSM) are a model of behavior, which is described as consisting of states, transitions and actions.1 More concretely, they can be viewed as flexible computer programs that can implement a wide variety of NLP tasks (§2). FSMs can be broken down into two main sub-categories, the finite-state automata (FSA), and the finite-state transducers (FSTs). In this chapter I will briefly discuss the properties of both FSAs and FSTs.
3.1 FSA as a Model of Behaviour
An FSA is the simplest type of FSM, and can be used to model a behaviour. An FSA takes input from a user, but the only feedback it gives is whether or not the input is valid. It can also generate a list of all valid input sequences.
Diagrammatically, an FSM is much like a flow chart: one starts at a given point and moves following the appropriate arrows in a diagram. Each circle is called a ‘state’ (1-a) (generally denoted with the letter ‘q’ and a subscript number). A circle marked with an arrow represents the initial, or starting, state; and a circle with double lines is a potential
1A full review of basic information on FSMs, can be found in Beesley and Karttunen (2003) and Nederhof (1996)
12

final state. Each arrow joining two states is called a transition (1-b). Transitions have conditions (1-c) attached to them that determine which state to move to next.
(1) a.
b. c.
States:
Transitions: →
Conditions/Actions: “open door”, “close door”, etc.
q1 q2 q3
An action can be performed either upon entering a state, leaving a state or during a tran- sition. (Wikipedia, 2006; Beesley and Karttunen, 2003; Sproat, 1992). In the following example I will use the concept of a door, and the user’s input is the action of either opening or closing the door. The machine shown in (2) can generate a list of all valid sequences of opening and closing the door.
(2) An FSA representing the use of a door (Wikipedia, Accessed: 2006 03 24)2 Close Door
Open, q1
Closed, q2
Open Door
From the ‘open’ state the door can be ‘closed’ by performing the ‘close door’ action and following the topmost arrow to the ‘closed’ state. Or, if there are no more actions, then the machine stops since ‘open’ is a valid final state. If the machine moves to the ‘closed’ state, it can either stop if there are no further actions, or it can perform the ‘open door’ action to move once more into the ‘open’ state.
However, if one were to try to tell the machine to close the door from the closed state,
2This example from Wikipedia was used because of its simplicity and clarity. More complex examples can be found in (Beesley and Karttunen, 2003), (Sproat, 1992) and elsewhere in this document.
13

there would be an error because the ‘close’ action flows into the ‘closed’ state, not out from it. The machine can stop running when it reaches either final state, or it can continue indefinitely so long as the actions being performed are a series of alternating openings and closings.
3.2 FSA as Linguistic Model
FSAs can also model linguistic behaviour, by treating transitions as symbols, with all possible paths through an FSA defining a ‘language’. A formal language means merely the collection of strings3 that the FSA will recognize and generate. Suppose we have a language; “Splort”; with only four words, as defined below:
(3) Language ‘Splort’:
a. Cat b. Cats c. Cart d. Carts
This language can be expressed by the following FSA: (4)
r q4 t cas
q1 q2 q3
q5 q6
t
The automaton diagrammed in (4) can both recognize and generate all the strings in the language Splort. If the FSM were to generate all words it would generate each possible word
3A string is a linear sequence of symbols (words, phones, morphs, graphs, or even features can all be viewed as symbols) that can be recognized by the machine, where each symbol is an indivisible unit. Symbols are defined within an FSM, such that one machine make take words to be indivisble symbols and another letters. In the context of my program letters can be accepted as the basic symbols along with a few diacritics to mark morpheme and word boundaries.
14

in sequence. For example, starting in state q1, the only possible option for the first output symbol is ‘c’. Once the machine has output ‘c’ it moves to state q2.
From q2 the machine will have no choice but to output ‘a’ and move to q3. At q3, however, the machine will have to choose between moving to q4 and outputting ‘r’, or q5 and outputting ‘t’. If the machine moved to q5 it could stop there and go back to q1 to output another word, or it could continue on to q6 and output ‘s’. If the machine moved to q4, on the other hand, it would have to continue on at least until q5 before stopping. Once it was done outputting one form, it would then move on to another until all possible paths through the machine had been completed.
The automaton can also check if a given word exists in the language by comparing the first symbol (letter) in a candidate word against all possible transitions from the start state q1. If there is a transition whose condition matches the first letter from the given word, the automaton would move on to the state joined by that transition (q2) and for a transition whose condition matches the next symbol in the word. If, however, there are no transitions matching the next letter, or if the automaton runs out of letters while in a non-final state, then the automaton can tell us that the given word does not exist in the language. If for example, we wished to test that the word ‘can’ is in the language “Splort” using (4), the machine would arrive at state q3, but it would then report an error, since there is no transition with the condition ‘n’ attached to it leading out of q3. Similarly, the word ‘car’ would also fail, because q4 is a non-final state, so ‘car’ is not a word that exists in “Splort”.
An FSA can both recognize and generate a language that consists of any number of strings. Finite-state Transducers, described below, are even more powerful: they are able to represent the relationship between two languages.
3.3 Finite-state Transducers
A more complex type of FSM is the finite-state transducer (FST). An FST not only generates and recognizes valid strings from a language, but also generates output. It maps the relation between two strings (or languages) by allowing one to convert one string (or language) into another (Beesley and Karttunen, 2003; Nederhof, 1996; Sproat, 1992). This model can implement transformational rules that convert an underlying form into a surface form and vice-versa.
15
Example (5) diagrams an FST which converts between underlying and surface forms, modeling allomorphy.
(5) An FST transducing UR to SR for cat(s) and car(s):
ka
q1 k q2 a q3
r q4 z rz
tz
t q5 s
q6
In the FST formalism, all characters that appear above a transition line are part of one language, often referred to as the “input language”, while those below the line are their counterparts in the so-called “output language”. The FST in (5) translates between the underlying representation and the pronunciation by applying the rules for plural suffix allophones (ie: devoicing [z] following a voiceless obstruent). If the above machine were to be fed the string [kætz] it would output [kæts]. Conversely it would also be able to output [kætz] as the UR form if it were given [kæts] as the SR. This is due to the property of bidirectionality, described below.
3.4 Bidirectionality
All FSTs, are actually bidirectional. This means that they can be run just easily “backwards” as “forwards”. This distinction does not mean running from a final state to a start state, but instead it means generating an ‘input’ from an ‘output’. The labels ‘input’ and ‘ouput’ are really only useful for distinguishing which specific language one is working with in the context of a given FST.
Bidirectionality is useful because the machines created are able to fulfill the roles of (a) generator/recognizer of ‘input’ forms, (b) generator/recognizor of ‘output’ forms, (c) translator between ‘input’ and ‘output’ forms and, (d) generator/recognizer of input-output form pairs. In the case of (a), the machine just ignores the ”upper” transition labels, acting like an FSM. For (b) it does the same but in reverse, ignoring the ”lower” transition labels. To account for (c) the machine follows the ”upper” or ”lower” path and outputs the symbols on the other side of the transition. For (d) the machine outputs both symbols on each
16
transition as it follows the path.
One could take a collection of underlying morphemes and use them to generate the surface forms, and with the same FST then take the surface forms and break them down into their constituent parts again. All FSTs described in §2 are bidirectional. For example, the German/English syllabification system described in 2.3 could de-syllabify words as well as syllabify them.
The bidirectional properties of FS machines greatly increases their usefulness and ap- plicability to NLP. The specific applications of bidirectionality will be discussed in greater detail in chapter 6.
3.5 Composition
Up until now, I have discussed FSTs as individual discrete units. Here I will explain the composition operation that allows multiple small FSTs to be used as component parts of a single larger FST. Any two FSTs can be joined together into a single FST by composition (Kaplan and Kay, 1994). Composition allows us to initially declare two rules, for example, a→c and c→g and then morph them into a single rule: a→g. This only works when the output side of the first machine is identical to a valid input form of the second machine. Where there is such an occurrence the original output of the first machine is replaced with the output of the second machine.
Example (6) encodes a concatenation of symbols as a transducer where the UR and SR are identical. Example (7) encodes a rule that defines a morpho-phonological change. Example (8), discussed later, is the product of the composition of (6) and (7), a machine that encodes the relationship between differing URs and their SRs.
(6)
ka
q1 k q2 a q3
r q4 z rz
tz
t q5 z
q6
17
(7)
Composition works not only on single rules but also on entire FSTs; allowing us to join them together with rules. In order to compose the two transducers defined in (6) and (7) all one needs to do is look for an output sequence from (6) that is identical to the input sequence of (7) (tz). That output sequence ((6): q3 → q5 → q6) is then replaced with the output from (7) (q1 → q2 → q3: ts):
tz
q1 t q2 s q3
(8)
ka
q1 k q2 a q3
r q4 z rz
tz
t q5 s
q6
We can see now in (8) that the output for q3 → q6 has changed to match the output from (7).
The process of composition means that we can separately formulate all the rules that we wish to implement, and then compose them together to create a final product. If we determine that a rule is mis-ordered or unnecessary, it can be moved or changed and then we can re-compose the rules. This mechanism emulates the sort of cascading or ordered rules commonly used to define morpho-phonological alternations.
Composition means that FSTs are almost infinitely expandable, as long as we stay within the bounds of disk space and processing power. Some examples of the power of FSTs were described above (chapter 2) including Alegria et al.’s (2002) spelling correction system, demonstrating the power of modularity in FSTs by being constructed of three separate modules composed together as one.
The drawback to composition is that can cause an FST to become very complex. The 18
un-minimized product of the composition of two FSTs has a number of states equal to the number of states of each original machine multiplied together. In some cases few of these extra state are redundant and cannot be removed, potentially allowing machine size to double with each composition.(Kaplan and Kay, 1994) If we are constantly replacing a rather simple group of states and transitions with a much more complex group, it is easy to imagine how complexity can be introduced rather quickly.
3.6 Modularity
A final property of FS machines is that of modularity. When creating a finite-state machine to recognize and generate valid words in a language, it is common practice to create a number of separate finite-state machines that each shoulder some small part of the burden of recognition and generation and join them together into a single final product using composition. This concept is known as “modularity” (Beesley and Karttunen, 2003:284). Broadly, it is possible to look at two main modules for most finite-state implementations of morphological parsers: the lexicon module, and the rules module.
The lexicon module is essentially a representation of the mental lexicon of underlying root forms and affixes, with as little redundancy included as possible. As few semantically equivalent allophones were included as possible. The idea is to not represent any regular phonological alternations, in order to reduce the storage of redundant forms in the lexicon. This module contains a description of which morphemes are valid in the language, and to which other morphemes they can join, and under what conditions.
The rules module can be viewed as the sum of several separate transducers, each of which represents some sort regular alternation in the language. For example, one rule might be /s/ → [z] / Cvd  (as in (5)). By then joining these rules and the lexicon, a final machine is created which can join morphemes together and apply any applicable alternation rules to those joined morphemes.
Polysynthetic First Nations languages may require either more complex lexicon modules, or more complex operators for implementing some morpho-phonological rules than have been used with other languages. There is also some question of how much of the alternation should be viewed as a result of morpho-phonological rule derivations and how much should be viewed as lexical (see §6.1.1.1). I will attempt to discuss those parts of Cayuga that may
19
cause problems for either the lexicon module or the rules module, given current methodology for implementing those modules. The following chapter contains the Cayuga data which was implemented in my program as well as a description of its morphology and morpho- phonological processes.
20
Chapter 4
The Cayuga Language
Cayuga is an Iroquoian language, closely related to Oneida, Seneca and Mohawk. Tradition- ally, the Cayuga and Seneca peoples lived in modern day Cayuga County, New York, but they have since relocated and Cayuga is currently spoken by approximately 100 people at Six Nations (Froman et al., 2002). Cayuga is a polysynthetic language, characterized by “mor- phologically complex, long word-forms” (Crystal, 2003:359). Combining affixes and roots often results in morphophonemic changes, making the final word difficult to decompose, and the stem hard to identify even for native speakers. If one cannot identify the stem, then it becomes impossible to search for a stem in a dictionary.
Given that Cayuga has numerous obligatory prefixes, there are too many forms to feasibly list in a dictionary. For this reason, dictionaries are organised by stems, or using a designated type of citation form. This means that a program that segments word-forms automatically would be invaluable in that it would make Iroquoian dictionaries accessible for everyone; the machine could determine the stem and prefix and look them up for the user. As it stands, there are a variety of ways to encode dictionaries for obligatorily prefixing polysynthetic languages but they are neither simple nor concise (See §5.1).
As a subset of the words of Cayuga the nouns are less complex than verbs, especially when considering that verbs can incorporate nouns. Despite being less complex, they are still rather complex relative to most common Indo-European languages and demonstrate important characteristics of Cayuga words in general, like obligatory prefixation. This com- bination of general complexity, yet relative simplicity compared to Cayuga verbs makes the nouns an ideal place to start work on the morphological parsing and segmentation of Cayuga words using FSTs.
This chapter will briefly discuss the orthography and spelling conventions of Cayuga, followed by a description of the morphology of the four classes of nouns that are treated by the program and a brief discussion of some of the morpho-phonological processes undergone by Cayuga nouns.
21
4.1 Orthography
There exist two commonly used orthographies for Cayuga: the standard Henry Orthography and the linguistic orthography. The sound-to-symbol combinations for each are described in table 4.1 below. The primary dissimilarities lie in the representation of the plosives and the affricates.
Table 4.1: Phonemic Inventory and Spellings
Phonetic Realizations
Henry Orth.
Linguistic Orth.
[ d, t ]
d
t
[ th ]
t
th
[ ds, Ã, ts, Ù]
j
ts, tsy
[ tsh ]
ts
tsh
[ g, k ]
g
k
[s]
s
s
[n]
n
n
[r]
r
r
[h]
h
h
[P]
^
^
Phonetic Realizations
Henry Orth.
Linguistic Orth.
[i]
i
i
[A]
a
a
[e]
e
e
[o]
o
o
[u]
u
u
[  ̃E ]
e ̨
e ̨
[  ̃o ]
o ̨
o ̨
For this project I have used a modified orthography to represent surface forms of words rather than either of the standards. The standard orthographies represent several predictable processes, including accent placement, and laryngeal metathesis.1
Table 4.2 demonstrates some of the differences between the orthographies. Note that the unmodified orthography essentially omits diacritics.
The advantage of such a modified orthography is that it allows me to focus on implement- ing the morpho-phonemic rules component, without needing to worry about processes such as accent placement and laryngeal metathesis. The accent placement rule, despite being predictable, is rather complex, and is not relevant within the scope of this project. Fur- thermore, an implementation of laryngeal metathesis would require a working stress accent
1The unmodified Henry orthography and the linguistic orthography use diacritics and spelling metathesis to encode LM. LM is not actually an instance of metathesis; it is a process of coalescence which affects metrically weak syllables.
22

Table 4.2: Alternate Orthographies sa ̄hs ́ı^d^ageh
sa ̄hs ́ı^t^ageh
placement algorithm which in turn requires a syllabification algorithm, including a means of syllable counting. The drawback to using a modified orthography such as this, however, is that it means that users will not be able to type words directly into this version of the machine since the spelling will differ from the standard spelling. At a later date, however, it is entirely feasible to create modules which translate to/from the modified representation into (a) the actual Henry orthography, or (b) the Linguistic orthography and vice versa.
4.2 Morphology of Cayuga Nouns
This discussion of the morphology of Cayuga is based on data from (Froman et al., 2002). The nouns of Cayuga can be divided into five basic classes or types of nouns: defective nouns, basic or “regular” nouns, inalienably possessed nouns, de-verbal nouns and instrumental nouns.2
4.2.1 Defective Nouns
The simplest of the nouns are the defective nouns, which have no internal morphological structure. They do not take the regular affixes of other nouns as described below; instead they are composed of single lexicalised chunk:
(1) gwisgwis3 pig
pig
2Instrumental nouns display near identical properties to the de-verbal nouns and will therefore not be treated by this project.
3Not all defective nouns are apparent reduplicated forms e.g., tehto ̨^(ground hog, woodchuck, gopher) 23
Modified Representation
he ̨ nahsi^da^geh
sahsi^da^geh
Henry Orthography
he ̨ nahs^id ́a^geh
Linguistic Orthography
he ̨ nahs^it ́a^keh

These nouns are computationally the simplest because they can each be stored as a single unit with no need for the finite-state transducer4 to try to segment them. They are also the most accessible for users of traditional dictionaries since their meanings are invariable and they have no root form or alternate prefixes and are therefore easily located in a dictionary.
4.2.2 Basic Nouns
Basic nouns in Cayuga can take one of two forms; either possessed or unpossessed. All basic nouns consist of a prefix, a noun stem and a noun stem former. The prefix varies depending on whether the noun is possessed or not, and the type of the noun.
Unpossessed Basic Nouns
As described in example (2) below, unpossesssed basic nouns take either ga-, o- or a- as their prefix. The choice between the three prefixes is arbitrary and must be learned by the speakers.
 ga- (3znA) 
(2) o- (3znP) + noun stem +a^ (NSF)
 a- (3znA) 
Example (3) gives a representative sample of nouns stems taking each of the three unpos-
sessed prefixes.
(3) Sample Basic Nouns - Unpossessed
a. ga+ ^wahsa: +a^ 3znA earring NSF earring(s)
b. o+ ^nho ̨hs +a^ 3znP egg NSF
egg(s)
4See §3.3 for more info on FSTs
24
c. a+ ahdahditr +a^ 3znA sock NSF
sock(s)
Some basic nouns have a choice to take either ga- or o- in their unpossessed form such as the word for in example (4-a):
(4) a. b.
ga- jihoha: -a^ 3znA- straight pin(s) -NSF straight pin(s)
o- jihoha: -a^ 3znP- straight pin(s) -NSF straight pin(s)
Similarly, some basic nouns have the option to drop the 3znP prefix o as in example (5)
(5) a. oho ̨ na^da^ potato(es)
b. ho ̨ na^da^ potato(es)
Possessed Basic Nouns
The possessed basic nouns take one of 12 prefixes called ‘patient prefixes’ that denote the gender, number and person of the possessor(s). All basic nouns take the same noun stem forming suffix -a^. Possessed basic nouns have the form described in example (6-a):
(6) a. Patient Prefix+ noun stem +a^ (NSF)
b. age+ tsgo^d +a^ 1sP balsam fir NSF my balsam fir
25
c. o ̨kni+ tsgo^d +a^ 1dP balsam fir NSF our (dual) balsam fir
In examples (6-b) and (6-c) the noun stem begins with a sequence of characters that matches the “elsewhere” column in table 4.3. Therefore it attaches prefixes such as age- or yo ̨kni- from that column.
Prefixes undergo both morpheme-initial and morpheme-final alternations, resulting in a great deal of allomorphy. The morpheme-final alternations are dependant upon the following stem-initial phones (as shown in tables 4.3 and 4.4). Depending on the final phones of the prefix and the initial phones of the stem, phones from either the stem or the prefix may be deleted or altered.
Table 4.3: Basic Nouns Patient Prefix Allomorphs - C-stems
Gloss
Prefix UR
^CV
hV
hCV
nV
r
y/w
Elsewhere5
1sP
(w)ag+
ag-
ak-*6
age-
ak-
ag-
ag-
age-
1dP
(y)o ̨ kni+
o ̨ k n i -
o ̨ k n i -
o ̨ k n i -
o ̨ k n i -
o ̨ k n i -
o ̨ k n i -
o ̨ k n i -
1pP
(y)o ̨ gwa+
o ̨ g w a -
o ̨ g w a -
o ̨ g w a -
o ̨ g w a -
o ̨ g w a -
o ̨ g w a -
o ̨ g w a -
2sP
sa+
sa-
sa-
sa-
sa-
sa-
sa-
sa-
2dP
sni+
sni-
sni-
sni-
sni-
sni-
sni-
sni-
2pP
swa+
swa-
swa-
swa-
swa-
swa-
swa-
swa-
3msP
ho+
ho-
ho-
ho-
ho-
ho-
ho-
ho-
3fisP
(ya)go+
go-
go-
go-
go-
go-
go-
go-
3znsP
(y)o+
o-
o-
o-
o-
o-
o-
o-
3mdpP
hodi+
hodi-
hodi-
hodi-
hodi-
hodi-
hodi-
hodi-
3fidpP
(ya)godi+
godi-
godi-
godi-
godi-
godi-
godi-
godi-
3zndpP
(y)odi+
odi-
odi-
odi-
odi-
odi-
odi-
odi-
5The C-stem conditioning environments listed here (as well as for inalienable nouns below) are partial. For discussion of why this is the case, please see §7.2.1
6An * indicates that the first segment of the stem is deleted 26
Table 4.4: Basic Nouns Patient Prefix Allomorphs - V-stems
Gloss
Prefix UR
i
a
e/e ̨
o/o ̨
1sP
(w)ag+
ag-
ag-
ag-
ag-
1dP
(y)o ̨ kni+
o ̨ k n -
o ̨ g y -
o ̨ k n -
o ̨ k n -
1pP
(y)o ̨ gwa+
o ̨ g w e ̨ - *
o ̨ g w -
o ̨ g w -
o ̨ g y -
2sP
sa+
s e ̨ - *
s-a
s-
s-
2dP
sni+
sn-
j-
sn-
sn-
2pP
swa+
s w e ̨ - *
sw-
sw-
j-
3msP
ho+
ho-*
ho-*
haw-
h-
3fisP
(ya)go+
go-*
go-*
gaw-
g-
3znsP
(y)o+
o-*
o-*
aw-
-
3mdpP
hodi+
hod-
hon-
hon-
hon-
3fidpP
(ya)godi+
god-
gon-
gon-
gon-
3zndpP
(y)odi+
od-
on-
on-
on-
The obligatory prefixation of the basic nouns, both possessed and unpossessed, can obscure the initial vowel segment of the noun stem. This means that these stems can be very difficult to locate in a dictionary. For example, when combined with the first person possessive prefix, the noun stem for ‘egg’ loses the glottal stop: [aknho ̨hsa^]. If na ̈ıve speakers were trying to look for the root in the dictionary, they might well search for a root looking like [-nho ̨hs-] rather than [-^nho ̨hs-], assuming that they were even able to recognize that there were in fact two entities, the stem and the prefix.
In contrast to the prefix-final alternations, the prefix-initial alternations exist because of certain ‘deleting phones’ that are deleted word-initially. Example (7) below gives an example of a prefix in a position where its initial [y] is deleted (7-a) and in a position where the initial [y] remains intact (7-b).
(7) a. b.
SR: o- ^nho ̨hs +a^ UR: (y)o+ ^nho ̨hsa^ 3znP+ egg + NSF eggs(s)
SR: de- yo- ^nho ̨hs +a:ge:
UR: de+ (y)o+ ^nho ̨hs +age:
dualic+ 3znP+ egg +more-than-2 two eggs
27
The prefix-initial and prefix-final allomorphy described above is true of all pronominal prefix types including not only basic noun prefixes, but also inalienable noun and verbal prefixes.
4.2.3 Inalienably Possessed Nouns (Body Part Nouns)
Inalienably possessed nouns occur in three forms, a normal possessed form, a basic noun type of unpossessed form and a lexicalised unpossessed form that occurs only rarely and is idiomatic.
Possessed Inalienables
The structure of the inalienable nouns is similar to that of the possessed basic noun. In- alienable nouns take an obligatory prefix denoting the gender and person of the possessor, and an obligatory locative suffix. Rather than take patient prefixes, as the basic nouns do, they instead take one of 14 agent prefixes (see table 4.5). Example (8) below illustrates the structure of possessed inalienable nouns:
(8) Agent Prefix+ inalienable noun stem +a^geh (locative suffix meaning ‘on’)
Example (9) gives two examples of inalienably possessed nouns: (9) Inalienably Possessed Nouns (Body Parts)
a. b .
s+ ne ̨ts+a^geh 2sA arm on
(on) your (sg) arm
e + n e ̨ t s + a ^ g e h 3f(i)A arm on (on) her arm
Agent prefixes display the same two types of allomorphy as described above for the possessed basic noun patient prefixes, including deletion of word-initial segments and prefix-
28
Table 4.5: Inalienably Possessed Noun Agent Prefix Allomorphs - C-Stems
Gloss
Prefix UR
^CV
hV
hCV
nV
r
y/w
Elsewhere
1sA
g+
k-*
k-*
k-*
k-
g-
g-
ge-
1idA
(e)kni+
kni-
kni-
kni-
kni-
kni-
kni-
kni-
1idA
(e)tni+
tni-
tni-
tni-
tni-
tni-
tni-
tni-
1edA
(y)akni+
akni-
akni-
akni-
akni-
akni-
akni-
akni-
1ipA
(e)dwa+
dwa-
dwa-
dwa-
dwa-
dwa-
dwa-
dwa-
1epA
(y)agwa+
agwa-
agwa-
agwa-
agwa-
agwa-
agwa-
agwa-
2sA
(h)s+
se-
s-*
se-
s-
s-
s-
se-
2dA
(h)sni+
sni-
sni-
sni-
sni-
sni-
sni-
sni-
2pA
(h)swa+
swa-
swa-
swa-
swa-
swa-
swa-
swa-
3msA
ha+
ha-
ha-
ha-
ha-
ha-
ha-
ha-
3f(i)A
( y ) [ o ̨ / e ̨ / e / a g ] +
e-
e-
e-
e-
e-
e-
e-
3znsA
ga/(y)/w+
ga-
ga-
ga-
ga-
ga-
ga-
ga-
3mdpA
hadi+
hadi-
hadi-
hadi-
hadi-
hadi-
hadi-
hadi-
3f(i)dpA
gao ̨ /gae/ga:g+
gae-
gae-
gae-
gae-
gae-
gae-
gae-
3zndpA
gadi+
gadi-
gadi-
gadi-
gadi-
gadi-
gadi-
gadi-
Table 4.6: Inalienably Possessed Noun Agent Prefix Allomorphs - V-Stems
Gloss
Prefix UR
i
a
e/e ̨
o/o ̨
1sA
g+
g-
g-
g-
g-
1idA
(e)kni+
kn-
gy-
kn-
kn-
1idA
(e)tni+
tn-
gy-
tn-
tn-
1edA
(y)akni+
akn-
agya-
akn-
akn-
1ipA
(e)dwa+
d w e ̨ -
dw-
dw-
gy-
1epA
(y)agwa+
a g w e ̨ -
agw-
agw-
agy-
2sA
(eh)s+
s-
s-
s-
s-
2dA
(eh)sni+
sn-
j-
sn-
sn-
2pA
(eh)swa+
s w e ̨ - *
sw-
sw-
sw-
3msA
ha+
h e ̨ - *
h-
h-
h-
3f(i)A
( y ) [ o ̨ / e ̨ / e / a g ] +
e ̨-*
o ̨ - *
ag-
ag-
3znsA
ga/(y)/w+
g e ̨ -
w-
w-
ø-
3mdpA
hadi+
had-
he ̨n-
h e ̨ n -
he ̨n-
3f(i)dpA
gao ̨ /gae/ga:g+
gae-
g a o ̨ - *
ga:g-
ga:g-
3zndpA
gadi+
gad-
ge ̨n-
ge ̨n-
ge ̨n-
29
final/stem-initial alternation and deletion processes. In (9) the stem begins with ne ̨ which fits the nV template in tables 4.5 and 4.6. In order to find the appropriate prefix form merely cross-reference the prefix type with the nV column in table 4.5 to determine the appropriate form of the prefix.
From tables 4.5 and 4.6 we see that there are two kinds of prefixes. Most have ob- viously related allomorphs, but some others have lexicalised prefix allomorphs. The 3fiA ((y)o ̨ /(y)e ̨/(y)e/(y)ag), 3fidpA ( gao ̨/gae/ga:g) and 3znsA (ga/(y)/w) prefixes each have allomorphs that are historically unrelated, and cannot be derived using morpho-phonological rules; therefore each UR would be listed separately in a dictionary.
‘Basic’ Unpossessed Body Parts
Inalienable nouns can appear in basic noun form taking the 3znP prefix o- and having a
“detached” meaning (Froman et al., 2002). These nouns are structured as in example (10): (10) a. o+ inalienable noun root +a^
b. o- no ̨^a:-a^ 3znP head NSF
A (detached) head
These formations are considered semantically odd, except when used in compounds as in example (11):
(11) gwisgwis ono ̨^a:^ pig head
Lexicalised Unpossessed Body Parts
Inalienable nouns may also occasionally appear in forms that take the 3znA prefix ga- and have a lexicalised meaning as in (12-a). For comparison, see (12-b) which shows the corresponding inalienable possessed noun.
30
(12) a. b.
ga- ya^d -a^ 3znA body NSF doll (basic noun)
g- ya^d -a^geh
1sA body NSF
on my body (inalienable body part)
De-verbal Nouns
4.2.4
The de-verbal nouns are formed by a nominal prefix, a verb root, a nominalizing suffix and a noun stem former. Essentially, the unit composed of verb stem plus nominalizing suffix acts exactly as the basic nouns described earlier.
(13) De-verbal Nouns
Prefix+ Verb stem +Nominalizing Suffix +NSF
a. ga+ tki +tr +a^ 3znA ugly Nominalizer NSF ‘junk’ - (to be ugly)
b. o+ ye ̨ +hsr +a^ 3znP lie.on.the.ground Nominalizer NSF ‘blanket’ - (to be lying on the ground)
The choice of nominalizing suffix is unpredictable, so it seems reasonable to treat these forms separately from actual nominal morphology. By this I mean that I will not be decomposing the derivational morphology within the de-verbal nouns, and I will be treating the combina- tion of verb-stem + nominalizer as a regular nominal root that is not decomposed (-ye ̨hsr- & -tkihsr- would each be considered a single unit in my system and act as a regular nominal root) (See §7.1). It would, however, be possible to replace such non-decomposed forms in the future with a module that correctly decomposes verbs and their derivational morphology.
31
4.3 Overview of Cayuga Morpho-phonological Variation
As has been alluded to in this chapter already, Cayuga words undergo a great deal of change when moving from the abstract underlying form to the surface form or vice versa. The morpho-phonological rules required to make these changes are listed fully in Appendix C, but I will briefly discuss a subset of them here.
A major feature of both Cayuga and other Iroquoian languages is a set of vowel hierarchy deletion rules (Hopkins, 1989). Vowels in these languages are ranked on a “strength hierar- chy” according to which vowels are deleted when adjacent to a weaker vowel at morpheme boundaries.
(14) a. o ̨>o>e ̨>e>a>i
b. UR: gao ̨+ aho ̨hd +a^geh
SR: gao ̨ - ho ̨ hd -a^geh
Example (14-a) describes the vowel hierarchy and (14-b) gives an example of a deletion caused by the hierarchy. As is clear from the example, this can easily cause the initial vowel of the stem or the final vowel of a prefix to be obscured.
There are two other additional rules which state that /w/ → [y] preceding [o, o ̨] and that /d/ → [g] preceding [y]. These two rules, in addition to the vowel strength deletion rules can all apply to a single prefix+stem combination; as shown in table 4.7.
Table 4.7: Multiple Rule Applications
UR:
(e)dwa+o ̨ ts+a^geh
Hierachy deletions:
(e)dw+o ̨ ts+a^geh
/w/ → [y]:
(e)dy+o ̨ ts+a^geh
/d/ → [g]:
(e)gy+o ̨ ts+a^geh
Other Rules→SR:
gyo ̨ tsa^geh
Here three rules have applied to a single prefix, rendering it almost completely opaque. One can easily imagine that in cases of multiple prefixes, even more rules could apply to a single word. Other First Nations languages, especially those in the Athapaskan family, which
32
have very high numbers of prefixes, can undergo an even greater number of rule applications to a single word form, producing even more variation and opacity. Implementing an FSM for Cayuga should thus demonstrate the general applicability of the FSTs to other polysynthetic languages.
4.4 Implications of the Data
The morphology and morpho-phonology of Cayuga nouns is quite complex, as has been shown from the brief overview contained in this chapter. Not only are there four types of nouns, but there are two important issues with the basic and inalienable nouns: firstly the number of possessive prefixes each basic or inalienable noun stem may take, and secondly the number allomorphs for each prefix.
This second problem can be addressed in two ways. It is possible to assume that speakers have learned a small set of abstract prefix morphemes and an extensive set of rules to derive the actual spoken forms of those prefixes. It is also possible, however, to instead assume a more limited set of rules and a much larger set of prefix morphemes listed in the lexicon that more concretely resemble the spoken form.
The implementation of both an abstract (rule-based) approach to the segmentation of Cayuga nouns as well as a more concrete (lexical) approach will be discussed in greater detail in 6.1.1.2. The following chapter will discuss in greater detail the implications of Cayuga for the development of dictionaries and the development in the finite-state framework.
33
Chapter 5
Issues in Implementation
The structure of Cayuga nouns raises two types of problems. The first and most important problem is that of dictionary access. Given the quantity of variation that occurs within pre- fixes and stems of Cayuga, it is difficult to learn to use a dictionary for Cayuga. Although this program is a direct implementation of the linguistic description it is also a computer program and the constraints of processing power and hard drive space entail that some potential problems ought to be avoided : non-determinism, and long-distance depen- dancies. These two computational problems will be discussed following a discussion of the linguistic problem of dictionary access.
5.1 Dictionary Access
There have long been problems regarding dictionary access for speakers of obligatorily pre- fixing languages, especially polysynthetic languages such as Iroquoian and Athapaskan lan- guages. Because these languages prefix obligatorily and undergo a high degree of morpho- phonological variation at prefix boundaries it can be difficult for speakers to properly segment morphemes in order to find them in a standard dictionary. Example (1) presents a sample of the difficulties that might arise.
(1) a. b.
UR: hadi+ihn+a^geh SR: hadi-hn-a^geh (on) their (male) skin
UR: hadi+aho ̨hd+a^geh SR: he ̨n-aho ̨hd-a^geh (on) their (male) ears
In (1-a) the underlying form of the prefix (hadi+) is clearly related to the surface pronunci- ation (hadi+). However, in (1-b) the surface and underlying forms for the same prefix are
34
different (hadi+ vs. he ̨n+).
The problem of dictionary access is not a new one. To date there are essentially two types of paper dictionaries for highly prefixing languages such as Cayuga: “base dictionaries” and “root dictionaries” (Foster et al., 1991).
A “base dictionary” is a dictionary in which forms are organized by meaning. A base is defined as stem or combination of stem plus affix(es) that has an at least partly lexicalised meaning. Morphologically related forms are related by cross-references. This is in contrast to the stem dictionaries in which forms are related by morphology. Such dictionaries are similar to traditional Indo-European dictionaries, but include rules for deriving related forms. Unlike European dictionaries, however, citation forms are not necessarily whole words.
The drawback to both of these approaches is that they require users to look up forms which lack the obligatory prefixes. This requires that the user be able to perform some amount of segmentation, in order to use the dictionary.
For some polysynthetic languages, this is not an issue. For example, because the morpho- phonology of Algonquian prefixes is generally straightforward, it is not too difficult to orga- nize a traditional dictionary that is easily usable. Often, stems can just be listed without affixes; prefixation is not obligatory in some forms. Another alternative, as in (MacKenzie and Jancewicz, 1994), is to choose a specific prefix and list all verbs with that prefix.
In example (2) we see how the initial ’mu’ was used to standardise the entries in the Innu dictionary.
(2) An example of a stem dictionary entry (MacKenzie and Jancewicz, 1994:p. 39):
35

Slightly more complex languages, such as Oneida or Cayuga, however, pose a greater problem to the user. There are often a large number of forms whose semantic meaning is unpredictable directly from their morphology and these need to be listed separately. Michelson and Doxta- tor (2002), to alleviate this problem have used the base approach to dictionary construction, to group semantically related items together.1
In example (3) we see how a single base is listed along with several varieties of forms related to that base as well as its component parts.
(3) An example of a base dictionary entry of a verb (Michelson and Doxtator, 2002:p. 465):
1In the finite-state approach the semantics of lexicalised forms must also be listed separately. This is straightforward to accomplish so there is no particular gain or loss with respect to this problem and the FS framework.
36

(4) An example of a base dictionary entry of a noun (Michelson and Doxtator, 2002:p. 465):
Unfortunately, this approach does not alleviate a second and equally important problem: that of how to appropriately list forms in a logical, accessible manner such that users can easily find a written entry from a spoken form. When Michelson and Doxtator (2002) compiled their dictionary of Oneida, a hybrid approach was used with nouns listed as whole words (including obligatory pronominal prefixes such as ‘ka’ in exaple (4)) and verbs were listed without the obligatory prefixes such that morphologically related forms would be grouped together. Compare examples (3) and (4) to see the difference in noun and verb listings. In contrast the Cayuga dictionary of Froman et al. (2002) lists all forms without prefixes.
Neither of these approaches is superior to the other; both present considerable usage difficulties. If users wish to look up a word in a whole word dictionary they must first know the conventions used to prefix each type of word (e.g., basic nouns are prefixed with the appropriate 3zn prefix (‘ga’, ‘o’ or ‘a’) but inalienable nouns with the 1sP prefix (‘ak’, ‘age’, or ‘ag’). Second, they must know the correct form of the prefix for the word that they wish to look up. In the case of a dictionary listing bare stems, users must know the form of the bare stem to be looked up: they must be able to properly segment the word. So either the users must know enough about the grammatical parts of speech to know how to determine the proper prefix for whole word forms or they must have a thorough knowledge of how to segment their language.
Unfortunately, speakers of a language often do not have conscious access to the underly- ing forms of morphemes. Mithun (1979) notes that in Mohawk, speakers cannot distinguish between epenthetic stem-initial ‘e’ and underlying stem-initial ‘e’. If speakers cannot deter- mine an epenthetic stem-initial sound, they may misconstrue the apparent stem they heard and be unable to look it up. Alternately, a stem-initial sound could have been deleted (de-
37

pending on the form that the user heard), and again they would have difficulty locating the form.
Often dictionaries are required to contain rather detailed explanations of the morphology of the language in order for users to be able to access them properly and even then they are still quite complex. For example, see (Froman et al., 2002:pp. xvi-xxxix, §8.2-8.3). This is a major barrier to the usability of dictionaries for these languages. The problems are only compounded when dealing with Athapaskan languages which tend have an even greater number of prefixes (Young and Morgan, 1987).
A finite-state application with a simple interface consisting of a web-based form would make dictionaries easily accessible to all speakers. One would need only type a word into the form to access its morphology and semantics and not have to learn the morpho-phonology of the language.2
5.2 Computational Problems
Some problems have, in the past, been considered non-computable in the finite-state. Re- cently work-arounds have been developed that solve some of these problems. Unfortunately, such solutions introduce complexity (§2.2).
When constructing an FST for Cayuga nominals, it is important to be careful to avoid using too many complexity-heavy operations as they can introduce significant complexity into the machine. Non-determinism and long-distance dependancies are two such problems that will need to be avoided. These two operations when coupled with composition, which already introduces complexity, can lead to a very high degree of complexity very quickly.
5.2.1 Non-determinism
Non-determinism (Beesley and Karttunen, 2003:§9.2.3) refers to an ambiguity within the finite-state machine. I distinguish two types of ambiguity, external ambiguity and internal ambiguity. A case of external ambiguity might be a surface form which could be derived
2A guesser could even be incorporated to make spelling easier for users who might have difficulties in that area.
38

from either of two or more underlying forms. This ambiguity is external because it is visible to the programmer and the user. Internal ambiguity is a case where at a given point the FSA can follow either one of two different paths, which are disambiguated later on.
Both types are undesirable, but external ambiguity is necessary and internal ambiguity can be difficult to locate or prevent. Examples (5)-(6) illustrate an externally ambiguous FST:
(5) a. b.
c.
e ̨dwayo ̨^
we all will give it to someone OR we all will arrive
e ̨+ dwa +y +o ̨ +^3 future 1idpA give epenthetic [y] punctual we all (inclusive) will give it to someone
e ̨+ dwa +yo ̨ +^ future 1idpA arrive punctual we all (inclusive) will arrive
The FST that would recognize the forms in (5) is described in example (6). (6)
q1 ę q2 + q3 d q4 w q5 a q6 + q7 y q8
The symbol ‘E’ is used to denote an empty string in the FS framework, and is conceptually similar to the linguistic formalism of using ‘Ø’. It is generally used when one needs to output on one side more symbols than have been inputted. However, as we will see, the E-transition can lead to non-determinism.
The FST in (6) is fine so long as we are only trying to recognize an underlying form or remove the morpheme boundaries from a segmented form. Unfortunately, if we try to go the
3The literature generally reports that the form meaning we all (incl) will give it to someone is [e ̨gyo ̨^] from /e ̨-dwa-o ̨-^/→/e ̨-dw-o ̨-^/→/e ̨-dy-o ̨-^/→/e ̨-gy-o ̨-^/. However, speakers currently prefer the more transparent form in (5-b) (Froman et al., 2002:Appendix J).
39
ɛ ęɛdwaɛy+Njɛ7
ɛ ɛ
q9 Nj q10 + q11 7 q12

other direction, we reach a point of non-determinism at q8. At that state, when converting from SR to UR, the machine has no way of determining which is the correct path to take.
In this case, we would want the transducer to output both forms, but this would require that the machine explore all possible paths and output any that could be correct. In some cases, the FST may run quite far down a path before hitting a roadblock of some sort and aborting that path. If there are dozens of such forks the machine may have to explore tens, hundreds or thousands of paths to figure out where it is going. Obviously, such a program would run significantly more slowly than a program that only has one valid transition out of each state.
These examples show how certain operations can introduce non-determinism into an FST. In an FST representing an entire language, non-determinism is virtually unavoidable, but one must be careful to avoid needless non-determinism since it will significantly slow down the processing (Nederhof, 1996; Beesley and Karttunen, 2003).
5.2.2 Long-distance Dependancies
A long-distance dependancy is when the occurrence of a morpheme or morpho-phonological variant is governed by a factor that is not immediately adjacent to it. An FSM has no memory; it can only know the immediately preceding segment and the current segment. It is often costly, therefore, to model long-distance dependancies.
In example (7) we have a case of a long-distance dependancy where the suffix and prefix are co-dependant. The prefix (e)kni- requires the suffix -ageh^ (compare (7-a) and (7-d)) and o- requires the suffix -a^ (compare (7-b) and (7-c)).
(7) a. b.
(e)kni + gahgwaos + a^geh
1IncDu + eyebrow + on
(on) our (two people including listener and speaker) eyebrow(s)
o + gahgwaos + a^ 3NP + eyebrow + NSF an eyebrow (detached)
c. *o + gahgwaos + a^geh 3NP + eyebrow + on
40
d. *(e)kni + gahgwaos + a^ 1IncDu + eyebrow + NSF
Example (8) shows the most parsimonious way to model the production of the forms in (7). However, the FSA in (8) overgenerates, producing not only (7-a) and (7-b) but also the invalid forms (7-c) and (7-d):
(8)
To model these forms correctly one would actually need to include an arc for the root form twice. This implementation, however, is relatively inefficient, in this case, doubling the number of arcs per root form, thereby increasing storage space required:
(9)
(e)kni a’geh
q1 q2
gahgwaos
q3 q4
o a’
q1
(e)kni
o
q2
q3
gahgwaos
gahgwaos
q4
q5
a’geh
a’
q6
The program I will be using to construct the FST has a built-in methodology for pro- gramming long-distance dependancies in the lexicon called “flag diacritics” (Beesley and Karttunen, 2003:339-373). These are used at run-time to constrain relationships. While the size of the machine is unaffected, actual run-time processing is slower.
Several types of flag diacritics exist for a variety of purposes, but for the construction of my machine the type that is of interest are the “u-type” flag diacritics. These flags can be placed anywhere within the lexicon, as needed. If a string is generated with mismatched flags, that string is discounted as invalid at run-time (10-c). This means that prefixes that
41
can only take certain suffixes can be marked with the same flags whereas the other prefixes and suffixes are marked with different flags.
The FST program would recognize the words in examples (10-a) and (10-b) as valid because the two flags in the words are identical. In (10-c), however, there is an ‘UNPOSS’ and a ‘POSS’ flag, which do not match up, so the word would be marked as invalid.
(10) a. b. c.
@U.INALIEN.POSS@ g+ no ̨^a: @U.INALIEN.POSS@ +ageh^ Possessive Flag 1sA head Possessive Flag LOC ‘On my head’
@U.INALIEN.UNPOSS@ o+ no ̨^a: @U.INALIEN.UNPOSS@ +a^ Unpossessed Flag 3znP head Unpossessed Flag LOC ‘My detached head’
*@U.INALIEN.POSS@ g+ no ̨^a: @U.INALIEN.UNPOSS@ +a^ Possessive Flag 3znP head Unpossessed Flag LOC
It is possible for the FST programming tool to automatically remove flags and re-construct an equivalent FST which does not require flags. This means that I can automatically convert from an FST like that in example (8) that uses flags to the equivalent machine as in example (9) that does not use flags. The advantage to such a conversion is generally an increase in processing speed, but the one drawback is that this can drastically increase the size of the transducer.
Flags have the format X.FEATURE.VALUE where X is the flag type, feature is a feature name and value is the value of the feature. Other flag diacritics are P-type flags that allow the user to set a certain value to a feature (e.g.: P.INALIEN.POSS flag follow- ing a U.INALIEN.UNPOSS would act as if the user had initially set a U.INALIEN.POSS flag); N-type flags that set the value of a flag to the complement of a given value (e.g.: N.INALIEN.POSS will match with any INALIEN.* where * is not equal to POSS); R- type flags that check if a feature has a certain value (e.g.: if P.INALIEN.POSS is set then R.INALIEN.POSS will succeed but R.INALIEN.* will fail if * is not equal to POSS); D-type flags that only succeed if the feature is not yet set; and C-type flags that reset a feature to a neutral value.(Beesley and Karttunen, 2003:pp. 353-356)
Please note that flag diacritics do not confer any greater-than-finite-state power to an FSM. They are merely for convenience of composing lexicons. More in-depth discussion can
42
be found in (Beesley and Karttunen, 2003:pp. 339-341)
5.3 Summary
The problem of dictionary access can be greatly alleviated by having a computer program that can do all the morpho-phonological heavy lifting. A finite-state solution seems almost ideal, except for some of the potential computational problems mentioned above. These problems however, can be satisfactorily addressed, as the following two chapters explain.
43
Chapter 6
Methodology
This chapter will give an overview of the practical and technical requirements and specifica- tions for the design of the FST, as well as a discussion of the tools that I used to implement the machine.
6.1 Requirements
There were two requirements that a successful morphological analyser/generator for Cayuga needs to fulfill. It needs to (a) produce useful dictionary output; (b) be easy to use. For the purposes of producing useful output it will also be valuable to (c) test the morpho- phonological rules posited for Cayuga nominals. Finally there are two other empirical re- quirements for the consideration of future work: (d) determine the usefulness of the finite- state framework for such polysynthetic languages; and also (e) serve as a way of comparing machines of varying degrees of linguistic elegance for their usefulness and complexity.
6.1.1 Ideal Dictionary Output
Given that speakers do not have conscious access to their underlying linguistic knowledge regarding morpho-phonology (Mithun, 1979), it is unclear what sort of information would be the most useful output for a speaker attempting to access a dictionary: would a set of underlying prefixes not necessarily obviously related to the actual pronunciation be useful; or would the output of a prefix not obviously related to other prefixes with a similar meaning be useful? To return to the example (1) (originally from §5.1 and repeated below): is it more useful for the speaker entering the words in (1) to be told that (a) there is a single underlying prefix (hadi+) whose meaning is 3mdpA and can be pronounced in several ways including both (hadi) and (he ̨n); or (b) there are several prefixes which all mean 3mdpA and are produced in several different situations? Speakers tend to prefer the second alternative
44
(Dyck, 2006).
(1) a. b.
UR: hadi+ihn+a^geh SR: hadi-hn-a^geh “(on) their (male) skin”
UR: hadi+aho ̨ hd+a^geh SR: he ̨n-aho ̨hd-a^geh “(on) their (male) ears”
As has been described above (§4.2), the majority of nouns in Cayuga take some form of obligatory prefix, often with a stem change, leading to difficulties in segmentation and stem identification. This problem is discussed more fully below.
6.1.1.1 Abstractness vs. Concreteness
One problem that I will need to resolve is that it is not clear whether all prefix variants should be listed in the lexicon (concrete), or whether they should instead each be derived by rules from a smaller set of prefixes (abstract). Firstly, some prefix combinations (as in example (2) are lexicalised, or non-transparent.
(2)a. gao ̨+ 3fidpA+a-root
b. gae+
3fidpA+i-root OR C-root
c. ga:g+ 3fidpA+other root
The relationship between these alternants is opaque. This means that they should be listed separately in the lexicon to represent the speaker’s intuition, especially since they are not easily derivable from morpho-phonological rules.
Other prefixes, such as those in example (3), however, are derivable, but are still not fully accessible to speakers in their underived forms. In this case, it still might be more useful to list these prefixes in the lexicon, again to represent speaker intuition, despite the
45
fact that they can be easily derived.
(3) a.
b.
UR: -(y)o ̨kni- N
SR: -(y)o ̨kni- N 1DuP [c/i]-initial root
UR: -(y)o ̨kni- -a SR: -(y)o ̨gy- -a 1DuP [a]-initial root
It is possible to represent underlying /-(y)o ̨kni-/ as two separate affixes in the lexicon, one, the SR (3-a), that precedes most nouns and another that precedes noun stems beginning with [a], the SR in(3-b). This is the concrete approach. In contrast it is possible to list only /-(y)o ̨kni-/, the UR in both (3-a) and (3-b), in the lexicon, using a rule (4) to derive [-(y)o ̨gy-]. This is the abstract approach.
(4) kni+a → gya
Linguists such as Froman et al. (2002); MacKenzie and Jancewicz (1994); Michelson and Doxtator (2002); Chafe (1967); Young and Morgan (1987) and Foster (1986) tend to represent the most abstract form when constructing dictionaries so that (3) (a) and (b) would be listed as a single underlying prefix ‘(y)o ̨kni-’.
For a user it would likely be more useful to have a more concrete representation of affixes that are easily relatable to the actual pronunciation. It may however become clear once the project is underway that the specification of all affixes and base forms is not the most efficient method for the structuring of the project.
6.1.1.2 Computation of Abstractness vs. Concreteness
Considering that there are two possible linguistic solutions (listing allomorphs in the lexicon or deriving them from rules), it is also important to determine if both these approaches are equally computationally viable. If one method results in a machine that is too large or slow, it does not particularly matter if it is more useful to users since it will be unimplementable.
46
Adding morpho-phonological rule transducers will require additional compositions of FSTs which can very quickly lead to significant increases in the size of the final automaton and its running time. It might well be reasonable, therefore, to implement allomorphy in the lexicon rather than in the rules module.
I therefore decided to design my program in two separate versions. One version assumes fairly abstract prefix morphemes while the other assumes more concrete lexicalised prefix allomorphs as the UR.
In the abstract approach, the forms that are output to users are more linguistically and descriptively elegant, but are less useful to the users, who would require more specialized knowledge of the morpho-phonemics of the language to interpret the output (§5.1). The concrete approach, however, attempts to design with the end user in mind such that it will generate a set of prefixes that the user will be able to consciously relate to the actual pronounced surface forms.
The project should provide a means for comparison in terms of computational elegance and computational complexity of the two approaches described above. I compared the two machines to each other rather than to a separate set of arbitrary criteria. This was done because I am only attempting to determine which machine is most efficient. As mentioned earlier (§6.1.3) it is beyond the scope of this project to determine the applicability of the framework to these languages for a full implementation, so for the moment a comparative method will have to suffice. The criteria for computational elegance and complexity are listed below.
Computational Elegance:
• Time/difficulty of creation of machine
• Time/difficulty of modification of machine Computational complexity:
• Relative numbers of states
• Relative numbers of transitions
47
• Relative run-time
• Relative machine size in kB
Computational elegance will be viewed loosely in terms of the difficulty of creation and modification of the design. If it is difficult or tedious to update the program or requires significantly more time to effect changes, one version will be deemed less computationally elegant than the other. In terms of complexity, this will be judged by comparing the numbers of states and transitions that each machine contains, as well as average running times and final machine sizes in kB.
6.1.2 Thorough Testing of Morpho-phonological Rules
The finite-state framework allows for a high speed testing of the rule formalisms relating surface and underlying forms that have been already posited for Cayuga. The machine is designed to relate the surface and underlying forms of the words; and rule formalisms are the most straightforward way to generalize that relationship so that the program must naturally represent a testing environment for the rule formalisms.
It is often difficult to test the ordering of large numbers of rules against large numbers of word-forms to ensure that there are no incorrect forms generated or inconsistencies in the output. Also, applying large numbers of rules by hand to large data sets leaves a margin for human error. Having a computerized version of the rule formalism, however, solves this problem.
It becomes possible to easily and quickly test very large sets of data against the machine to ensure that the output is correct for all cases. One can design a set of input data knowing what the output should be and automatically compare that to the actual output of the machine (§7.2.1).
6.1.3 Applicability of FS Framework to Morphologically Complex Languages
The project must demonstrate that the finite-state framework is capable of handling the complex morphological and morpho-phonological processes of First Nations languages ef- ficiently. This means that the program must be able to quickly process words containing
48
long-distance dependancies (§5.2.2) and prefixes which may be opaque, semi-opaque or am- biguous (§4.2.2-4.2.3).
Despite the fact that nouns display the majority of interesting morphological and morpho-phonological properties of Cayuga, such as large degrees of allomorphy and long- distance dependancies, there are a few caveats to keep in mind. Verbs have more prefixes and more prefix combinations than the nouns. Furthermore, verbs also have a much higher incidence of long-distance dependancies. It is possible therefore, that despite the fact that the machine described in later chapters is computationally adequate, that the expansion of the machine may pose efficiency problems. In particular, a large number of additional long-distance dependancies could pose a problem. My machine models only a single long- distance dependancy whereas a model that handles verbs would require several long-distance dependancies (where the greatest complexity is likely to be introduced).
6.2 Specifications
I will here briefly overview the specific requirements of the abstract and concrete FSTs. They each follow essentially the same design, so differences are only mentioned where applicable. A fully detailed description of the programs can be found in §7.1. In light of the motivations described above the programs must conform to several technical requirements.
1. In order to satisfy the needs of dictionary users, the program must generate and segment all the basic noun types described in §4.2:
• Unpossessed Basic Nouns - A 3rd person neuter prefix followed by a basic noun root and a noun stem forming suffix.
• Possessed Basic Nouns - A patient prefix followed by a basic noun root and a noun stem forming suffix.
• Possessed Inalienable Nouns - A agent prefix followed by an inalienable noun root and an external locative suffix.
• Unpossessed Inalienable Nouns - A single 3rd person neuter singular patient /(y)o-/ prefix followed by an inalienable noun root and a noun stem forming suffix.
49
• De-verbal Nouns -A third person neuter prefix followed by a verb root and deverbal suffix and noun stem former.
• Defective Nouns - A single defective noun root.
2. The program must generate and segment only these word forms. In order to be appropriate for a dictionary tool and to properly represent the language, the machine must not give false positives (i.e., no incorrect forms should be judged as correct).
3. The program must provide basic semantic output for all word form morphemes. To satisfy the needs of a dictionary application, semantic output must be generated for the user (My program only generates a basic semantic representation, however, to demonstrate that it is possible).
4. The program must encode an ordered rule formalism that is adequate for testing the set of morpho-phonological rules and their ordering as currently posited for Cayuga.
5. The program must be able to have an easy to use interface created such that users need only type a word to receive its morphology and semantics.
6. The program must satisfy the requirement of testing the adequacy of the finite-state framework for applications in First Nations languages. The final machine must present data on the comparative levels of efficiency of the two approaches.
6.3 Tools and Data Structure
To implement the program I used XFST (Beesley and Karttunen, 2003), a finite-state devel- opment environment developed by Xerox for use by computational linguists. XFST makes the creation of finite-state machines somewhat more intuitive. It is a tool that allows a com- putational linguist with only modest knowledge of programming and computational theory to create and modify finite state machines.
Without a tool like XFST one might need to know how to create a ‘regular expression’ that would look something like:
(5) /(h|c)at/
50
A regular expression is a formalism for describing a language, in this case the language consisting of the strings ‘hat’ and ‘cat’ (Beesley and Karttunen, 2003; Nederhof, 1996). However if one were attempting to encode an entire language, the resulting regular expression could easily become very long.
(6) /((h|r|c)at)|((c|b)ar)(e|E)/
E denotes the ‘empty’ character
Example (6) describes a very small language containing: ‘hat’, ‘rat’, ‘cat’, ‘car’, ‘bar’, ‘hate’, ‘rate’, ‘care’, ‘bare’ and *‘cate’ (The ‘cate’ example shows how it can be quite easy to make a mistake with regular expressions that need to match many forms). In contrast, using XFST, one can simply create a lexicon file which details (a) the morphemes that exist in the language and (b) how they can join together. XFST can then turn that result into an FST that correctly encodes a regular expression.1
Another positive aspect of XFST is that it is constantly compiling and optimizing the machine as it is being created by the user. This means that it is significantly more efficient and simple than writing a finite-state machine and then optimizing it afterwards; the machine will run more quickly and take up less space overall. Additionally, users can check their work as it progresses, with no need to wait until programming is complete.
Finally, XFST also includes several specialized tools for creating linguistic descriptions. Two of these tools are described in the following two sections.
6.3.1 Lexc
The Lexc language is an XFST formalism developed specifically for designing lexicons. Lexc allows the user to design several “sub-lexicons” (e.g., a prefix lexicon and a stem lexicon) and define how the lexicons each join to each other in terms of what are called “continuation classes”. (Beesley and Karttunen, 2003:§4)
1Regular expressions and FSMs are generally equivalent in that a regular expression can be represented as an FSM and vice-versa, but there is often a loss of efficiency in translation (Nederhof, 1996). There are also other formalisms (such as finite-state grammars) for specifying FSM, but generally regular expressions are the most popular.
51

Table 6.1: Sample Cayuga lexc Lexicon.
LEXICON ga+
o+
a+
LEXICON
LEXICON ^wahsa: nahda hnyo ̨ ^o ̨ hsra
nominalPrefixes gaNouns ; oNouns ; aNouns ;
gaNouns deverbalNouns ; gaBasicNounRoot ;
gaBasicNounRoot NSF ; NSF ; NSF ;
! ‘earrings’
! ‘comb’
! ‘steel, iron’
Each sub-lexicon specifies a morpheme in the left column and the “continuation” class (if any) in the right-hand column. The continuation class is simply the name of another sub-lexicon whose morphemes are allowed to follow after the given morpheme in this sub- lexicon.
In the table 6.1, four sample lexicons are given in lexc format. The first lexicon specifies all the nominal prefixes (in the left column) as well as the name of the lexicon that specifies what can follow each prefix (on the right). So, the prefix ga can be followed by anything found in the lexicon named gaNouns which in turn specifies two further lexicons that can follow it. This allows the linguist to break down the forms into as many parts as are necessary to describe the URs of all words in the language.
Example (7) gives a sample possible output from the FST define in table 6.1. (7) nominalPrefixes+ gaNouns+ gaBasicNounRoot +NSF
LEXICON
+a^ #;
ga+ ø+ ^wahsa: ga+^wahsa:+a^ earrings
52
+a^#
NSF #;
Because ga+ was the output from the ‘nominalPrefixes’ sub-lexicon, the next segment has to come from the ‘gaNouns’ sub-lexicon. The output of either option in that sub-lexicon is ø followed by either of the applicable sub-lexicons (‘deverbalNouns’ or ‘gaBasicNounRoot’ ). After an item from ‘gaBasicNounRoot’, an item from the sub-lexicon ‘NSF’ must follow. This sub-lexicon specifies # as the continuation class, which signals to the compiler that it is a valid end state (§3.2).2
The lexicon description in lexc format is converted into an FST by the lexc compiler. This FST can then be composed with other FSTs that represent other modules of the final program (§3.6), including a rules module or a semantics module. Such a methodology facilitates the modification of either module independantly from the others.
6.3.2 Rule-like Notation
Just as XFST provides the lexc formalism for defining lexicons, it also provides a number of built-in rule-formalism shortcuts that make the writing of morpho-phonological rules much simpler for linguists. In the same way that a lexc lexicon is compiled into an FST, so too are these rules compiled into an FST. The two resulting modules can then be composed together.
Rules are defined using a notation very similar to standard phonological rule notation. For example a vowel coalescence rule written as:
(8) /a+i/→[+e ̨]
would instead be written as:
(9) defineaie ̨[a%+i−>%+e ̨];3
The rules are composed together to form a module of rules. The order in which the rules are composed is identical to the order in which they will apply, meaning that the rule ordering
2When using lexc, one need not have a word-initial word boundary marker if one is only working with single words. The transducer will report an error if it encounters a multi-word token.
3In the Lexc formalism, the + symbol is a character with special properties, and to encode the + as a normal symbol it must be prefixed by a % symbol.
53

in the finite-state machine is logically identical to the posited morpho-phonological rule orderings.
6.4 Summary
Having described the basic types of structures from which my machines were formed, I will now go on in the following chapter to specifically describe the structure of the machines and what findings were determined during their construction.
54
Chapter 7
Results
Here I will discuss the structure of the final program, giving a description of each module and of the construction of both the concrete and the abstract machines. Following that, I will analyse the ability of the machines to meet the requirements as set out in §6.1 and compare their performances.
7.1 Final Program Components
The final machine was composed of several parts; firstly, the morphological analyser, secondly the semantics module and thirdly, the user interface. The morphological analyser itself was constructed of several modules, which are explained below. An explanation of the semantics module and the interface follows the discussion of the morphological analyser
Since the finite-state framework is inherently modular (§3.6), I developed my programs each in three separate modules. I developed a lexicon module, a rules module and a basic semantics module. The semantics module was produced only to make a more satisfying final product and demonstrate that a semantic component could easily be added. It does not lie within the primary focus of the project to output more than a basic semantic gloss.
7.1.1 Lexicon Module
As explained in §6.3.1 the lexicon module is constructed by the concatenation of multiple sub-lexicons using lexc. These lexicons concatenate noun morphemes together, but do not perform any rule-based operations.
There are four separate sub-lexicons for ‘defectives’, ‘deverbals’, ‘basics’ and, ‘inalien- ables’ which in turn point to their own set of specialised sub-lexicons. The sets of sub-lexicons for generating each noun type in the abstract lexicon will be discussed below.
55
I will be only discussing the specifics of the abstract approach as it is much simpler in terms of sub-lexicons than the concrete approach. The concrete approach is essentially similar, but with more sub-lexicons. This aspect of the concrete approach will be discussed in more detail later.
7.1.1.1 Defective Nouns
The defective nouns are the most straightforward and are illustrated in fig. 7.1. The main over-arching sub-lexicon “nouns” points to a sub-lexicon named “defectives” that in turn merely lists all defective nouns. Since there is no internal morphology, there is no need for further sub-lexicons; so the “defectives” sub-lexicon is merely followed by a word-boundary.1
Figure 7.1: Abstract Defective Noun Sub-lexicon Structure
#
Nouns Defectives
#
Description of the series of sub-lexicons used to generate a defective noun.
A sample defective noun as generated by the machine by joining the constituents of the appropriate sub-lexicons is shown below in example (1):
(1) Nouns+ Defectives
ø+ sgwa:gwao ̨ do ̨ ^# sgwa:gwao ̨do ̨ ^ toad
7.1.1.2 De-verbal Nouns
De-verbal nouns are slightly more complex than the defective nouns. As described in figure 7.2, the sub-lexicon named “deverbals” contains a list of prefixes that can attach to deverbal
1Word boundary symbols (#) are used to represent the start and end of the machine but do not appear in the input or output.
56

noun roots such as ga+, a+, o+, Ø.
Figure 7.2: Abstract De-verbal Noun Sub-lexicon Structure
null roots
#
Nouns Deverbals
ga roots a roots o roots
NSF #
Description of the series of sub-lexicons used to generate a defective noun.
Each prefix points to the appropriate sub-lexicon containing roots that may attach to it; so for example, the ga+ entry in the “deverbals” sub-lexicon would point to a further sub-lexicon named “ga roots” which contains a list of all roots which may take ga+ as a prefix. (These nouns roots were divided in the lexicon because the prefixes that they take are fully lexicalised and do not depend on any morpho-phonological factors).
Example (2) gives an example of a deverbal noun as constructed by the FST from the constituents of each sub-lexicon.
(2) Nouns+ Deverbals+ a roots +NSF ø+ a+ atsho^kdo ̨hsr +a^# a+atsho^kdo ̨hsr+a^ hoe
7.1.1.3 Basic Nouns
The structure of the sub-lexicons to generate the basic nouns is significantly more complex than that for generating the deverbals. There are two primary branches in this series of sub-lexicons. The first branch is a sub-lexicon containing the unpossessed prefixes and their appropriate sub-lexicons, the second branch contains the possessed prefixes and their
57
appropriate sub-lexicon.
The sub-lexicon for unpossessed basic nouns (“unpossessed prefixes”) acts identically to the de-verbal lexicon described above. For this reason as in the deverbal lexicon, the basic noun roots have been sub-divided according to the unpossessed 3rd person neuter prefixes that they can take. The prefixes in the “unpossessed prefixes” sub-lexicon each point to the appropriate sub-lexicons of roots that take either ga- as a prefix (“gaRoots”), a- as a prefix (“aRoots”), o- as a prefix (“oRoots”), or ø- (“nullRoots”).2
Figure 7.3: Abstract Basic Noun Sub-lexicon Structure
#
Nouns Basics
unpossessed possessed prefixes prefixes
allRoots
gaRoots aRoots oRoots nullRoots loanWords
NSF #
Description of the series of sub-lexicons used to generate a defective noun.
The other main branch of the basic noun sub-lexicons is the “possessed prefixes” series. This sub-lexicon contains all the possessed prefixes that may attach to a basic noun root and each prefix then points to a sub-lexicon named “allRoots”. “allRoots” is empty except for a reference to each of the other sub-lexicons. Instead of attaching specific prefixes to specific basic noun roots, it allows all possessive prefixes to attach to all basic noun roots.
As can be seen from table 7.1, the “allRoots” sub-lexicon contains no morphological
2As described in §4.2.2 some basic noun roots have a choice of two prefixes. These roots are listed in sub-lexicons that are linked up with both appropriate prefixes. These (very small) sub-lexicons have been omitted from the diagram for the sake of simplicity.
58

(3) a. b.
Nouns+ Basics+ Possessed Prefixes+ allRoots +nullRoots +NSF ø+ ø+ (w)ag+ ø+ e ̨^nhotr +a^# (w)ag+e ̨^nhotr+a^ my ball
Nouns+ Basics+ Unpossessed Prefixes+ oRoots +NSF ø + ø + o + ^ d o ̨ d r + a ^ # o+^do ̨dr+a^ gristle
Table 7.1: Basic Noun “allRoots” Sub-lexicon
LEXICON Ø
Ø
Ø
Ø
allRoots gaRoots ; oRoots ; aRoots ; nullRoots ;
data3, merely references to the other sub-lexicons. This enables me to reference the sub- lexicon “allRoots” once rather than to reference all the other sub-lexicon for each prefix. If I did not have this structure, each prefix would have to be listed once for each sub-lexicon to which it could attach, rather than being listed as merely attaching to the “allRoots” sub-lexicon.
Two examples of these structures can be found below in example (3):
Once a root from one of the 5 root sub-lexicons has been joined to its prefix one of two things is done. The “gaRoots”, the “aRoots”, the “oRoots” and “nullRoots” lexicons link to the “NSF” sub-lexicon, which adds the NSF suffix and terminates the word-formation process. Alternately, if a root from the “loanWords” sub-lexicon was added, no NSF suffix is attached to the word, it leads directly to the terminal # marker.
7.1.1.4 Inalienable Nouns
Inalienably possessed nouns have the most complex structure in the abstract lexicon. This is for two reasons: (a) they make use of several lexicalised prefixes that required a sub-division
3the Ø symbol is added for clarity, but is not part of the lexc formalism 59

of the lexicons (see §4.2.3, and §6.1.1.1 for more discussion on this topic) and (b) they contain long-distance dependancies that are handled with flag diacritics.
As with the basic nouns, there are two primary divisions in the nouns generated by this lexicon. As shown in 7.4 the first type are the “Flag1”4 inalienables and the second type “Flag2” inalienables. “Flag1” and “Flag2” designate the attachment of flag diacritics, that eventually ensure that the agent prefixes (Flag2) co-occur with the locative suffix (-a^geh) while the 3znS prefix ((y)o-, Flag1) co-occurs with the NSF suffix -a^. These flags (and the 3znS prefix) are added in the initial “inalienables” sub-lexicon.
Figure 7.4: Abstract Inalienable Noun Sub-lexicon Structure
# Nouns Inalienables
prefixes
roots
C roots V roots a roots Nj roots ... roots
Inalienable Suffixes
Flag1 locativeSuffix
NSF
Description of the series of sub-lexicons used to generate an inalien- able noun.
#
4Please note that “Flag1” used here is a short form of @U.INALIEN.POSS@ used in §5.2.2 and “Flag2” a short form of @U.INALIEN.UNPOSS@.
60
o+ Flag1
Flag2
Flag2
Paths With ‘o+Flag1’
Forms with “o+Flag1” are followed by the sub-lexicon named “roots”. This sub-lexicon is a directory that outputs nothing (ø) and points to all of the sub-lexicons which contain the various inalienable noun roots (“C roots”, “V roots”, “a roots”, etc. There are 10 sub-lexicons, not all of which are listed; “... roots” is an abbreviation for these sub-lexicons).
A noun root from any of these sub-lexicons is added on the (y)o+Flag1 construction previously output by the “inalieneables” sub-lexicon. The result is (y)o+Flag1+any specific noun root. This construction then points to the “Inalienable Suffixes” sub-lexicon.
The “Inalienable Suffixes” sub-lexicon either attaches “Flag1” and points to the “NSF” sub-lexicon (containing +a^) or it attaches nothing (ø) and points to the “locativeSuffix”
sub-lexicon (containing Flag2+a^geh). The end result can generate ill-formed constructions as in example (4) below.
(4) a. Nouns+ Inalienables+ Roots+ a roots +Inalienable Suffixes ø+ (y)o-Flag1+ ø+ aho ̨ hd +Flag1 (y)o+Flag1+aho ̨hd+Flag1+a^ ears (detached)
b. *Nouns+ Inalienables+ Roots+ a roots +Inalienable Suffixes ø+ (y)o-Flag1+ ø+ aho ̨ hd +Flag2 (y)o+Flag1+aho ̨hd+Flag1+a^Nonsensical form
Paths With ‘Flag2’
both well-formed and
+NSF +a^#
+locativeSuffix +ageh^#
Forms with “Flag2” are followed by the “prefixes” sub-lexicon. This sub-lexicon lists two types of possessed agentive prefixes (§4.2.3, pg. 27): (a) the transparent prefixes whose allomorphs can be derived by rules and (b) the opaque prefixes whose allomorphs are not synchronically morpho-phonologically related.
The transparent prefixes point to the “roots” sub-lexicon and proceed identically from there, as do the ‘o+Flag1’ inalienables described above, resulting in a form of the type Flag2+any specific noun root+Flag2+a^geh or Flag2+any specific noun root+Flag1+a^, the latter being ill-formed.
The opaque prefixes (e.g., 3znsA or 3fiA), however, are derived differently. Each of 61
these prefixes points to a specific sub-lexicon containing a sub-set of noun roots. For example the 3fisA prefix /(y)e-/ points to the “C roots” sub-lexicon while the 3fisA prefix /(y)o ̨-/ points to the “a roots” sub-lexicon. The results then are Flag2+(y)e+consonant-initial root and Flag2+(y)o ̨+[a]-initial root as show in example (5) below.
The output from these root sub-lexicons then proceeds as previously described, giving both valid forms such as Flag2+(y)e+consonant-initial root+Flag2+a^geh and invalid forms such as (y)o+Flag1+any specific noun root+Flag2+a^geh. These invalid forms are then removed at run-time or during later composition as described in §5.2.2.
(5) a. Nouns+ Inalienables+ Prefixes+ a roots +Inalienable Suffixes +NSF ø+ Flag2+ (y)o ̨+ aho ̨hd +Flag2 +ageh^# (y)o+Flag1+aho ̨hd+Flag1+a^ ears (detached)
b. *Nouns+ Inalienables+ Prefixes+ a roots +Inalienable Suffixes +locativeSuffix ø+ Flag2+ (y)o ̨+ aho ̨hd +Flag1 +a^# (y)o+Flag1+aho ̨ hd+Flag1+a^
7.1.1.5 Flag Diacritics
Figure 7.4 (p. 60) also illustrates how flag diacritics (§5.2.2) operate. Flag1 attaches with the prefix “o+” and the NSF suffix for the formation of basic noun style inalienables 4.2.3. Flag2 is inserted with all other agent prefixes and with the locative suffix. This allows the machine to generate illegal forms in which conflicting flags co-occur, as described earlier. These illegal forms as in example (6), are then filtered out at a later point.
(6) *o+ hsohgw +a^geh 3znP+ lip +LOC
The form in example (6) is not valid because the prefix ‘o+’ with an inlienable noun stem requires the suffix ‘+a^’ and cannot take the suffix ‘+ageh^’. In order to avoid having to define the inalienable noun root sublexicon twice I decided to have a machine that overgenerates by producing even the invalid prefix and suffix combinations.
To constrain the output to only the valid word forms I used flag diacritics (Beesley and Karttunen, 2003:339). A “u-type” flag was used to mark the possessive or unpossessive
62
prefix and suffix. At runtime the machine then checks these flags to make sure that the prefix flag corresponds to the suffix flag. If they do not the machine returns an “invalid” response for the word. In the final version of the program these flags were removed and an equivalent FST was automatically generated by XFST (as described in §5.2.2).
7.1.1.6 Possible Modifications of Inalienables Nouns Sub-lexicons
When constructing the inalienable noun lexicon for the abstract approach I decided to create sublexicons to handle the alternations of the 3fiA, 3znsA and 3fidpA prefixes for inalienable nouns. These prefixes are not morpho-phonologically related to each other. Being historically un-related they are traditionally listed as separate underlying prefixes in a dictionary. For this reason, I chose to list them as separate underlying prefixes and specify the noun roots to which they could attach in the lexicon, mimicking the structure used in the concrete approach.
The use of sub-lexicons makes the construction of the abstract semantics module some- what difficult and inconsistent. The basic function of such a module is unimpaired, but it now has a concrete component: noun roots now must be compartmentalized into sub-lexicons based on their initial phones. As well the complexity of the lexicon is greatly increased and this complexity will hamper any future modifications to that lexicon.
Fortunately, the opaque prefix alternations are conditioned by their environment, so they are not strictly arbitrary. Despite being lexicalised, their alternation is phonologically governed. That is, each prefix only occurs before a regular sub-set of roots (e.g., roots beginning in [ a ] or roots beginning in a consonant). This means that it will be possible to rework the more “concrete” portion of the abstract approach, as described below.
There are two viable ways in which this series of sub-lexicons can be remodeled. The machine can be modified to either (a) over-generate with all abstract prefix allomorphs which can then be constrained using a rule, or to (b) replace the allomorphs with a single abstract prefix that can then be transformed into the appropriate surface form with a rule on the output side and into the appropriate underlying form with a rule on the input side.
The first approach, overgeneration, works by attaching all prefixes to all stems, regard- less of whether or not this generates valid URs. Then, in the rules module, filter rules are
63
added that remove the invalid forms that were generated in the lexicon. In this approach both example (7-a) and example (7-b) would be generated, but a rule would filter out the incorrect form (7-b).
(7) a. UR: (y)o ̨ + ahsi^d +ageh^ Sem: 3fiA+ foot +LOC
b. *UR: (y)e ̨ + ahsi^d +ageh^ Sem: 3fiA+ foot +LOC
This approach is exponential in generation of incorrect forms and would require more rules for each valid surface form. This would mean a greater degree composition and subsequent minimisation. Compile-time would therefore be adversely affected.
The second, more abstract approach would replace all three prefixes with a single ab- stract prefix, possibly denoting the prefix’s semantics as in examples (8-a) and (8-b).
(8) a. Lexical: 3fiA+ ahsi^d +ageh^ Surface: (y)o ̨+ ahsi^d +ageh^
b. Lexical: 3fiA+ o ̨ts +ageh^ Surface: (y)ag+ o ̨ts +ageh^
Spell-out rules (such as in (9)) would then be created. These would change this abstract prefix, as in examples (8-a) and (8-b), into one of the appropriate surface forms.
(9) 3fiA→(y)o ̨/ +[ a ] 3fiA→(y)ag/ +[ o ̨ ]
This approach is deterministic and therefore puts less of a burden on the machine at compile time as it does not generate a vast number of incorrect forms. It is therefore somewhat more preferable despite producing the same final result.
64

Figure 7.5: Abstract Lexicon Structure
Description of the continuation classes of the abstract noun lexicon including subdivisions based on lexicalised prefixes (ga roots, o roots...), subdivision based on stem-initial phones (C roots, V roots, o ̨ roots...) and flag diacritics (Flag1 & Flag2).
65
Flag2
o+ Flag1
Flag2
prefixes
roots null roots
ga roots
a roots
o roots
unpossessive possessive prefixes prefixes
Inalienables
Deverbals
Basics Defectives
C roots V roots a roots Nj roots ... roots
ga roots a roots
o roots
allRoots null roots loanWords
Inalienable Suffixes
Flag1 locativeSuffix
#
# Nouns
NSF
7.1.1.7 Structural Overview of the Lexicons
Having described each part of the lexicon in detail, I will now briefly compare the concrete lexicon to the abstract lexicon. (The latter is diagrammed in full in figure 7.5). It is important to note that while in several cases there are redundant paths that would cause the same word form to be defined multiple times, these do not actually affect the final number of words in the FST. Identical forms are automatically removed by the XFST compiler.
In some respects, the two versions of the FST are identical. For example, both the concrete and the abstract machine process unpossessed basic nouns as in example (10).
(10) Nouns+ Basic+ Unpossessed prefixes+ gaRoots +NSF ø+ ø+ ga+ ^wahsa: +a^#
These nouns are represented identically because the prefix that is used is lexicalized. The major difference between the concrete FST and the abstract FST resides in the lexicon in the processing of the regular affixes.
The abstract model was straightforward to develop; the noun stems needed to be sub- divided into classes depending on the lexicalised unpossessed prefix that they take and rules were used to generate all other prefix allomorphs as in example (12).
(11) a. Nouns+ Basic+ Possessed prefixes+ allRoots+ gaRoots +NSF ø+ ø+ ag+ ø+ ^wahsa: +a^#
b. /ag+^wahsa:+a^/→/age^wahsa:^/
Example (11-a) represents the output of the abstract lexicon module and (11-b) represents the application of the rules module the converts the UR to a valid SR.
In the case of the concrete approach, however, there were two methods that could be used to design the machine: either a fully lexicalised approach could be taken, or a machine could be designed that overgenerates and uses rules to filter out the unnecessary forms.
Part of the basis for the decision to create a concrete and abstract approach was to test if there was a computational cost for the addition of extra rules; it therefore seemed
66
counter-intuitive to design that concrete approach with a large number of additional rules to filter out over-generating forms; such an approach would be essentially analogous to the abstract approach itself.
The fully lexicalised (concrete) approach requires defining specific sub-lexicons for the noun stems. These sub-lexicons contain noun roots grouped by their stem-initial phones (graphs) and the lexicalised unpossessed prefixes. In example (12) the prefix “age-” must be followed by a noun root that begins with ^CV.
(12) Nouns+ Basic+ Unpossessed prefixes+ ^CV roots +NSF ø+ ø+ age+ ^wahsa: +a^#
This approach means that for each type of noun the stems were sub-divided into groups based upon their initial phones and the unpossessed prefix form they take making for a total of 73 lexicons in the concrete approach versus 34 in the abstract approach. The very high number of sub-lexicons results from the need to repeat all sub-lexicons for each stem type for each class of unpossessed prefix, as explained below. A small sub-set of the necessary sub-lexicons are listed in examples (13)-(16) here while the full spectrum is detailed in figure 7.6.
(13) Basic nouns taking /ga-/ when unpossessed but /age-/ when possessed in the first person singular.
(14) Basic nouns taking /ga-/ when unpossessed but /ag-/ when possessed in the first person singular.
(15) Basic nouns taking /o-/ when unpossessed but /age-/ when possessed in the first person singular.
(16) Basic nouns taking /o-/ when unpossessed but /ag-/ when possessed in the first person singular.
Figure 7.6 clearly demonstrates the two types of subdivisions for the basic nouns: lex-
icalised prefixes (3: ga+, o+, a+) and based on initial phone(s) (11 conditioning environ-
67
Figure 7.6: Concrete Approach Basic Noun Lexicons
Division By:
Noun Class Lexicalised Stem-Initial Prefix Phone
Basic Nouns
ga+ nouns
7CV hV
hCV
nV
r
y/w
Elsewhere
i
Multiple subdividing of nouns based on lexicalised prefix and stem-initial phones results in a very high number of sub-lexicons (potentially 33 for possessed basic nouns alone) that can quickly become difficult to manage.
68
i
a
e/ę
o/Nj
7CV hV
hCV
nV
r
y/w
Elsewhere
i
a
e/ę
o/Nj
o+ nouns
a
e/ę
o/Nj
a+ nouns
7CV hV
hCV
nV
r
y/w
Elsewhere
ments). Examples (13) and (14) show two types of words which share the same unpossessed prefix, but different possessed prefixes, and hence need to appear in different sub-lexicons.
The words are first sub-divided into 3 sub-lexicons according to the lexicalised unpos- sessed prefixes they take. Then, the forms in these sub-lexicons were again sub-divided based on initial phone. This makes for a total of 33 possible lexicons for just the basic noun roots. Although there are currently no attested forms for some of the possible sub-lexicons, nouns that appear in these categories could theoretically exist. The manner in which this creates a large number of sub-lexicons is clear.
Now having thoroughly described how the lexicons concatenate morphemes and some possible alternative approaches that were not used in my project, I will go on to discuss the rules module that turns segmented morpheme sequences into surface forms and vice versa.
7.1.2 Rules Module
Unlike in the case of the lexicon module, the rules modules for the two versions contain nearly identical rulesets. The set of rules for the concrete approach is a simple subset of the rules for the abstract approach. Rules for the concrete approach implement almost none of the prefix rules, just stem+suffix alternations and clean-up rules. This made the generation of the rules module for the concrete machine more straightforward.
The variety of vowel changes in Cayuga is rather large, and the juncture of two mor- phemes is rarely just a case of A + B = AB. The rules module of the FST replicates the morpho-phonological processes that occur at morpheme boundaries in Cayuga (see §6.1.1):
Example (17) demonstrates just a few possible vowel sandhi rules that occur in Cayuga morphology.
(17) Example Morpho-phonemic Alternations
a. o + ido ̨hgwa + a^ o d o ̨ h g w a ^
3NP flame NSF flame
b. o + adeshe ̨ + a^
o d e s h e ̨ ^
69
3NP cocoon NSF cocoon c. ga + itsga: + a^
ge ̨tsga:^
3NA mattress NSF mattress
We see that o + i/a at a prefix/stem boundary gives o (see examples (17-a) and (17-b)). The data in (17-c) also show that a + i at a prefix/stem boundary produces e ̨ and that V + a^ produces V^ at the stem/NSF boundary.
7.1.2.1 Rules Module Components
The rules module consists of three component parts: (a) a module that removes deleting prefix segments (§4.2.2), (b) the actual morpho-phonological rules and (c) a set of “clean-up” rules. The entire set of rules contained in the rules module are contained in appendix C. Each of these rule components were only separated for clarity. Some grammars have separate rules components for nouns and for verbs.5
In XFST, rules are generally specified only in terms of phones and morpheme boundaries. Any symbols other than letters, vowel length markers, or morpheme boundary markers can block the application of rules. For this reason, the first module to apply removes any word- initial deleting prefix segments (denoted by parentheses) as in the (y) in (y)o+ (3znsP). Then for deleting segments that are not word-initial, it removes the parentheses surrounding the segment.6
Table 7.2 gives examples of word-initial segment deletions.
In table 7.2 we see the application of two rules. Rule ‘Delete Opt’ deletes any deleting segments that are word-initial. The second rule, ‘Delete Parentheses’ then removes any other parenthesis that remain in the words. These two rules together remove all paren- theses while keeping non-word-initial prefix segments and allowing further rules to apply unobstructed.
5In this case, however, all rules apply to all word forms, so there is no need to separate the separate modules.
6The symbols ‘(’ and ‘)’ were not used while formulating the morpho-phonological rules; therefore they could block rule application. A rule stating that /e/→Ø/u+   would not apply to du+(e)tni+... because the parentheses are not stated in rule.
70

Table 7.2: Two Rules for Optional Prefix Segment Removal
The second module applies the remaining morpho-phonological rules, including vowel hierarchy deletions, vowel coalescence processes, epentheses and so forth. Table 7.3 shows the application of a subset of rules to an abstract and a concrete underlying form.
Table 7.3: Morpho-phonological Rule Application
Rule
UR: (y)o+^nho ̨hs+a^
UR: de+(y)o+^nho ̨hs+age:
Delete Opt
o+ ^nho ̨hs+a^
de+(y)o+^nho ̨ hs+age:
Delete Parentheses
o+ ^nho ̨hs+a^
de+yo+^nho ̨ hs+age:
Output
o+ ^nho ̨hs+a^
de+yo+^nho ̨ hs+age:
Concrete
Abstract
UR:
(h)j+ahyagwiy+ageh^
(h)sni+ahyagwiy+ageh^
sn→j/ i+a
n/a
(h)ji+ahyagwiy
Vowel Hierarchy
n/a
(h)j+ahyagwiy
Output:
(h)j+ahyagwiy+ageh
(h)ji+ahyagwiy
This module contains 23 rules in the abstract version and 11 in the concrete approach. The concrete approach only contains basic rules such as vowel hierarchy deletion rules; vowel lengthening rules and so forth. It does not specify most forms of coalescence; voicing or devoicing rules because, as can be seen in table 7.3, these rules are already encoded in the UR.
The third module applies clean-up processes such as the deletion of multiple identical vowels at morpheme boundaries, the removal of morpheme boundaries and the removal of abstract consonants. Some roots contain abstract phones ([C]) which block the application of some coalescence and vowel hierarchy rules. Example (18) shows the actual (18-a) UR and SR of a form with an abstract C versus the expected (18-a) UR and SR.
(18) a. UR: ga+ Cisra +a^ SR: ga- isr -a^
b. UR: ga+ Cisra +a^ SR: *ge ̨- sr -a^
71
The abstract C in (18-a) blocks the application of the vowel coalescence rule that turns / a + i / into [ e ̨ ]. In (18-b) since there is no abstract C to block the process, the vowels incorrectly coalesce into [ e ̨ ].
7.1.3 Semantics Modules
I created a simple semantics modules that glosses the stems, prefixes and suffixes with a very basic English gloss. The semantics module was generated by slightly modifying the lexicon module such that the transductions between a morpheme and its semantics were directly encoded into a lexc file. Essentially the semantics module is an enhanced lexicon that contains not only morphemes and how they can connect, but also the semantics for each morpheme.
Table 7.4 compares a regular lexicon used for segmentation (left) with a modified lexicon used for generation for semantics (right).
Table 7.4: lexc samples for semantics module and lexicon module
Regular Lexicon
LEXICON inalienablePrefixes
(y)agwa+ inalienableStems ;
LEXICON inalienableStems
a h o ̨ h d N S F ;
LEXICON NSF
+a^ #;
Semantics Lexicon
LEXICON inalienablePrefixes
1epA+ : (y)agwa+ inalienableStems ;
LEXICON inalienableStems
on your ears : aho ̨hd NSF ;
LEXICON NSF
+NSF : +a^ # ;
As can be seen in the right-hand columnn of table 7.4, the basic semantic definition of a form is given to its left separated by a colon (for example, +NSF : +a^). An alternative method of implementing the semantics module would have been a list of transformation rules that would contain the semantics for all stems, prefixes and suffixes. Either method would produce the same results; however, a major drawback of the method I applied was that when the basic lexicon was changed, the semantic lexicon had to be changed to match. A rule-based approach (in which semantic glosses are added by rules) would not need such changes.
72
It is also important to note that I could not just use the semantics lexicon in place of the regular lexicon because then the intermediate output (the segmented morpheme) would not be generated, just the semantics.
7.1.4 Interface
A user interface was not part of the original set of specifications, but I decided that it was more satisfying to create a basic one. I designed a simple web based interface for the program using Python7 and PHP.8 This interface allows users to enter words into a simple form field and then receive the segmented form of the word, the semantics and the set of related prefixes. Currently this interface uses the concrete version of the FST to give users concrete underlying forms. Additionally the interface gives a brief explanation of the prefix semantics.
Figure 7.7 outlines the entire process in the form of a flow chart explicitly stating the intermediate tasks assigned to the python script. At point (A), the user is presented with a form field in which to input a word. This word is passed to the Python script which renders the word to lower-case9 and ensures that only a single word has been entered (B).
This single lowercase word is then passed by the script to point (C) the segmenting FST (the composition of the lexicon and rules components as described above). The output of the segmenting FST is returned to the script (D) which outputs the result to the user and also passes the information to (E): the semantics FST.
The semantics FST in turn returns its result to the script (F). The script then outputs this result, and then separates the prefix semantics to be passed back to the semantics FST in reverse (G). The result of (G) is then passed to the script (H) which outputs that result to the user.
Table 7.5 describes the information flow through the interface.
7Python is a standard procedural programming language. For more information please visit http://www.python.org
8PHP is a standard procedural programming language. For more information please visit http://www.php.net. The PHP scripting performs no task other than to pass the user-input to the python script for processing.
9The FST has been designed in lower-case, it can however, be modified to be case insensitive. 73

A: B:
C:
D:
E:
F:
G:
H:
Figure 7.7: Complete Program Flow Chart
User Input / Web Form
Python Script: Word tokenization & capitalisation regularization
Noun Lexicon
Prefix Joiner Removal
Morpho- Phonological Rules
Clean -up Rules
Python Script: Output result & forward it to:
Semantics FST
Python Script: Output result & forward prefix to:
Semantics FST: Reverse
Python Script: Output result
Flow chart demonstrating how user input is passed through to each module of the machine using the python script as an intermediary.
74
Table 7.5: Stages of Output from User Interface
a
User Input to Segmentation
oho ̨ na^da^
b
Segmentation Output
(y)o+ho ̨ na^d+a^
c
Input to Semantics
(y)o+ho ̨ na^d+a^
d
Semantics Output
3znsP+potato+NSF
e
Input to Reverse Semantics
3znsP+
f
Reverse Semantics Output
List of prefix allomorphs with conditioning environments, see example (19)
The interface actually runs three FSTs in order to produce the results. First the word entered by the user is run through the combined lexicon module and the rules module (table 7.5 a). This FST outputs the segmented form (table 7.5 b) or an error if the word does not exist in the machine.
The output from that FST is then run through the semantics module to generate the semantics for the form (table 7.5 c and d).
Finally, the prefix from the output of the semantics module is run through the semantics module again, this time in reverse (table 7.5 e and f and example (19)), exploiting the bidirectionality of FSTs. At both stages the output is saved and displayed to the user.
The output of the second pass through the semantics (Table 7.5 f) module is formatted as such:
(19) Prefixes meaning 3zndpA:
•ge ̨n+inalienable noun root beginning with +a
•gad+inalienable noun root beginning with +i •gadi+inalienable noun root beginning with +^C •...
This interface was quite straight-forward to design, demonstrating that XFST is worthwhile for developing usable applications.
75
7.2 Addressing the requirements
There were several requirements that each machine should meet in order to determine which approach was most useful. The machines should (a) provide an adequate arena for testing the morpho-phonological rules of Cayuga; (b) properly generate and segment all and only Cayuga nouns; (c) help investigate the usefulness of the FS framework for polysynthetic languages; (d) provide ideal dictionary access; and (e) be efficient and elegant. Each of these requirements is discussed below.
7.2.1 Testing of Rules
Determination of morpho-phonological rules and their orderings can often be difficult for a variety of reasons. Applying rules to a large number of forms can be very time consuming and difficult if done manually. Finite-state machines allow the user to run large corpora of data against a given ruleset very quickly, and furthermore allow the changing and updating of those rules with ease.
I compiled a set of test-case files included in Appendix C in order to ensure that the rule-orderings were producing the appropriate results for all noun types. This required firstly determining the set of conditioning environments (e.g., Table 7.7) and then selecting a set of words exemplifying each underlying prefix form with each stem type.
Two lists were created, one containing the valid underlying forms and one containing valid surface forms of those same words for comparison with the machine’s output. A second set of underlying forms had to be generated for the concrete approach since the prefix alternants are lexicalised.
After running the list of underlying forms through the machine I compared its output automatically with my list of correct surface forms. The automatic comparison listed forms that should not have been output as well as forms that should have been, for example, see table 7.6 (b):
76
Table 7.6: Rule-testing Samples
Input
Output
Expected Output
Result
(a)
( y a ) g o d i + h o ̨ n a ^ d + a ^
g o d i h o ̨ n a ^ d a ^
g o d i h o ̨ n a ^ d a ^
OK
(b)
(w)ag+hsgwae ̨ ^d+a^
aksgwae ̨ ^da^
agehsgwae ̨ ^da^
The SR “aksgwae ̨^da^” was produced which is not a valid noun of type X.
The SR “agehsgwae ̨^da^” was not produced.
Finally, I ran the same process in “reverse” to check that the bidirectionality of the machine was intact: surface forms gave the proper underlying forms and vice versa. As described in the following section, some errors in the posited rules were revealed.
7.2.1.1 Errors Discovered
One problem was discovered with the rule formulations: that the 1sP basic noun prefix was not always generating the correct allomorph. The 1sP prefix was listed as having the following C-stem allomorphs:
Table 7.7: Basic Nouns Patient Prefix Allomorphs - C-stems
In the course of testing it became clear that this description was not fully adequate. The current description describes nouns beginning in [ ^CC ] as a single environment. However, as can be seen from example (20), not all [ ^CC ] stems in fact pattern identically.
Gloss
Prefix UR
^CV
hV
hCV
nV
r
y/w
Elsewhere
1sP
(w)ag+
ag-
ak-*
age-
ak-
ag-
ag-
age-
(20) a. age+ ^drehd +a^ 1sP car; truck; vehicle NSF
My car(s)
b. *age+ ^nho ̨hs +a^
77
c. ak+ ^nho ̨hs +a^ 1sP egg NSF
my egg(s)
According to the current description of morph-phonological alternations, the stems -^drehd- and -^nho ̨hs- should both pattern identically and take the same 1sP allomorph age+. How- ever, as can be seen in (20-b) and (20-c), this is not the proper allomorph for the stem -^nho ̨hs-. This demonstrates that the machine description, by systematically applying it- self to all nouns, can detect inconsistencies in rule formulation/conditioning environment description.10
7.2.2 Generation & Segmentation
The above method for testing covered all regular alternation types. If there are any unrecog- nized forms still in the machine they are then a fault of either an error in the initial data or caused by human error in the creation of the lexicon file. The machines each generate and segment over 4000 nouns with almost 100% coverage, with the only errors resulting from the occasional mis-analysis of [e]-epenthesis described in the preceding section.
7.2.3 FS Applicability to Polysynthetic Languages
In general, it does not seem that any inordinate amount of complexity arises as a result of the large number of phonological alternation rules or as a result of (a limited number of) long-distance dependancies. In fact the two machines that I created were each quite small in final size. However, because this machine only implements a single long-distance dependancy it is not clear whether or not a fully implemented language FST would encounter difficulties arising from that issue.
While there were no complexity issues in the development of either machine, there may be some issues that arise in future work due almost solely to the morphological complexity
10There are two ways to approach the modelling of [e]-epenthesis: (a) a linear description (ø→[ e ]/C   CC), or (b) a non-linear description (apply the rule in (a) only in the case where some of the Cs would remain unsyllabified otherwise). I have assumed a linear approach as a non-linear approach would require either a complex environment that accounts for the differing syllabifications of continuants and non-continuants, or a syllabification module. It is beyond the scope of this paper to model the complex environments of [e]-epenthesis.
78

found in First Nations languages. It seems likely that highly synthetic11 languages, such as those in the Athapaskan family, may require special care for the designing of morphological segmenters. There will be not only many prefixes but also many more cases of long-distance dependancies and morpho-phonological variation will be much higher.
7.2.4 Ideal Dictionary Access
The machine produces a basic semantic gloss for all valid noun forms and has a straightfor- ward interface. The user need only type a word into a text box to retrieve its morphological and semantic information. The output of the machine is very accessible.
A potential drawback of the current version of the machine is that it is somewhat restricted by its use of an intermediate (non-standard) orthography lacking accent-related diacritics (§4.1). In its current version therefore it does not meet all the criteria of an accessible dictionary. This problem, however, can be easily resolved by the introduction of additional transducers to take input in either of the Henry or linguistic orthographies.
7.2.5 Efficiency, Elegance and Usability - Abstract vs. Concrete Versions
Both the abstract and the concrete versions are almost identical in the terms of computational efficiency initially laid out in §6.1.1.2. The two machines have statistically insignificant differences in the number of states, transitions and in file size. As can be seen in table 7.8 the abstract machine is slightly larger (by 0.4Kb), has 6 additional states (out of 1054), and 20 additional transitions (out of 1943). The comparative evaluation of the two machines, therefore, must rest on other criteria, as discussed below.
Table 7.8: Sizes of Final Segmenter FSTs
11Synthetic languages ”typically contain more than one morpheme”. In a highly synthetic language the words would typically contain more than 3 or 4 morphemes, as in, for example, Totonac. (Crystal, 2003)
79
File Size (Kb)
States
Transitions
Paths
Rules
Roots
Prefixes
Abstract
40.5
1054
1943
4009
28
413
45
Concrete
40.1
1048
1923
4006
19
413
149

In terms of processing speeds, the abstract and concrete versions are, again, nearly identical. I timed 5 sets of 100 iterations of segmentation and combination of morphemes using the test cases described above (713 words per iteration for the abstract machine and 712 for the concrete machine). As can be seen from the data in tables 7.9 and 7.10, the speed of running the combination of an underlying form to produce a surface form was very slightly slower than segmenting a surface form into an underlying form. However, both machines show little difference in speed and on average segment single words in about 0.0002145s and combine single words in about 0.2315s.
Table 7.9: Time (in seconds) for 100 iterations of morpheme combination of the test corpora
Table 7.10: Time (in seconds) for 100 iterations of segmentation of the test corpora
The two machines contain both internal and external ambiguity (non-determinism). The external ambiguity was necessary because some lexical items have more than one potential meaning and some surface prefixes can be analysed as one of 2 or more underlying prefixes. This non-determinism does not seem to impede the performance of the final machine, most likely as it occurs early on in the words processing time is only marginally affected and as there are only a small number of cases machine size is not greatly affected either.
Initially, the concrete approach shows some distinct advantages over the abstract ap- proach. It is easier to have it generate useful output for the users. As well, there are some possessive prefixes that need to be listed lexically regardless of the approach. This some- what mitigates the argument of linguistic elegance as an advantage of the abstract approach. Since some continuation classes are necessary regardless, and the concrete machine uses them throughout, the concrete approach is more consistent. (See §4.2.3, §6.1.1.1 and §7.1.1 for a further discussion of the opaque prefixes).
80
Machine
Run 1
Run 2
Run 3
Run 4
Run 5
Average
Average/word
Abstract
15.325
15.626
15.203
15.102
15.110
15.273
0.0214
Concrete
15.870
15.329
15.749
14.979
14.784
15.342
0.0215
Machine
Run 1
Run 2
Run 3
Run 4
Run 5
Average
Average/word
Abstract
16.570
16.317
16.504
16.528
17.319
16.648
0.0233
Concrete
16.633
16.245
16.254
16.284
16.325
16.348
0.0230

The abstract approach has more composition operations than the concrete approach and to expand the machine to include verbs and other word-forms would certainly require even more rules to be added (resulting in more composition operations). However, there are unlikely to be many more rules that need to be added to account for other word-forms and several of those rules would still need to be applied to the concrete machine, so it seems unlikely that there will be a substantial growth in the size of the abstract machine relative to the concrete machine with the addition of further roots and prefixes. So, in terms of future machine growth, the two approaches seem equal.
The distinct advantage to the abstract approach that makes it the best choice for future work, however, is that of elegance (not just linguistic elegance, but equally importantly, com- putational elegance). The abstract approach is significantly simpler to design, implement, maintain and update than the concrete approach, as described below.
When a bug was found in the abstract approach, either a single form in the lexicon needed to be edited, or a small number of rules needed to be modified or rearranged. In the case of the concrete approach, however, all major bugs were in the lexicon; if there was an initial design error, then going back to fix it was significantly more difficult. In other words, the concrete approach was significantly less computationally elegant than the abstract approach. For example, suppose it had been incorrectly assumed that /(e)dwa+o ̨.../ become /(e)dw+o ̨.../. To fix this problem in the concrete approach, all inalienable roots beginning with [ o ̨ ] would have to be relocated to new sub-lexicons. Since the roots beginning with [ o ̨ ] are distributed across multiple sub-lexicons, and it is necessary to keep their other groupings intact, this would be a lengthy endeavour. To fix this problem in the abstract approach, however, one would need only to modify a single rule to effect the change.
Finally, while the abstract machine in its current form is slightly less usable than the concrete machine, it can be modified to provide more user-friendly output. Currently, the abstract machine cannot provide a list of related prefix forms for an underlying prefix, while the concrete machine can. Such a list is of great use to speakers who might have difficulty identifying related prefix allomorphs. This problem can easily be solved at a later date by modifying the semantics module and combining it with a modified version of the rules module.
The abstract approach, then, is more computationally and linguistically elegant, mean- ing it will be easier to upgrade and modify in the future. Any drawbacks that it may have
81
compared to the concrete approach can be satisfied by the creation of a number of further modules, at an apparently low cost in terms of computational efficiency.
82
8.1 Future Work
Chapter 8
Conclusion
There is a wide array of uses to which my application can be put. The innate modularity of the FS framework means that my work can be easily extended to include enhancements such as orthographic conversion between the three orthographies or recognition of more complex prefix combinations and more word types.
Dictionaries can be constructed that will be more accessible to their users. The user will no longer need to have a complex grasp of the morphology and morpho-phonology of their language, simply to find the definition of a word (§5.1).
This machine could be expanded to include all Cayuga word-forms. Almost all of the rules that are necessary for analyzing verbal forms are independently needed to model nominal forms, so very few new rules would need to be added. In principle this approach should work for verbs, but it remains to be fully tested. It would also be useful to implement a more rigorous semantics module that could more fully implement dictionary-like semantic readings.
Furthermore the simple parser that I have described can be enhanced by the addition of a variety of other modules such as spell-checkers, syllabifiers and the ability to use multiple orthographies (something that is of particular use in the context of First Nations languages which typically make use of multiple orthographies). A spell-checking dictionary that could guess what a user meant if they mis-typed a word would be ideal for many First Nations languages where the spelling system and the morphology are often complex and confusing to speakers.
83
8.2 Summary Conclusions
In this document I have detailed my implementation of a morphological parser for Cayuga using the finite-state framework. This parser demonstrates that the finite-state framework can generally handle problems typical of polysynthetic languages such as obligatory prefixing and long-distance dependancies and that the finite-state framework is a versatile tool for NLP applications.
Much future work will need to be done to fully establish the finite-state framework’s use- fulness for full-scale implementations of morphologically complex languages but my machine as a proof-of-concept is the first step towards such a full-scale implementation.
84
BIBLIOGRAPHY
Alegria, In ̃aki, Maxux Aranzabe, Nerea Ezeiza, Aitzol Ezeiza, and Ruben Urizar. 2002. Using Finite State Technology in Natural Language Processing of Basque. In Implementation and Application of Automata: 6th International Conference in the Lecture Notes in Computer Science Series, ed. by B.W. Watson and D. Wood, volume 2494, 1–11. Berlin, Heidelberg: Springer-Verlag GmbH.
Beesley, R. Kenneth, and Lauri Karttunen. 2000. Finite-State non-concatenative morpho- tactics. In Special Interest Group in Computational Phonetics, volume (2000), 1–12.
Beesley, R. Kenneth., and Lauri Karttunen. 2003. Finite State Morphology. Stanford, CA.: Center for the Study of Language and Information Publications.
Chafe, Wallace L. 1967. Seneca Morphology and Dictionary. Number 4 in Smithsonian Con- tributions to Anthropology. Washington D.C.: Smithsonian Press.
Chomsky, Noam. 1956. Three Models for the Description of Language. IRE Transactions on Information Theory 2: 113–124.
Crystal, David. 2003. A Dictionary of Linguistics and Phonetics. Malden, MA: Blackwell Publishing, 5th edition.
Dyck, Carrie. 2006. Speakers prefer concrete prefixes. Personal Communication.
Foster, Michael. 1986. Updating the terminology of tense, mood, and aspect in Northern
Iroquoian descriptions. International Journal of American Linguistics 52: 65–72.
——, Karin Michelson, and Hanni Woodbury. 1991. Base and affix dictionary for Iroquoian
languages. N.Y.: Ms. Snyder.
Frank, Robert, and Giorgio Satta. 1998. Optimality theory and the generative complexity
of constraint violability. Computational Linguistics 24.2: 307–315.
Froman, Frances, Alfred Keye, Lottie Keye, and Carrie Dyck. 2002. English-Cayuga /
Cayuga-English Dictionary. Toronto: University of Toronto Press.
Hopkins, Alice W. 1989. Theoretical Perspectives on Native American Linguistics, chapter
Vowel Doubling in Mohawk, 445–459. Albany: State University of New York press. Kaplan, Ronald M., and Martin Kay. 1994. Regular models of phonological rule systems.
Computational Linguistics 20.3: 331–378.
Karttunen, Lauri. 2001. Applications of Finite-State Transducers in Natural Language Process- ing. In Implementation and Application of Automata : 5th International Conference, ed. by S. Yu and A. Paun, volume 2088, 33–46, Berlin, Heidelberg. CIAA, Springer-Verlag GmbH.
Kiraz, George Anton, and Bernd Mo ̈bius. 1998. Multilingual syllabification using weighted Finite-State Transducers. In Proceedings of the Third ESCA Workshop on Speech Synthesis, Australia. Jenolan Caves.
85
Koskenniemi, Kimmo. 1997. Representations and Finite-State components in Natural Language. In Finite-State Language Processing, ed. by Emmanuel Roche and Yves Schabes, 99–110. Cambridge: MIT Press.
——, and Kenneth Ward Church. 1988. Complexity, Two-Level Morphology and Finnish. In COLING, 335–340.
MacKenzie, Marguerite, and Bill Jancewicz (eds.) 1994. Naskapi Lexicon. Kawawachika- mach: Naskapi Development Corporation.
Michelson, Karin, and Mercy Doxtator. 2002. Oneida-English / English-Oneida Dictionary. Toronto: University of Toronto Press.
Mithun, Marianne. 1979. The Consciousness of Levels of Phonological Structure. International Journal of American Linguistics 45.4: 343–348.
Mohri, Mehryar. 1997. Finite-State Transducers in language and speech processing. In Associ- ation for Computational Linguists, volume 23, 269–311.
Nederhof, Mark-Jan. 1996. Introduction to Finite-State techniques. Lecture notes. Oflazer, Kemal. 1994. Two-level description of Turkish morphology. Literary and Linguistic
Computing 9.2.
Reichel, Uwe, and Karl Weilhammer. 2004. Automated Morphological Segmentation and
Evaluation. Lisbon, Portugal: n/a.
Roche, Emmanuel, and Yves Schabes. 1997. Finite-State Language Processing. Cambridge,
Mass.: MIT Press.
Sproat, Richard W. 1992. Morphology and Computation. Cambridge, Mass.: MIT Press.
Tinsley, John. Accessed: 2007 02 13. Spanish Morphological Analyser/Generator. http://www.redbrick.dcu.ie/ tinsley/ .
Tzoukerman, Evelyn, and Mark Y. Liberman. 1990. A finite-state morphological proces- sor for Spanish. In COLING-90: Papers Presented to the 13th International Conference of Computational Linguistics, ed. by Hans Karlgren, 277–282, Helsinki. Helsingiensis Universitas.
Vilares, M., J. Otero, F.M. Barcala, and J. Dominguez. 2004. Automatic Spelling Cor- rection in Galician. In Lecture Notes in Artificial Intelligence, number 3230 in Espan ̃a for Natural Language Processing 2004, 45–57. Berlin: Springer-Verlag.
Wikipedia. Accessed: 2006 03 24. Finite State Machines. http://en.wikipedia.org/wiki/Finite state machine .
Young, Robert W., and William Morgan. 1987. The Navajo Language, A Grammar and Colloquial Dictionary. Albuquerque: University of New Mexico Press, revised edition.
86

Appendix A
Morpho-phonological and Clean-up rules
This section contains the morpho-phonological rules and the clean-up rules as described in §7.1.2.1. The optional prefix segment rules were left out as they are relatively straightforward.
Rules prefixed by * appear only in the abstract version of the program. Other rules appear in both versions1. Finally rules prefix by a † implement minor spelling variations characteristic of the Henry Orthography.
 h(C)V 
1. *†/g/→[k]/ + ^CV
nV 
2. †/h/→ø/s+ V
3. /h,^/→ø/k   +C
􏰀 s 􏰁  C o  4. *ø → [e] / ^V
g CC
(Co consistsof[k,g,t,d,h,s,j])
5. Some prefixes have additional initial vowels that are only pronounced when preceded by another phone, these are deleted as necessary here, and actually consists of 3 separate rules.
6. /a+i/→[e ̨]
7. */o/→[aw]/   +􏰀 e ̨ 􏰁
 V : + 
8. /V/ → ø /  V + V 
 V V + 
(The final vowel in a tri-moraic vowel sequence at a morpheme boundary is deleted)
9. */ni/→[y]/ +a
10. */adi/ → [e ̨n] / + V-i
(V-i is the set of all vowels except [i])
1In some cases I have have combined rules together for clarity where they are actually stated as separate in the rules module.
87

11.
1 2 . 1 3 . 14. 15. 16.
17.
18. 19. 20. 21. 22.
23.
24.
*/di/ → [n] /   + V-i
Rules (12 - 16) represent vowel hierarchy deletions. The hierarchy from strongest to weakest
i s [ o ̨ , o , e ̨ , e , a , i ]
/ V / → ø / 􏰀 + o ̨ 􏰁
o ̨ +
/ o , e ̨ , e , a , i / → ø / 􏰀 + o 􏰁
o+ /e ̨,e,a,i/→ø/􏰀 +e ̨ 􏰁
e ̨ + /e,a,i/→ø/􏰀 +e 􏰁
e+ /a, i/ → ø/ 􏰀 + a 􏰁
a+
 +o
*/w/→[y]/ o+   +o ̨
o ̨+ 2 */k,t,d/→[g]/ y+
*/sy/ → [j] /   + /V1+V1/ → [V1:] /r/ → ø / V V
/CA/ → ø
Some roots require abstract consonants that block morpho-phonological processes such as the coalescence rule in (6). These abstract consonants are deleted here.
/V1/→ø/V1(:)   +
Some rules leave behind groups of identical vowels at morpheme boundaries such as ‘...a:+a...’ or ‘o ̨+o ̨...’. All such sequences are cleaned up here.
/+/ → ø
This rule deletes the morpheme boundary marker.
2This rule implements a difference between the lower Cayuga dialect dealt with in this study, and the upper Cayuga dialect.
88
Appendix B
Code
This appendix contains the XFST Lexc code used to generate the abstract and concrete lexicons. This code specifies the valid morpheme combinations, but does not apply any rules. The design of this code is outlined in §7.1.1. This code is written in Lexc as described in §6.3.1.
There are four sections to this appendix. The broad division is between the abstract and concrete version and within those sections is the code for both the semantic lexicon and the regular lexicon.
B.1 Abstract Version B.1.1 Abstract Lexicon
Multichar_Symbols @U.INALIEN.POSS@ @U.INALIEN.UNPOSS@
LEXICON
LEXICON
LEXICON sgwa:gwao ̨do ̨^ dago:s da:gu:s dakshae^dohs so:wa:s twe ̨:twe ̨:t
h o ̨ : g a : k
d o g e ̨ : t gwihsgwihs
ROOT
allNouns ;
allNouns inalienableNouns ; basicNouns ; deverbalNouns ; defectiveNouns ;
defectiveNouns
# ;
# ;
# ; # ;
# ; # ;
# ; # ;
# ;
89
g w a ^ y o ̨ ^
s o h o ̨ : t gyo:gyo:^ jogrihs gwido^gwido^ di^di:^ jikjiye:^ ga^ga:^
hihi: gwiye ̨^gwiye ̨^ dihsdihs ji^nho ̨we ̨:se: duwisduwi:^ sa^sa^
g w e ̨ : d i h s
g w e : s e ̨ ^ tsahgo:wah jihsgogo^ gwaoh johwe ̨^sdaga^ gwe ̨^gohnye ̨^ hnyagwai^
g o ̨ : d e h tgwiyo:ge ̨^ jinho ̨hgwahe ̨h ji^no ̨hdo:ya^ ji^dana:we ̨: jino ̨hsano ̨h jihsda: ji^ao:ye ̨: jino ̨hyahae: degriya^go ̨^ jihnyo^ge ̨^ hehshai: sgwa^ahda^
t e h t o ̨ ^
j o ̨ ^ d a g a ^
j i n o : w e ̨ :
t e a : C o ̨ t sa:no:^
d r e ̨ : n a : dre:na: joni:tsgro ̨:t k d a g o ̨ ^ do:dihs
# ;
# ; # ;
# ; # ;
# ;
# ;
# ; # ;
# ;
# ;
# ; # ;
# ;
# ;
# ; # ;
# ;
# ;
# ; # ;
# ;
# ;
# ; # ;
# ; # ;
# ;
# ;
# ; # ;
# ; # ;
# ; # ;
# ; # ;
# ; # ;
# ; # ; # ;
# ; # ;
# ;
90
s g w a : y e ̨ h gwiyo:ge ̨^ jo ̨:nyo ̨:^ no ̨hsodai:yo ̨: gwa^da: jide ̨:^e ̨h jo ̨^dae:ya:^ ji^dro ̨:we ̨: onohotsge ̨^e ̨^ teo:ji^ tsa^ge ̨:da^ yahge ̨hda^ tsinyohgwa:k g i h e ̨ : k
n a w e ̨ ^ d a ^ jihso ̨:dahk otahyo ̨:ni: tahyo ̨:ni: jihsge ̨: ji^o: grahe:t
LEXICON
o+
a+
ga+
LEXICON e ̨dehsr e ̨^nyotr e ̨^nhotr
LEXICON idehsra ye ̨nawahsr ya^dowehdahsr ya^dagenhahsr atgwe ̨nya^tr atgo ̨nya^tr tgi^tr noho ̨kdehsr nhehsr
# ; # ;
# ; # ;
# ; # ;
# ; # ;
# ;
# ;
# ; # ;
# ; # ;
# ;
# ;
# ;
# ;
#;
# ;
#;
deverbalNouns deverbalORoots ; deverbalARoots ;
deverbalGaRoots ; deverbalNullRoots ;
       deverbalNullRoots
             NSF ;
NSF ; NSF ;
       deverbalGaRoots
              NSF ;
NSF ; NSF ;
NSF ;
NSF ;
NSF ; NSF ;
NSF ; NSF ;
91
na^jowi^tr risr rihwiyohsde ̨hsr rihwane^aksra riho^de ̨hsr hyado ̨hsr hshahsde ̨hsr Caho ̨hsr
LEXICON
y e ̨ h s r atgahno ̨nihsr nrahdo ̨dahsr no ̨nhe^dr niga:he ̨hsr hshahsde ̨hsr ado ̨tgado ̨hsr ado ̨tgadehsr ^drohsr i^daihe ̨hdr
LEXICON atsho^kdo ̨hsr atna^tsotr atna^gwihdr atgahnyehtr nahaotr agya^dawi^tr adrihwagyao ̨hsr adra^wihsd ado ̨nhehsr adi^gro ̨hsra ade ̨na^tr adekwahahsra adao^tra ahdahdi^tr
LEXICON
@U.INALIEN.POSS@
@U.INALIEN.UNPOSS@o+
 end with the NSF
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
   deverbalORoots
 N S F ;
NSF ; NSF ;
NSF ; NSF ;
NSF ;
NSF ;
NSF ;
NSF ; NSF ;
   deverbalARoots
 NSF ;
NSF ; NSF ;
NSF ;
NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ;
NSF ;
NSF ;
inalienableNouns
inalienablePrefixes ;
inalienableStems ; ! Unpossessed inalienables
92
LEXICON
g+
(e)tni+
(e)kni+
(y)akni+
(e)dwa+
(y)agwa+
(
ha+ (y) ga+ (y)+ w+ hadi+ gao ̨+ gae+ ga:g+ gadi+
LEXICON
h)s+
h)sni+
h)swa+
eh)s+
eh)sni+
eh)swa+
LEXICON o ̨+
e ̨+
ag+
e+ LEXICON
LEXICON
inalienablePrefixes inalienableStems ; ! 1S
inalienableStems ; ! 1ID are interchangeable)
inalienableStems ; ! 1ID are interchangeable)
inalienableStems ; ! 1ED inalienableStems ; ! 1IPL
inalienableStems ; ! 1EPL inalienablePrefixes2 ;
inalienableStems ; ! 3MS inalienable3FIPrefixes ; inalienableICStems ; ! 3N
inalienableOo ̨Stems ; ! 3N inalienableNotIOo ̨Stems ; ! 3N
inalienableStems ; ! 3MPL inalienableAStems ; ! 3FIPL inalienableICStems ; ! 3FIPL
(This and the following (This and the preceding
(For I-stems and C-stems) (For o-stems)
       (For other stems)
(For a-stems)
(For i-stems and C-Stems)
     (For other stems)
inalienableNotAIStems ; ! inalienableStems ; ! 3NPL
3FIPL
inalienablePrefixes2 inalienableVStems ; !2S
inalienableVStems ; ! 2D
inalienableVStems ; ! 2P inalienableCStems ; ! 2S
inalienableCStems ; ! 2D inalienableCStems ; ! 2P
inalienable3FIPrefixes inalienableAStems ; ! 3FI inalienableIStems ; ! 3FI
inalienableNotAIStems ; ! 3FI
(For a-stems)
(For i-stems)
  inalienableCStems
inalienableICStems
; ! (For C-stems)
inalienableIStems
inalienableCStems
; ! 3FIPL (For i-stems)
;  ! 3FIPL (For C-stems)
inalienableVStems inalienableAStems ; inalienableIStems ;
93
(For other V-stems)
! ! !
LEXICON
LEXICON !
!
!
LEXICON
! !
LEXICON !
LEXICON aho ̨hd ahsi^d ahyagwiy
LEXICON ihn
!LEXICON
!LEXICON
!LEXICON
inalienableEStems ; inalienablee ̨Stems ; inalienableOStems ;
inalienableo ̨Stems ;
inalienableStems inalienableAStems ; inalienableIStems ; inalienableNotAIStems ; inalienableCStems ;
inalienableNotAIStems inalienableEStems ; inalienablee ̨Stems ; inalienableOStems ;
inalienableo ̨Stems ;
inalienableNotIOo ̨Stems inalienableAStems ;
inalienableEStems ; inalienablee ̨Stems ;
inalienableOo ̨Stems inalienableOStems ;
inalienableo ̨Stems ;
inalienableAStems inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableIStems inalienableSuffix ;
inalienableEStems inalienablee ̨Stems inalienableOStems
94
LEXICON o ̨ts
LEXICON we ̨^nahs we ̨^nohs gah gahehd gahgwaohs go ̨hs go ̨hsto ̨^ go ̨^d
ge ̨^sd ha^d
han hdega: hetga^ hna^ts hne ̨s hnya^s hnye ̨dahs hsgwa: hsin hso ̨hga: hsna^d hsohd hsohgw hswa^n hswe^n hyohs ^nho ̨hsga: ^nyo ̨hs ^yohgw ^ahs kse^d no ̨^a: no ̨^gw no ̨nhe^dr no^j
nr ne ̨tsh nye ̨d
inalienableo ̨Stems inalienableSuffix ;
inalienableCStems inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ;
95
rad ragwahd we ̨^yo ̨hga: jaoho^gw ji^ohd ji^ehd jisgo^gw ya^d ya^ga: yo^d yo^gw yo^ts yu^ts
LEXICON
@U.INALIEN.POSS@
@U.INALIEN.UNPOSS@
LEXICON +a^geh
LEXICON
LEXICON
ga+
o+
a+
LEXICON (w)ag+ (y)o ̨kni+ (y)o ̨gwa+ sa+ sni+ swa+ ho+ (ya)go+ (y)o+ hodi+
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ; inalienableSuffix ; inalienableSuffix ;
inalienableSuffix locativeSuffix ;
NSF ;
       locativeSuffix
      # ;
basicNouns basicNounUnpossessedPrefixes ; basicNounPossessedPrefixes ;
basicNounUnpossessedPrefixes gaBNouns ;
oBNouns ;
         aBNouns ;
       nullBNouns ;
basicNounPossessedPrefixes allBasicNounStems ; ! 1st person singular
allBasicNounStems ; ! 1st person dual allBasicNounStems ; ! 1st person plural
allBasicNounStems ; ! 2nd person singular allBasicNounStems ; ! 2nd person dual
allBasicNounStems ; ! 2nd person plural allBasicNounStems ; ! 3rd person masculine singular
allBasicNounStems ; ! 3rd person feminine indefinite? allBasicNounStems ; ! 3rd person neuter allBasicNounStems ; ! 3rd person masculine plural
96
(ya)godi+ allBasicNounStems ; ! 3rd person feminine indefinite plural (y)odi+ allBasicNounStems ; ! 3rd person neuter plural
LEXICON allBasicNounStems gaBNouns ;
                            oBNouns ;
                            aBNouns ;
                            nullBNouns ;
LEXICON gaBNouns normalGaBNouns ;
gaoBNouns ;
LEXICON oBNouns normalOBNouns ;
                            gaoBNouns ;
                            aoBNouns;
                            nullBNouns;
                            oLoanWords;
LEXICON aBNouns normalABNouns ;
aoBNouns ;
LEXICON oLoanWords di: #; ji:s #;
LEXICON h o ̨ n a ^ d hsgwae ̨^d
LEXICON ^yohgw ^wahsd hehn hnye ̨dahs ho ̨^jihsd hsdagw ji^gw
   nullBNouns
  N S F ;
NSF ;
   gaoBNouns
  NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
97
jihoha:
LEXICON
ado ̨hne^ts
LEXICON a d e ̨ h e ̨ adehsw ade ̨na^tr ado^jin adoda: a d o g e ̨ adowado ̨: adra^sw ahdahgw ahgwe ̨ny ahsgw atro ̨ni^d a t s o g e ̨
a w e ̨ h e ̨ awe ̨nohgr
LEXICON ^ d o ̨ d r ^ga:
^ g e ̨ h e ̨
^gr ^nehs ^nest ^nost ^nhahgy nhahd ^nhe ̨hts ^nhwe ̨hts ^ n h o ̨ h s
^ n o ̨ h s ^nihsda: ^ n h o ̨ h d
^ n h o ̨ h s ^o ̨hgwa: ^ o ̨ h s
a ^ e ̨ n adehshe ̨
NSF ;
      aoBNouns
 NSF ;
      normalABNouns
    N S F ;
NSF ; NSF ;
NSF ; NSF ;
N S F ; NSF ;
      NSF ;
      NSF ;
      NSF ;
NSF ; NSF ;
N S F ; N S F ;
NSF ;
      normalOBNouns
    N S F ;
NSF ; N S F ;
NSF ; NSF ;
NSF ;
NSF ; NSF ;
NSF ; NSF ;
N N S
N N
NSF ; S F ; F ;
NSF S F ; S F ;
;
NSF ;
N S F ;
N S F ; NSF ;
98
ade ̨nihs ahshed ahy
ga:
ga^d gahdr gahehd gahgwaohs gaho^j ganye ̨^d ge^a:
g o ̨ ^ d r gwiy ha^d
hah
hakd he^a: hehd
h e ̨ h d a : hehs hets
hey
hikd hji^gr hn
hnya: hnye:h hnyo^gw h n y o ̨ h s ho ̨d
hodr hohsgr hohwa: hsa: hsahe^d hsda: hsdai hsdao^gw h s e ̨ h e ̨ hsge ̨^dr ahsge ̨^dr hsgeh hsgoh hsgwi^dr hsgye ̨^da:
NSF ; NSF ;
NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ;
NSF ;
N S F ;
NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; N S F ;
NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
N S F ; NSF ;
NSF ; NSF ;
NSF ;
NSF ;
NSF ; NSF ;
NSF ; NSF ;
N S F ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ;
99
hsgyo ̨^w hshe^ hsiy hsna^d h s t o ̨ d r h s w e ̨ ^ d hwahd hwe ̨^ga: hwe ̨hda: h w e ̨ h s d i^d i^da: i^do ̨hgw i j o ̨ ^ d
j a o ̨ s ji^a: ji^dro ̨wahd j i ^ n o ̨ w
j i g w e ̨ d jihgw jihsgw jihso ̨da: j i h w e ̨ d jike^d jino ̨hgr jitgwa: kd
kdeh
kjin
kw
na^da: na^ga: na^gwiy na^sgw nawad
n e ̨ ^ d ne^da:
n e g r e ̨ d negw
n e ̨ h e ̨ : ne ̨noga: ne ̨nyo^gw n o ̨ ^ g w no ̨ge ̨^d no ̨hgwe ̨
NSF ; NSF ;
NSF ; NSF ;
N S F ; N S F ;
NSF ; NSF ;
NSF ; N S F ;
NSF ; NSF ;
NSF ;
N S F ;
N S F ; NSF ;
NSF ;
N S F ;
N S F ; NSF ;
NSF ; NSF ;
N S F ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ;
N S F ;
NSF ; N S F ;
NSF ; N S F ;
NSF ; NSF ;
N S F ; NSF ;
NSF ;
100
n o ̨ n y nrahd nrege ̨^d n r e ̨ h e ̨ nya^gw nyah
n y e ̨ d rihw sehd shaihsd te^tr tgo^d tragwe ̨^d t r e ̨ ^ d tsad tsehsd tsge ̨^e ̨: tsgo^d tsgr wa: wa^wihsd wajihsd way hwe ̨^hga: w e ̨ n widr widre ̨hd wiy
y
ya^d yad yahgw yan
y e ̨ :
y e ̨ ^ g w y e ̨ d
y e ̨ h s a : y o ̨ ^ d yo^gw y o ̨ w
LEXICON ^ahdr ^drehd
N S F ; NSF ;
NSF ; N S F ;
NSF ; NSF ;
N S F ;
NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; N S F ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
N S F ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; N S F ;
N S F ;
N S F ;
N S F ;
N S F ;
NSF ;
N S F ;
   normalGaBNouns
 NSF ;
NSF ;
101
^droda ^ka: ^na^gw
^ n i g o ̨ h ^wahsha: Cagwa: Catsge ̨^d Cidre ̨hd Cihsd Cisr ga^d gahihsd gahwehs gawehs gehd
g o ̨ ^ d r go ̨hs had ho ̨ga: ho ̨w hsdow hse ̨n hsgwa: hso ̨wahd itsga: j e ̨ jihay jihsd jihw kw
na^j na^johsgw nad
nahd nahgw nahsgw nai^d nakd nehsda: nehw nhe^d nhy
no ̨hs no ̨ny
now
NSF ;
NSF ;
NSF ; N S F ;
NSF ; NSF ;
NSF ; NSF ;
NSF ;
NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ;
NSF ;
NSF ;
NSF ;
NSF ; NSF ;
NSF ;
N S F ;
NSF ;
NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ;
NSF ;
NSF ; NSF ;
NSF ;
102
nyod
r e ̨ n rihwihs r o ̨ d tge ̨hets t g w e ̨ ^ d tse^d itse^d t s e n e ̨ ya: ya^d
NSF ;
N S F ;
NSF ;
N S F ;
NSF ; N S F ;
NSF ; NSF ;
N S F ;
NSF ;
NSF ;
LEXICON
+a^ #;
B.1.2 Abstract Semantic Lexicon
NSF
Multichar_Symbols @U.INALIEN.POSS@ @U.INALIEN.UNPOSS@
LEXICON
LEXICON
0:a%a
0:i%i
0:e%e
0 : e ̨ % e ̨
0:o%o
0 : o ̨ % o ̨
0 : ^CV% ^CV
0 : hV% hV
0 : hCV% hCV
0 : g% C/nC/^CC/hCC/^V 0 : nV% nV
0 : r% r
0 : y% y/w
LEXICON
ROOT
allNouns ;
allRoots ;
allSuffixes ;
stemArchetypes
#;
allRoots
#;
#;
#;
103
#; #; #;
#; #; #;
#;
#;
#;
LEXICON
LEXICON
LEXICON
3zn:0
deverbalRoots ; inalienableStems ; allBasicNounStems ;
allSuffixes
NSF ; locativeSuffix ;
deverbalRoots deverbalORoots ; deverbalARoots ; deverbalGaRoots ; deverbalNullRoots ;
allNouns inalienableNouns ; basicNouns ; deverbalNouns ; defectiveNouns ;
LEXICON
toad : sgwa:gwao ̨do ̨^
cat : dago:s
cat : da:gu:s
chicken : dakshae^dohs
dog : so:wa:s
duck : twe ̨:twe ̨:t
goose : ho ̨:ga:k
guinea% hen : doge ̨:t
pig : gwihsgwihs
rabbit : gwa^yo ̨^
turkey : soho ̨:t
Baltimore% oriole : gyo:gyo:^
blackbird : jogrihs
black% breasted% woodpecker : gwido^gwido^ blue% jay : di^di:^
chickadee : jikjiye:^
crow,% raven : ga^ga:^
great% horned% owl : hihi:
high% soaring% hawk : gwiye ̨^gwiye ̨^
house% woodpecker : dihsdihs # ; hummingbird : ji^nho ̨we ̨:se: # ;
104
defectiveNouns
           # ;
# ;
# ; # ;
# ; # ;
# ; # ;
# ; # ;
# ; # ;
# ; # ;
# ; # ;
# ;
# ;
# ;
killdeer : duwisduwi:^
mockingbird,% chatterbox : sa^sa^
night% hawk : gwe ̨:dihs
partridge : gwe:se ̨^
pigeon : tsahgo:wah
robin : jihsgogo^
screech% owl : gwaoh
seagull : johwe ̨^sdaga^
whip-poor-will : gwe ̨^gohnye ̨^
bear : hnyagwai^
eel : go ̨:deh
Channel% catfish : tgwiyo:ge ̨^
ants : jinho ̨hgwahe ̨h
bed% bug : ji^no ̨hdo:ya^
butterfly% (something% is% wet%;% refers% to% the% transformation) : ji^dana:we ̨: # ;
cricket : jino ̨hsano ̨h
grasshopper : jihsda:
spider : ji^ao:ye ̨:
garter% snake : jino ̨hyahae:
buffalo : degriya^go ̨^
chipmunk% (refers% to% the% stripe% on% the% chipmunk’s% back) : jihnyo^ge ̨^ # ; fox : hehshai: # ;
# ;
frog : sgwa^ahda^ # ; ground% hog,% woodchuck,% gopher : tehto ̨^ mink : jo ̨^daga^
mouse : jino:we ̨:
# ; # ;
muskrat : tea:o ̨t
raccoon : sa:no:^
skunk : dre ̨:na:
skunk : dre:na:
squirrel : joni:tsgro ̨:t
grey% squirrel,% black% squirrel : kdago ̨^ salamander : do:dihs
otter : sgwa:ye ̨h
barn% swallow : gwiyo:ge ̨^
bluebird : jo ̨:nyo ̨:^
mud% puppies,% dogfish : no ̨hsodai:yo ̨: flying% squirrel : gwa^da:
bird : jide ̨:^e ̨h
raspberries : jo ̨^dae:ya:^
sea% shell : ji^dro ̨:we ̨:
beech : onohotsge ̨^e ̨^
iron% wood% (tree)%;% red% oak : teo:ji^ corn% tassel : tsa^ge ̨:da^ # ; morel,% black% type% of% mushroom : yahge ̨hda^
# ;
# ;
# ;
# ;
# ;
# ;
# ;
# ; # ;
# ; # ;
# ; # ;
# ; # ;
# ; # ;
# ;
# ;
# ;
# ; # ;
# ;
# ;
# ;
105
# ; # ;
# ;
# ;
# ;
# ;
# ;
# ; # ;
# ;
# ;
# ;
wild% walnut : tsinyohgwa:k river,% stream,% creek : gihe ̨:k sugar : nawe ̨^da^
strawberry : jihso ̨:dahk
wolf : otahyo ̨:ni: wolf : tahyo ̨:ni: a% ghost : jihsge ̨: a% crab : ji^o: tree : grahe:t
LEXICON
P+ : o+
A+ : a+
A+ : ga+
LEXICON
deverbal% noun% root : 0
sexuality : idehsra
help : ye ̨nawahsr
the% ability% to% think%;% thinking% skills helpfulness : ya^dagenhahsr
corn% bread% paddles%;% corn% soup% paddles
corn% bread% paddles%;% corn% soup% paddles
junk : tgi^tr
sickness : noho ̨kdehsr
to% take% someone’s% part%;% advocacy : nhehsr water% drum : na^jowi^tr NSF ; leggings : risr
religion%;% the% Christian% faith : rihwiyohsde ̨hsr sin : rihwane^aksra
work : riho^de ̨hsr
paper : hyado ̨hsr
power,% strength : hshahsde ̨hsr
cradleboard : Caho ̨hsr
#; NSF ;
LEXICON
deverbal% noun% root : 0
blankets : ye ̨hsr
flint% (stone) : tragwe ̨^d
wealth : atgahno ̨nihsr
poplar : nrahdo ̨dahsr
soother,% pacifier,% nipple : no ̨nhe^dr
NSF ;
NSF ; NSF ;
NSF ;
NSF ;
NSF ; NSF ;
NSF ;
SF ; NSF ; NSF ;
NSF ;
# ;
# ;
# ; # ;
#; # ;
# ;
# ;
# ;
deverbalNouns deverbalORoots ;
deverbalARoots ; deverbalGaRoots ;
deverbalNullRoots ; deverbalGaRoots
   deverbalORoots
NSF ;
# ;
106
: ya^dowehdahsr : atgwe ̨nya^tr
NSF ;
: atgo ̨nya^tr NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ;
material,% cloth : niga:he ̨hsr power,% strength : hshahsde ̨hsr
NSF ; NSF ;
fun : ado ̨tgado ̨hsr celebration : ado ̨tgadehsr fat,% pig% rinds : ^drohsr sweat : i^daihe ̨hdr
NSF ;
NSF ;
NSF ;
NSF ;
LEXICON
deverbal% noun% root : 0
hoe : atsho^kdo ̨hsr
pants : atna^tsotr
belt : atna^gwihdr
sports,% games : atgahnyehtr
hat : nahaotr
coat,% dress : agya^dawi^tr
disaster : adrihwagyao ̨hsr
bat% (mammal) : adra^wihsd
birth : ado ̨nhehsr
shyness : adi^gro ̨hsra
lunch,% groceries : ade ̨na^tr
table : adekwahahsra
friendship%;% also% refers% to% a% ceremonial% friend : adao^tra NSF ;
socks :
ahdahdi^tr
NSF ;
LEXICON
mittens
ball : e ̨^nhotr sexuality : e ̨dehsr
LEXICON
0:@U.INALIEN.POSS@
0:@U.INALIEN.UNPOSS@o+
LEXICON
1sA+ : g+
1idA+ : (e)tni+
1idA+ : (e)kni+
1edA+ : (y)akni+
1ipA+ : (e)dwa+
1epA+ : (y)agwa+
(
3msA+ : ha+
deverbalNullRoots
                NSF ;
: e ̨^nyotr
  deverbalARoots
NSF ;
# ;
NSF ;
NSF ; NSF ;
NSF ;
NSF ;
NSF ; NSF ;
inalienableNouns inalienableStems ;
NSF ; NSF ;
inalienablePrefixes ;
inalienablePrefixes
inalienableStems ; ! 1S
inalienableStems ; ! 1ID inalienableStems ; ! 1ID
inalienableStems ; ! 1ED inalienableStems ; ! 1IPL
inalienableStems ; ! 1EPL inalienablePrefixes2 ;
inalienableStems ; ! 3MS
107
NSF ;
NSF ;
NSF ; NSF ;
3fiA+ : (y) 3znsA+ : ga+ 3znsA+ : (y)+ 3znsA+ : w+ 3mdpA+ : hadi+ 3fidpA+ : gao ̨+ 3fidpA+ : gae+ 3fidpA+ : ga:g+ 3zndpA+ : gadi+
LEXICON
2sA+ : h)s+
2dA+ : h)sni+
2pA+ : h)swa+
2sA+ : eh)s+
2dA+ : eh)sni+
2pA+ : eh)swa+
LEXICON 0 : o ̨ + 0 : e ̨ + 0:ag+ 0 : e+
LEXICON
LEXICON
! ! !
LEXICON
inalienable3FIPrefixes ; inalienableICStems ; ! 3N
inalienableOo ̨Stems ; ! 3N inalienableNotIOo ̨Stems ; ! 3N
inalienableStems ; ! 3MPL inalienableAStems ; ! 3FIPL
inalienableICStems ; ! 3FIPL inalienableNotAIStems ; ! 3FIPL inalienableStems ; ! 3NPL
inalienablePrefixes2
inalienableVStems ; ! 2S
inalienableVStems ; ! 2D inalienableVStems ; ! 2P
inalienableCStems ; inalienableCStems ; ! 2D inalienableCStems ; ! 2P
inalienable3FIPrefixes inalienableAStems ; ! 3FI inalienableIStems ; ! 3FI
! 2S
inalienableNotAIStems ; ! 3FI inalienableCStems ; ! (For% C-stems)
inalienableICStems
inalienableIStems
inalienableCStems
; ! 3FIPL
; ! 3FIPL
;
inalienableVStems
inalienableAStems
inalienableIStems
; inalienableEStems ; inalienablee ̨Stems ; inalienableOStems ;
inalienableo ̨Stems ;
inalienableStems inalienableAStems ; inalienableIStems ; inalienableNotAIStems ; inalienableCStems ;
108
LEXICON !
!
!
LEXICON
! !
LEXICON !
LEXICON
inalienableNotAIStems inalienableEStems ; inalienablee ̨Stems ; inalienableOStems ;
inalienableo ̨Stems ;
inalienableNotIOo ̨Stems inalienableAStems ;
inalienableEStems ; inalienablee ̨Stems ;
inalienableOo ̨Stems inalienableOStems ;
inalienableo ̨Stems ;
inalienableAStems stemArchetypes ;
inalienable% noun% root% beginning% with% %+a : 0 on% your% ears : aho ̨hd
on% your% foot : ahsi^d
on% my% toes : ahyagwiy
# ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
LEXICON
inalienableIStems stemArchetypes ;
inalienable% noun% root% beginning% with% %+i : 0 (on)% my% skin : ihn
# ; inalienableSuffix ;
!LEXICON
!LEXICON
!LEXICON
LEXICON
inalienable% noun% root% beginning% with% %+o ̨ : 0 # ;
on% your% knee : o ̨ts
inalienableSuffix ;
inalienableEStems inalienablee ̨Stems inalienableOStems
inalienableo ̨Stems stemArchetypes ;
109
LEXICON inalienableCStems stemArchetypes ;
inalienable% noun% root% beginning% with% a% consonant : 0
# ;
on% your% tongue : we ̨^nahs on% your% tongue : we ̨^nohs on% your% thumb : we ̨^yo ̨hga: on% your% eyes : gah
on% your% eyelashes : gahehd
on% your% eyebrow : gahgwaohs
on% your% hairline,% upper% brow%;% forehead : ge ̨^sd inalienableSuffix ;
on% the% bridge% of% my% nose : go ̨^d on% your% face : go ̨hs
on% its% whiskers : go ̨hsto ̨^
on% its% throat : ha^d
on% your% groin : han
on% your% ribs : hdega:
on% your% anus : hetga^
on% your% buttocks : hna^ts
on% your% shoulders : hne ̨s
on% your% neck% (front% of% the% neck) : hnya^s on% its% beak : hnye ̨dahs
his% testicles : hsgwa:
on% your% leg : hsin
on% your% calf% (of% leg) : hsna^d
on% your% hand : hsohd
on% your% upper% lip : hso ̨hga:
on% your% lip : hsohgw
on% your% upper% back : hswa^n
on% your% upper% back : hswe^n
on% your% (p)% elbows : hyohs
on% my% chest : ^ahs
on% my% inner% thigh : ^nho ̨hsga:
on% your% nose : ^nyo ̨hs
on% its% tail% (pertaining% to% birds) : ^yohgw on% your% belly : kse^d
on% your% arm : ne ̨tsh
on% your% head : no ̨^a:
on% your% breast : no ̨^gw
on% your% teeth : no^j
on% your% nipples : no ̨nhe^dr
on% his% penis,% phallus : nr
on% your% shin : nye ̨d
on% your% heel : rad
on% the% ball% of% my% foot : ragwahd
on% your% ankle : jaoho^gw
110
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ;
on% my% nail : ji^ehd on% my% nail : ji^ohd on% your% hip : jisgo^gw on% your% body : ya^d on% your% waist : ya^ga:
inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix locativeSuffix ;
on% your% gums :
on% your% cheeks
on% your% chin :
on% your% chin :
yo^d
: yo^gw yo^ts yu^ts
LEXICON
@U.INALIEN.POSS@
@U.INALIEN.UNPOSS@
LEXICON
+Loc : +a^geh
NSF ;
LEXICON
LEXICON
3znA+ :
3znP+ :
3znA+ :
LEXICON
1sP+ : (w)ag+
1dP+ : (y)o ̨kni+ 1pP+ : (y)o ̨gwa+ 2sP+ : sa+
2dP+ : sni+
2pP+ : swa+
3msP+ : ho+
3fisP+ : (ya)go+ 3znsP+ : (y)o+ 3mdpP+ : hodi+ 3fidpP+ : (ya)godi+ 3zndpP+ : (y)odi+
basicNouns basicNounUnpossessedPrefixes ; basicNounPossessedPrefixes ;
basicNounUnpossessedPrefixes gaBNouns ;
          oBNouns ;
          aBNouns ;
nullBNouns ;
basicNounPossessedPrefixes allBasicNounStems ;
allBasicNounStems ; allBasicNounStems ;
allBasicNounStems ; allBasicNounStems ;
allBasicNounStems ; allBasicNounStems ;
allBasicNounStems ; allBasicNounStems ; allBasicNounStems ;
allBasicNounStems ; allBasicNounStems ;
111
ga+ o+ a+
locativeSuffix
      # ;
#;
LEXICON
LEXICON
LEXICON
LEXICON
LEXICON
basic% noun% root : 0 tea : di:
cheese : ji:s
LEXICON
basic% noun% root : 0 potato : ho ̨na^d colts% foot : hsgwae ̨^d
LEXICON
 allBasicNounStems
gaBNouns ;
oBNouns ;
aBNouns ;
nullBNouns ;
gaBNouns normalGaBNouns ; gaoBNouns ;
oBNouns
normalOBNouns ;
gaoBNouns ;
aoBNouns ;
nullBNouns ;
oLoanWords ;
aBNouns
normalABNouns ;
aoBNouns ;
oLoanWords
stemArchetypes ;
# ;
# ;
nullBNouns
stemArchetypes ;
NSF ;
NSF ;
# ;
# ;
# ;
basic% noun% root : 0 clothespin : ^wahsd
cargo%;% bundle%;% load : hehn beak : hnye ̨dahs
a% motor%;% engine : ho ̨^jihsd dirty% clothes : hsdagw
stemArchetypes ; NSF ;
gaoBNouns
NSF ;
NSF ;
112
NSF ;
NSF ;
nakedness%;% nudity : ji^gw NSF ; straight% pin%;% pin%;% brooch%;% safety% pin : jihoha:
NSF ;
LEXICON
basic% noun% root : 0
ladder%;% stairs : ado ̨hne^ts LEXICON
aoBNouns
normalABNouns
stemArchetypes ; NSF ;
stemArchetypes ;
NSF ;
NSF ;
# ;
# ;
NSF ;
basic% noun% root : 0
fence : ade ̨he ̨
blouse%;% middy : adehsw lunch%;% groceries : ade ̨na^tr skate : ado^jin
NSF ;
NSF ; bow% (as% in% bow% and% arrow) : adoda:
axe%;% tomahawk : adoge ̨
hunt : adowado ̨:
luck : adra^sw
shoes : ahdahgw
clothing%;% clothes : ahgwe ̨ny roof : ahsgw
NSF ;
NSF ;
closthes : atro ̨ni^d calendar : atsoge ̨ flower : awe ̨he ̨ weeds : awe ̨nohgr
LEXICON
NSF ;
NSF ;
NSF ;
NSF ;
NSF ;
NSF ; NSF ;
basic% noun% root : 0
it% is% fat%;% gristle%;% rind : ^do ̨dr
a% parable%;% tale%;% story%;% legend : ^ga: ashes%;% bullet%;% dust : ^ge ̨he ̨
snow%;% snowflake : ^gr
sand : ^nehs
nudity : ^nest
nudity : ^nost
lumber% logs% (large)%;% timber : ^nhahgy lumber% logs% (large)%;% timber : nhahd tail% of% an% animal : ^nhe ̨hts
tail% of% an% animal : ^nhwe ̨hts
eggs : ^nho ̨hs
stem%;% hull% of% berries : ^nihsda:
113
# ; NSF ;
  NSF ;
normalOBNouns
NSF ; NSF ;
NSF ;
NSF ;
stemArchetypes ;
NSF ; NSF ;
NSF ; NSF ;
NSF ;
NSF ;
NSF ;
NSF ;
bur : ^nho ̨hd
onions : ^no ̨hs
sod%;% moss : ^o ̨hgwa:
vines : ^o ̨hs
skirt%;% tail%;% feather : ^yohgw snowsnake%;% pole : a^e ̨n
cocoon%;% nest%;% hive%;% bee-hive : adehshe ̨
wall : ade ̨nihs
number : ahshed
fruit : ahy
a% price% (on% it) : ga: pants : ga^d
NSF ; NSF ;
NSF ;
NSF ; a% tear% (in% one’s% eye) : gahdr
one% corn% stalk : thorn%;% thistle :
cloud : hji^gr
grease%;% oil : hn nutmeat : hnya:
flint% corn% soup : hnye:h nut : hnyo^gw
squash%;% melon : hnyo ̨hs a% bush%;% a% whip : ho ̨d basswood : hodr slippery% elm : hohsgr pelt : hohwa:
mouth : hsa:
beans : hsahe^d
rain : hsda:
scale% (of% a% fish) : hsda: scale% (of% a% fish) : hsdai
NSF ; NSF ;
NSF ; NSF ;
NSF ;
NSF ;
NSF ;
hey hikd
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ;
eyelash%;% the% stem% of% a% berry%;% the% eye% of% the% corn% kernel : gahehd NSF ;
eyebrow : gahgwaohs
grass : gaho^j
cadaver%;% dead% body : ganye ̨^d
hair%;% a% rag%;% (it% is)% ragged%;% cotton% batting%;% q-tips : go ̨^dr
a% limb%;% twig%;% branch : gwiy
quill%;% plume%;% feather%;% voice%;%
road : hah
soot : hakd
corn% husk : he^a:
dirt%;% earth%;% ground%;% land : hehd
fur : he ̨hda: NSF ; decayed% tree%;% log%;% wood%;% board : hehs (raw)% sausage%;% bologna%;% wieners : hets
NSF ; NSF ;
NSF ; tattered : ge^a:
NSF ;
NSF ;
NSF ;
NSF ; NSF ;
NSF ;
NSF ;
throat%;% larynx%;% esophagus : ha^d
NSF ;
NSF ; NSF ;
NSF ;
NSF ; NSF ;
NSF ;
NSF ; NSF ;
NSF ;
114
NSF ; NSF ;
NSF ; NSF ;
necklace : hsdao^gw
frost : hse ̨he ̨
rust : hsge ̨^dr
rust : ahsge ̨^dr
louse : hsgeh
branch : hsgoh
wrinkles : hsgwi^dr
bone%;% bare% bones : hsgye ̨^da: blue% beech% (tree) : hsgyo ̨^w dough : hshe^
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ;
NSF ;
NSF ;
hamstrings%;% calves% (of% the% legs)%;% outer% thighs : hsna^d
thread%;% string%;% cord : hsiy
NSF ;
straw : hsto ̨dr
coal : hswe ̨^d
maple : hwahd
a% splint : hwe ̨^ga:
corn% ears : hwe ̨hda:
foam : hwe ̨hsd
feces%;% shit%;% excrement : i^d clay%;% mud%;% mortar : i^da: flame : i^do ̨hgw
fish : ijo ̨^d
leaves% of% corn : jao ̨s
curtains%;% lace : ji^a:
the% brain : ji^dro ̨wahd
bug%;% insect%;% worm : ji^no ̨w gonorrhea : jigwe ̨d
porridge%;% mush : jihgw
mush : jihsgw
cluster% of% stars%;% star : jihso ̨da:
NSF ; NSF ;
NSF ;
NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ;
NSF ; NSF ;
NSF ; NSF ;
bell : jihwe ̨d
salt : jike^d
nasal% mucous : jino ̨hgr
yellow : jitgwa:
a% nutshell : kd
root%;% edible% roots% (pepper% roots%;% turnips%;% carrots) : kdeh
stump%;% knots% in% a% tree : kjin its% food : kw
bread : na^da:
horns%;% antlers : na^ga:
NSF ;
NSF ; NSF ;
cotton% batting : na^gwiy
a% mattress : na^sgw
clay%;% plaster%;% white-wash : nawad evergreen%;% conifer : ne ̨^d
roe% (fish% eggs) : ne^da:
NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ;
NSF ; NSF ;
NSF ;
NSF ; NSF ;
NSF ;
115
NSF ;
NSF ;
NSF ;
morel% mushroom : negre ̨d
peas : negw
corn : ne ̨he ̨:
hickory% wood%;% stick : ne ̨noga:
NSF ;
pills : ne ̨nyo^gw
milk : no ̨^gw
catfish : no ̨ge ̨^d
corn% cob : no ̨hgwe ̨
a% husk : no ̨ny
leaf : nrahd
tripe% (cow% stomach% lining)%;% animal% stomache : nrege ̨^d tapeworm : nre ̨he ̨ NSF ;
willow%;% nape% of% neck : sehd snake : shaihsd
flour%;% powder : te^tr
sumac : tgo^d
NSF ;
NSF ; NSF ;
housefly%;% fly : tre ̨^d
mist%;% steam%;% fog : tsad
syrup%;% honey%;% gum : tsehsd
peach% pit : tsge ̨^e ̨:
balsam% fir : tsgo^d
saliva%;% spit%;% sputum : tsgr
air%;% wind%;% a% moth : wa:
a% peeling : wa^wihsd
peelings%;% bark% of% a% tree : wajihsd
fin% of% a% fish%;% wings : way
wood% chips : hwe ̨^hga:
word%;% voice%;% speech : we ̨n
ice : widr
sleep%;% a% dream : widre ̨hd
young%;% offspring% (i.e.% of% an% animal)%;% baby : wiy
other%;% another : y
body : ya^d
basement%;% track%;% ditch : yad pants : yahgw
NSF ;
NSF ;
NSF ;
NSF ;
tire%;% its% track%;% anything% that% leaves% tracks : yan
NSF ;
beads : ye ̨:
tobacco%;% cigarettes : ye ̨^gw
NSF ;
NSF ;
116
NSF ; NSF ;
wood%;% firewood bandage : ye ̨hsa: a% dead% body%;%
: ye ̨d
cadaver : yo ̨^d
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
vomit%;% vomitus : nya^gw
native% mush% dishes% made% with% corn : nyah
stem : nye ̨d NSF ;
message%;% it% matters%;% it% is% its% fault%;% word%;% affair%;% business : rihw
NSF ;
NSF ;
NSF ;
NSF ; NSF ;
NSF ;
NSF ;
NSF ;
NSF ; NSF ;
NSF ;
NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ;
NSF ;
cheeks : yo^gw
guts%;% intestines : yo ̨w
LEXICON
basic% noun% root : 0
basket : ^ahdr
car%;% truck%;% vehicle : ^drehd
diaper : ^droda
skirt%;% slip : ^ka:
marriage : ^na^gw
the% mind : ^nigo ̨h
earrings : ^wahsha:
Avocet% blue% stocking% (bird) : ^yohgw
a% celestial% orb% (ie.% the% sun%;% the% moon) : Cagwa:
a% rope : Catsge ̨^d
tin%;% metal : Cihsd leggings : Cisr
sleep%;% a% dream : Cidre ̨hd white% oak : ga^d
eye% glasses : gahihsd shovel : gahwehs
paddle : gawehs
tie%;% scarf : gehd pillow%;% cushion : go ̨^dr the% mask : go ̨hs forest%;% bush : had
NSF ; NSF ;
NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
elm : ho ̨ga:
boat : ho ̨w
headdress : hsdow
a% name : hse ̨n
stone%;% rock%;% boulder%;% bullet : hsgwa: nails%;% wire%;% needle : hso ̨wahd mattress%;% sleeping% mat : itsga:
dish%;% plate%;% bowl : je ̨ the% devil : jihay
lamp : jihsd
hammer : jihw
food : kw
pail : na^j
cup : na^johsgw
town%;% community : nad comb : nahd
bass% drum : nahgw
NSF ; NSF ;
NSF ; NSF ;
NSF ;
normalGaBNouns
stemArchetypes ;
NSF ;
# ; NSF ;
NSF ;
NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ;
NSF ;
NSF ;
117
NSF ; NSF ;
NSF ;
NSF ;
NSF;
NSF ;
tame% animal%;% pet%;% domestic% animal : nahsgw a% peacock%;% bride%;% boastfulness : nai^d
bed : nakd
a% board : nehsda:
leather%;% hide : nehw
porcupine : nhe^d
stick : nhy
a% house : no ̨hs
a% dance : no ̨ny
guitar%; string% instrument%;% (refers% to% round% back% of% a% turtle) : now NSF ;
NSF ; spoon%;% canoe%;% birch% bark% canoe : nyod
NSF ;
song : re ̨n
an% agreement : rihwihs
log : ro ̨d
a% handle
wallet%;%
bottle%;%
bottle%;%
one% animal%;% pet : tsene ̨^
bag%;% mattress%;% tick%;% pouch% (ie.%
NSF ; NSF ;
NSF ; NSF ;
NSF ;
a% mattress% bag% into% which% straw% is% stuffed) : ya:
: tge ̨hets
purse%;% pocketbook%;% suitcase : tgwe ̨^d NSF ;
jar : tse^d jar : itse^d
doll : ya^d LEXICON NSF
+NSF : +a^
B.2 Concrete Version B.2.1 Concrete Lexicon
NSF ;
Multichar_Symbols @U.INALIEN.POSS@ @U.INALIEN.UNPOSS@
LEXICON allNouns inalienableNouns ;
allBasicNouns ; deverbalNouns ; defectiveNouns ;
118
# ;
#;
NSF ;
NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ;
NSF ;
NSF ; NSF ;
NSF ;
LEXICON sgwa:gwao ̨do ̨^ dago:s da:gu:s dakshae^dohs so:wa:s twe ̨:twe ̨:t
h o ̨ : g a : k
d o g e ̨ : t gwihsgwihs g w a ^ y o ̨ ^
s o h o ̨ : t gyo:gyo:^ jogrihs gwido^gwido^ di^di:^ jikjiye:^ ga^ga:^ hihi: gwiye ̨^gwiye ̨^ dihsdihs ji^nho ̨we ̨:se: duwisduwi:^ sa^sa^
g w e ̨ : d i h s
g w e : s e ̨ ^ tsahgo:wah jihsgogo^ gwaoh johwe ̨^sdaga^ gwe ̨^gohnye ̨^ hnyagwai^
g o ̨ : d e h tgwiyo:ge ̨^ jinho ̨hgwahe ̨h ji^no ̨hdo:ya^ ji^dana:we ̨: jino ̨hsano ̨h jihsda: ji^ao:ye ̨: jino ̨hyahae: degriya^go ̨^ jihnyo^ge ̨^ hehshai: sgwa^ahda^
defectiveNouns
# ;
# ;
# ; # ;
# ; # ;
# ; # ;
# ;
# ;
# ; # ;
# ; # ;
# ;
# ;
# ; # ;
# ;
# ;
# ; # ;
# ;
# ;
# ; # ;
# ;
# ;
# ; # ;
# ;
# ;
# ; # ;
# ; # ;
# ;
# ;
# ; # ;
# ; # ;
# ; # ;
119
t e h t o ̨ ^
j o ̨ ^ d a g a ^
j i n o : w e ̨ :
t e a : o ̨ t sa:no:^
d r e ̨ : n a : dre:na: joni:tsgro ̨:t k d a g o ̨ ^ do:dihs
s g w a : y e ̨ h gwiyo:ge ̨^ jo ̨:nyo ̨:^ no ̨hsodai:yo ̨: gwa^da: jide ̨:^e ̨h jo ̨^dae:ya:^ ji^dro ̨:we ̨: onohotsge ̨^e ̨^ teo:ji^ tsa^ge ̨:da^ yahge ̨hda^ tsinyohgwa:k g i h e ̨ : k
n a w e ̨ ^ d a ^ jihso ̨:dahk otahyo ̨:ni: tahyo ̨:ni:
j i h s g e ̨ : ji^o: grahe:t
LEXICON
o+
a+
ga+
LEXICON e ̨ d e h s r e ̨^nyotr e ̨^nhotr
# ; # ;
# ; # ;
# ; # ; # ;
# ; # ;
# ; # ;
# ;
# ;
# ; # ;
# ; # ;
# ; # ;
# ; # ;
# ;
# ;
# ; # ;
# ; # ;
# ; # ;
# ; # ;
deverbalNouns deverbalORoots ; deverbalARoots ;
deverbalGaRoots ; deverbalNullRoots ;
       deverbalNullRoots
             N S F ;
NSF ; NSF ;
120
LEXICON idehsra ye ̨nawahsr ya^dowehdahsr ya^dagenhahsr atgwe ̨nya^tr atgo ̨nya^tr tgi^tr noho ̨kdehsr nhehsr na^jowi^tr risr rihwiyohsde ̨hsr rihwane^aksra riho^de ̨hsr hyado ̨hsr hshahsde ̨hsr Caho ̨hsr
LEXICON
y e ̨ h s r atgahno ̨nihsr nrahdo ̨dahsr no ̨nhe^dr niga:he ̨hsr hshahsde ̨hsr ado ̨tgado ̨hsr ado ̨tgadehsr ^drohsr i^daihe ̨hdr
LEXICON atsho^kdo ̨hsr atna^tsotr atna^gwihdr atgahnyehtr nahaotr agya^dawi^tr adrihwagyao ̨hsr adra^wihsd ado ̨nhehsr adi^gro ̨hsra ade ̨na^tr
   deverbalGaRoots
          NSF ;
NSF ; NSF ;
NSF ;
NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
   deverbalORoots
 N S F ;
NSF ; NSF ;
NSF ; NSF ;
NSF ;
NSF ;
NSF ;
NSF ; NSF ;
   deverbalARoots
 NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
121
adekwahahsra adao^tra ahdahdi^tr
LEXICON
@U.INALIEN.POSS@
@U.INALIEN.UNPOSS@o+
LEXICON
!
!
LEXICON g+ (e)gy+ (y)agy+ (e)dw+ (y)agw+ (h)s+ (h)j+ (h)sw+ h+ (y)o ̨+ w+
he ̨n+ gao ̨+ ge ̨n+
LEXICON
g+
(e)kn+
(e)tn+
NSF ;
NSF ;
NSF ;
inalienableNouns
inalienablePrefixes ;
inalienableStems ; !This is for all the unpossessed inalienables.
These should get the NSF
inalienablePrefixes inalienableAPrefixes ; inalienableIPrefixes ;
inalienableEe ̨Prefixes ; inalienableOo ̨Prefixes ; inalienableH^CPrefixes ; inalienableH^CCPrefixes ; inalineableNPrefixes ; inalienableYWRPrefixes ; inalienableOtherCPrefixes ;
inalienableUPrefixes ;
inalienableAPrefixes inalienableAStems ;
inalienableAStems ; inalienableAStems ;
inalienableAStems ; inalienableAStems ;
inalienableAStems ; inalienableAStems ;
inalienableAStems ; inalienableAStems ;
inalienableAStems ; inalienableAStems ;
inalienableAStems ; inalienableAStems ; inalienableAStems ;
inalienableIPrefixes inalienableIStems ;
inalienableIStems ; inalienableIStems ;
122
(y)akn+ (e)dwe ̨+ (y)agwe ̨+ (h)s+ (h)sn+ (h)swe ̨+ he ̨+ (y)e ̨+ ge ̨+ had+ gae+ gad+
!LEXICON !g+ !(e)kn !(e)tn+ !(y)akn+ !(e)dw+ !(y)agw+ !(h)s+ !(h)sn+ !(h)sw+ !h+ !(y)ag+ !w+ !he ̨n+ !ga:g+ !ge ̨n+
LEXICON
g+
(e)kn+
(e)tn+
(y)akn+
(e)gy+
(y)agy+
(h)s+
(h)sn+
(h)j+
h+
(y)ag+
(y)+
inalienableIStems ;
inalienableIStems ; inalienableIStems ;
inalienableIStems ; inalienableIStems ;
inalienableIStems ; inalienableIStems ;
inalienableIStems ; inalienableIStems ;
inalienableIStems ; inalienableIStems ; inalienableIStems ;
inalienableEe ̨Prefixes
inalienableOo ̨Prefixes inalienableOo ̨Stems ;
inalienableOo ̨Stems ; inalienableOo ̨Stems ;
inalienableOo ̨Stems ; inalienableOo ̨Stems ;
inalienableOo ̨Stems ; inalienableOo ̨Stems ;
inalienableOo ̨Stems ; inalienableOo ̨Stems ;
inalienableOo ̨Stems ; inalienableOo ̨Stems ;
inalienableOo ̨Stems ; 123
he ̨n+ ga:g+ ge ̨n+
!LEXICON
!g+
!kn+, tn+
!akn+
!gy+
!agy+
!s+
!sn+ !j+ !h+ !ag+ !w+ !he ̨n+ !ga:g+ !ge ̨n+
LEXICON
k+
(e)kni+
(e)tni+
(y)akni+
(e)dwa+
(y)agwa+
(eh)s+
(eh)sni+
(eh)swa+
ha+
(y)e+
ga+
hadi+
gae+
gadi+
LEXICON
ge+
(e)kni+
(e)tni+
(y)akni+
(e)dwa+
inalienableOo ̨Stems ; inalienableOo ̨Stems ;
inalienableOo ̨Stems ; inalienableUPrefixes
inalienableH^CPrefixes inalienableH^CVStems ;
inalienableH^CVStems ; inalienableH^CVStems ;
inalienableH^CVStems ; inalienableH^CVStems ;
inalienableH^CVStems ; inalienableH^CVStems ;
inalienableH^CVStems ; inalienableH^CVStems ;
inalienableH^CVStems ; inalienableH^CVStems ;
inalienableH^CVStems ; inalienableH^CVStems ;
inalienableH^CVStems ; inalienableH^CVStems ;
inalienableH^CCPrefixes inalienableH^CCStems ;
inalienableH^CCStems ; inalienableH^CCStems ;
inalienableH^CCStems ; inalienableH^CCStems ;
124
(y)agwa+
(eh)se+
(eh)sni+
(eh)swa+
ha+
(y)e+
ga+
hadi+
gae+
gadi+
LEXICON
k+
(e)kni+
(e)tni+
(y)akni+
(e)dwa+
(y)agwa+
(eh)s+
(eh)sni+
(eh)swa+
ha+
(y)e+
ga+
hadi+
gae+
gadi+
LEXICON
g+
(e)kni+
(e)tni+
(y)akni+
(e)dwa+
(y)agwa+
(eh)s+
(eh)sni+
(eh)swa+
ha+
(y)e+
ga+
hadi+
gae+
inalienableH^CCStems ; inalienableH^CCStems ;
inalienableH^CCStems ; inalienableH^CCStems ;
inalienableH^CCStems ; inalienableH^CCStems ;
inalienableH^CCStems ; inalienableH^CCStems ;
inalienableH^CCStems ; inalienableH^CCStems ;
inalineableNPrefixes inalineableNStems ;
inalineableNStems ; inalineableNStems ;
inalineableNStems ; inalineableNStems ;
inalineableNStems ; inalineableNStems ;
inalineableNStems ; inalineableNStems ;
inalineableNStems ; inalineableNStems ;
inalineableNStems ; inalineableNStems ;
inalineableNStems ; inalineableNStems ;
inalienableYWRPrefixes inalienableYWRStems ;
inalienableYWRStems ; inalienableYWRStems ;
inalienableYWRStems ; inalienableYWRStems ;
inalienableYWRStems ; inalienableYWRStems ;
inalienableYWRStems ; inalienableYWRStems ;
inalienableYWRStems ; inalienableYWRStems ;
inalienableYWRStems ; inalienableYWRStems ;
inalienableYWRStems ;
125
gadi+
LEXICON
ge+
(e)kni+
(e)tni+
(y)akni+
(e)dwa+
(y)agwa+
(eh)se+
(eh)sni+
(eh)swa+
ha+
(y)e+
ga+
hadi+
gae+
gadi+
LEXICON
inalienableYWRStems ;
inalienableOtherCPrefixes inalienableOtherCStems ;
inalienableOtherCStems ; inalienableOtherCStems ;
inalienableOtherCStems ; inalienableOtherCStems ;
inalienableOtherCStems ; inalienableOtherCStems ;
inalienableOtherCStems ; inalienableOtherCStems ;
inalienableOtherCStems ; inalienableOtherCStems ;
inalienableOtherCStems ; inalienableOtherCStems ;
inalienableOtherCStems ; inalienableOtherCStems ;
inalienableStems inalienableAStems ; inalienableIStems ; inalienableOo ̨Stems ; inalienableH^CVStems ; inalienableH^CCStems ; inalineableNStems ; inalienableYWRStems ; inalienableOtherCStems ;
inalienableAStems !3 inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableIStems !1 inalienableSuffix ;
inalienableEe ̨Stems inalienableOo ̨Stems !1
126
LEXICON aho ̨hd ahsi^d ahyagwiy
LEXICON ihn
!LEXICON
LEXICON
o ̨ts
LEXICON ha^d han hdega: hetga^ hna^ts hne ̨s hsin hso ̨hga: hsohd hsohgw hyohs ^yohgw
LEXICON hnya^s hnye ̨dahs hsgwa: ^nho ̨hsga: ^nyo ̨hs hsna^d hswa^n hswe^n
LEXICON no ̨^a: no ̨^gw no ̨nhe^dr no^j
nr ne ̨tsh nye ̨d
LEXICON ya^d ya^ga: yo^d yo^gw yo^ts yu^ts
inalienableSuffix ;
inalienableH^CVStems !12 inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ;
inalienableH^CCStems !8 inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ; inalienableSuffix ; inalienableSuffix ; inalienableSuffix ;
inalineableNStems !7 inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ;
inalienableYWRStems !10 inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ; inalienableSuffix ;
127
we ̨^nahs we ̨^nohs we ̨^yo ̨hga: rad ragwahd
LEXICON gah gahehd gahgwaohs go ̨hs go ̨hsto ̨^ go ̨^d
ge ̨^sd ^ahs kse^d jaoho^gw ji^ohd ji^ehd jisgo^gw
LEXICON
@U.INALIEN.POSS@
@U.INALIEN.UNPOSS@
LEXICON +a^geh
LEXICON
LEXICON
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ;
inalienableOtherCStems !14 inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix locativeSuffix ;
NSF ;
        locativeSuffix
      # ;
allBasicNouns basicNounPossessedPrefixes ; basicNounUnpossessedPrefixes ;
basicNounPossessedPrefixes wagPrefixes ; yo ̨kniPrefixes ; yo ̨gwaPrefixes ; saPrefixes ;
        sniPrefixes ;
        swaPrefixes ;
        hoPrefixes ;
        yagoPrefixes ;
128
LEXICON
(w)ag+
(w)ag+
!
!
!
!
(w)ak+
(w)ag+
(w)age+
LEXICON (y)o ̨gy+ (y)o ̨kn+ !(y)o ̨kn+ !(y)o ̨kn+ !(y)o ̨kn+ !(y)o ̨kn+ (y)o ̨kni+
LEXICON (y)o ̨gw+ (y)o ̨gwe ̨+ !(y)o ̨gw+ !(y)o ̨gw+ !(y)o ̨gy+ !(y)o ̨gy+ (y)o ̨gwa+
LEXICON s+
se ̨+
!s+ !s+ !s+ !s+ sa+
yoPrefixes ; hodiPrefixes ; yagodiPrefixes ; yodiPrefixes ;
wagPrefixes basicNounsAStems ; basicNounsIStems ;
basicNounsEStems ; basicNounse ̨Stems ; basicNounsOStems ; basicNounso ̨Stems ;
basicNounshor^CornStems ; basicNounsyorwStems ;
basicNounsCOtherStems ;
yo ̨kniPrefixes basicNounsAStems ; basicNounsIStems ;
basicNounsEStems ; basicNounse ̨Stems ; basicNounsOStems ; basicNounso ̨Stems ; basicNounsOtherStems ;
yo ̨gwaPrefixes
basicNounsAStems ; basicNounsIStems ;
basicNounsEStems ; basicNounse ̨Stems ;
basicNounsOStems ;
basicNounso ̨Stems ; basicNounsOtherStems ;
saPrefixes basicNounsAStems ;
basicNounsIStems ; basicNounsEStems ; basicNounse ̨Stems ; basicNounsOStems ; basicNounso ̨Stems ; basicNounsOtherStems ;
129
LEXICON
j+
sn+
!sn+
!sn+
!sn+
!sn+
sni+
LEXICON sw+ swe ̨+ !sw+ !sw+ !j+ !j+ swa+
LEXICON
ho+
ho+
!haw+
!haw+
!h+
!h+
ho+
LEXICON
(ya)go+
(ya)go+
!(ya)gaw+
!(ya)gaw+
!(ya)g+
!(ya)g+
(ya)go+
LEXICON
(y)o+
(y)o+
!(y)aw+
sniPrefixes basicNounsAStems ;
basicNounsIStems ; basicNounsEStems ; basicNounse ̨Stems ; basicNounsOStems ; basicNounso ̨Stems ; basicNounsOtherStems ;
swaPrefixes basicNounsAStems ;
basicNounsIStems ; basicNounsEStems ;
basicNounse ̨Stems ; basicNounsOStems ; basicNounso ̨Stems ;
basicNounsOtherStems ;
hoPrefixes basicNounsAStems ; basicNounsIStems ;
basicNounsEStems ; basicNounse ̨Stems ;
basicNounsOStems ; basicNounso ̨Stems ; basicNounsOtherStems ;
yagoPrefixes basicNounsAStems ; basicNounsIStems ;
basicNounsEStems ; basicNounse ̨Stems ;
basicNounsOStems ; basicNounso ̨Stems ; basicNounsOtherStems ;
yoPrefixes basicNounsAStems ; basicNounsIStems ;
basicNounsEStems ;
130
!(y)o+
!(y)+
!(y)+
(y)o+
LEXICON
hon+
hod+
!hon+
!hon+
!hon+
!hon+
hodi+
LEXICON
(ya)gon+
(ya)god+
!(ya)gon+
!(ya)gon+
!(ya)gon+
!(ya)gon+
(ya)godi+
LEXICON
(y)on+
(y)od+
!(y)on+
!(y)on+
!(y)on+
!(y)on+
(y)odi+
LEXICON
ga+
o+
a+
basicNounse ̨Stems ; basicNounsOStems ;
basicNounso ̨Stems ; basicNounsOtherStems ;
hodiPrefixes basicNounsAStems ; basicNounsIStems ;
basicNounsEStems ; basicNounse ̨Stems ; basicNounsOStems ; basicNounso ̨Stems ; basicNounsOtherStems ;
yagodiPrefixes basicNounsAStems ; basicNounsIStems ;
basicNounsEStems ; basicNounse ̨Stems ; basicNounsOStems ; basicNounso ̨Stems ; basicNounsOtherStems ;
yodiPrefixes basicNounsAStems ; basicNounsIStems ;
basicNounsEStems ; basicNounse ̨Stems ; basicNounsOStems ; basicNounso ̨Stems ; basicNounsOtherStems ;
basicNounUnpossessedPrefixes gaBNouns ;
oBNouns ;
        aBNouns ;
      nullBNouns ;
! Grouping by initial stem vowel for possessed basic nouns LEXICON basicNounshor^CornStems
nullBNounshVStems ;
131
gaoh^CNouns ; normalOBNounsh^CnStems ; normalGaBNounsh^CnStems ;
LEXICON basicNounsyorwStems normalOBNounsYWStems ;
normalGaBNounsYWStems ;
LEXICON basicNounsCOtherStems gaoJNouns ;
normalOBNounsOtherCStems ; normalGaBNounsOtherCStems ; oLoanWords ; nullBNounshCStems ;
LEXICON basicNounsAStems aoBNouns ;
normalABNouns ; normalOBNounsAStems ;
LEXICON basicNounsIStems normalOBNounsIStems ;
normalGaBNounsIStems ;
!LEXICON basicNounsEStems !#;
!LEXICON basicNounse ̨Stems !#;
!LEXICON basicNounso ̨Stems !#;
LEXICON basicNounsOtherStems oLoanWords ;
nullBNouns ;
gaoBNouns ; normalOBNounsOtherStems ; normalGaBNounsOtherStems ;
! End grouping by stem vowel for possessed basic nouns
132
LEXICON gaBNouns normalGaBNouns ;
gaoBNouns ;
LEXICON oBNouns normalOBNouns ;
                            gaoBNouns ;
                            aoBNouns;
                            nullBNouns;
                            oLoanWords;
LEXICON aBNouns normalABNouns ;
aoBNouns ;
LEXICON oLoanWords di: #; ji:s #;
LEXICON
LEXICON h o ̨ n a ^ d
LEXICON hsgwae ̨^d
LEXICON
LEXICON ji^gw jihoha: hnye ̨dahs
nullBNouns nullBNounshVStems ; nullBNounshCStems ;
       nullBNounshVStems
     N S F ;
       nullBNounshCStems
NSF ;
gaoBNouns gaoh^CNouns ; gaoJNouns ;
       gaoJNouns
    NSF ;
NSF ; NSF ;
133
hsdagw
LEXICON ^wahsd ^yohgw hehn ho ̨^jihsd
LEXICON ado ̨hne^ts
LEXICON a d e ̨ h e ̨ adehsw ade ̨na^tr ado^jin adoda: a d o g e ̨ adowado ̨: adra^sw ahdahgw ahgwe ̨ny ahsgw atro ̨ni^d a t s o g e ̨
a w e ̨ h e ̨ awe ̨nohgr
LEXICON normalOBNouns
LEXICON
LEXICON ^o ̨hgwa:
NSF ;
gaoh^CNouns NSF ;
NSF ; NSF ;
NSF ;
      aoBNouns
 NSF ;
      normalABNouns
    N S F ;
NSF ; NSF ;
NSF ; NSF ;
N S F ; NSF ;
      NSF ;
      NSF ;
      NSF ;
NSF ; NSF ;
N S F ; N S F ;
NSF ;
normalOBNounsAStems ; normalOBNounsIStems ; normalOBNounsOtherStems ;
normalOBNounsOtherStems normalOBNounsh^CnStems ; normalOBNounsYWStems ; normalOBNounsOtherCStems ;
normalOBNounsOtherCStems NSF ;
134
^ o ̨ h s
ga:
ga^d gahdr gahehd gahgwaohs gaho^j ganye ̨^d ge^a:
g o ̨ ^ d r gwiy
j a o ̨ s ji^a: ji^dro ̨wahd j i ^ n o ̨ w
j i g w e ̨ d jihgw jihsgw jihso ̨da: j i h w e ̨ d jike^d jino ̨hgr jitgwa: kd
kdeh kjin
kw
sehd shaihsd te^tr tgo^d tragwe ̨^d t r e ̨ ^ d tsad tsehsd tsge ̨^e ̨: tsgo^d tsgr
LEXICON wa: wa^wihsd wajihsd
N S F ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; N S F ;
NSF ; N S F ;
NSF ; NSF ;
N S F ; N S F ;
NSF ; NSF ;
NSF ; N S F ;
NSF ; NSF ;
NSF ; NSF ;
NSF ;
NSF ;
NSF ; NSF ;
NSF ;
NSF ;
NSF ; NSF ;
N S F ;
NSF ;
NSF ; NSF ;
NSF ;
NSF ;
normalOBNounsh^CCStems ;
     normalOBNounsYWStems
        NSF ;
NSF ;
NSF ;
135
way hwe ̨^hga: w e ̨ n widr widre ̨hd wiy
y
ya^d yad yahgw yan
y e ̨ :
y e ̨ ^ g w
y e ̨ d
y e ̨ h s a : y o ̨ ^ d yo^gw
y o ̨ w rihw
LEXICON ^nhahgy ^nhe ̨hts ^nhwe ̨hts ^ n h o ̨ h s
^ n h o ̨ h d
^ n o ̨ h s hnya: hnye:h hnyo^gw h n y o ̨ h s hsda: hsdai hsdao^gw hsge ̨^dr hsgeh hsgoh hsgwi^dr hsgye ̨^da: hsgyo ̨^w hshe^ hsna^d
h s t o ̨ d r h s w e ̨ ^ d
NSF ; NSF ;
N S F ; NSF ;
NSF ;
NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; N S F ;
N S F ;
N S F ;
N S F ; N S F ;
NSF ; N S F ;
NSF ;
normalOBNounsh^CCStems NSF ;
NSF ; NSF ;
N S F ;
N S F ; N S F ;
NSF ; NSF ;
NSF ; N S F ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; N S F ;
N S F ;
136
nrahd nrege ̨^d n r e ̨ h e ̨ nya^gw nyah
n y e ̨ d nhahd ^gr
LEXICON na^da: na^ga: na^gwiy na^sgw nawad n e ̨ ^ d ne^da: n e g r e ̨ d negw
n e ̨ h e ̨ : ne ̨noga: ne ̨nyo^gw n o ̨ ^ g w no ̨ge ̨^d no ̨hgwe ̨
n o ̨ n y
^ d o ̨ d r ^nost ^ga:
^ g e ̨ h e ̨ ^nehs ^nest ^nihsda: ha^d hah hakd he^a: hehd
h e ̨ h d a : hehs hets hey hikd hji^gr
NSF ; NSF ;
N S F ; NSF ;
NSF ; N S F ;
NSF ;
NSF ;
normalOBNounsh^CnStems NSF ;
NSF ; NSF ;
NSF ; NSF ;
N S F ; NSF ;
N S F ; NSF ;
N S F ; NSF ;
NSF ;
N S F ;
NSF ; NSF ;
    N S F ;
    N S F ;
    NSF ;
NSF ; N S F ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
N S F ;
NSF ;
NSF ; NSF ;
NSF ; NSF ;
137
hn
h o ̨ d hodr hohsgr hohwa: hsa: hsahe^d h s e ̨ h e ̨ hsiy hwahd hwe ̨^ga: hwe ̨hda: h w e ̨ h s d
LEXICON ahsge ̨^dr a ^ e ̨ n adehshe ̨ ade ̨nihs ahshed ahy
LEXICON i^d i^da: i^do ̨hgw i j o ̨ ^ d
LEXICON
LEXICON
LEXICON ^ahdr ga^d gahihsd
NSF ; N S F ;
NSF ; NSF ;
NSF ;
NSF ;
NSF ; N S F ;
NSF ; NSF ;
NSF ; NSF ;
N S F ;
  normalOBNounsAStems
   NSF ;
N S F ; NSF ;
NSF ; NSF ;
NSF ;
  normalOBNounsIStems
     NSF ;
NSF ; NSF ;
N S F ;
normalGaBNouns normalGaBNounsIStems ; normalGaBNounsOtherStems ;
normalGaBNounsOtherStems normalGaBNounsh^CnStems ; normalGaBNounsYWStems ; normalGaBNounsOtherCStems ;
normalGaBNounsOtherCStems NSF ;
NSF ; NSF ;
138
gahwehs gawehs gehd
g o ̨ ^ d r
g o ̨ h s
j e ̨ jihay jihsd jihw kw tge ̨hets t g w e ̨ ^ d tse^d
t s e n e ̨
LEXICON ya: ya^d Cagwa: Catsge ̨^d Cidre ̨hd Cihsd Cisr
r e ̨ n rihwihs r o ̨ d
LEXICON hsdow ^drehd ^droda hsgwa: nhe^d nhy nyod
LEXICON had
h o ̨ g a : h o ̨ w
h s e ̨ n hso ̨wahd
NSF ; NSF ;
NSF ; N S F ;
N S F ; N S F ;
NSF ;
NSF ;
NSF ; NSF ;
NSF ; N S F ;
NSF ; N S F ;
normalGaBNounsh^CCStems ;
   normalGaBNounsYWStems
      NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ;
NSF ;
N S F ; NSF ;
N S F ;
normalGaBNounsh^CCStems NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
normalGaBNounsh^CnStems NSF ;
N S F ;
N S F ;
N S F ; NSF ;
139
^ka: ^na^gw
^ n i g o ̨ h ^wahsha: na^j na^johsgw nad
nahd nahgw nahsgw nai^d nakd nehsda: nehw
n o ̨ h s
n o ̨ n y
now
LEXICON itse^d itsga:
NSF ; NSF ;
N S F ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
N S F ; N S F ;
NSF ;
     normalGaBNounsIStems
    NSF ;
NSF ;
LEXICON
+a^ #;
NSF
B.2.2 Concrete Semantic Lexicon
Multichar_Symbols @U.INALIEN.POSS@ @U.INALIEN.UNPOSS@ LEXICON root
LEXICON allSuffixes
allNouns ; allRoots ; allSuffixes ;
NSF ; locativeSuffix ;
140
LEXICON
! ! ! !
LEXICON
allRoots
LEXICON
toad : sgwa:gwao ̨do ̨^
cat : dago:s
cat : da:gu:s
chicken : dakshae^dohs
dog : so:wa:s
duck : twe ̨:twe ̨:t
goose : ho ̨:ga:k
guinea% hen : doge ̨:t
pig : gwihsgwihs
rabbit : gwa^yo ̨^
turkey : soho ̨:t
Baltimore% oriole : gyo:gyo:^
blackbird : jogrihs
black% breasted% woodpecker : gwido^gwido^ blue% jay : di^di:^
chickadee : jikjiye:^
crow,% raven : ga^ga:^
great% horned% owl : hihi:
high% soaring% hawk : gwiye ̨^gwiye ̨^
house% woodpecker : dihsdihs
141
# ;
# ;
# ; # ;
allNouns
deverbalORoots ; deverbalARoots ; deverbalGaRoots ; deverbalNullRoots ; inalienableStems ; basicNounsAStems ; basicNounsIStems ;
basicNounsEStems ; basicNounse ̨Stems ; basicNounsOStems ; basicNounso ̨Stems ;
basicNounshor^CornStems ; basicNounsyorwStems ; basicNounsCOtherStems ;
inalienableNouns ; allBasicNouns ; deverbalNouns ; defectiveNouns ;
defectiveNouns
   # ;
# ; # ;
# ;
# ; # ;
# ; # ;
# ; # ;
# ;
# ;
# ;
# ;
# ;
# ;
hummingbird : ji^nho ̨we ̨:se: # ; killdeer : duwisduwi:^ mockingbird,% chatterbox : sa^sa^ night% hawk : gwe ̨:dihs
partridge : gwe:se ̨^
pigeon : tsahgo:wah
robin : jihsgogo^
screech% owl : gwaoh seagull : johwe ̨^sdaga^ whip-poor-will : gwe ̨^gohnye ̨^ bear : hnyagwai^
# ; # ;
# ; # ;
# ; # ;
# ;
# ;
# ;
cricket : jino ̨hsano ̨h
grasshopper : jihsda:
spider : ji^ao:ye ̨:
garter% snake : jino ̨hyahae:
buffalo : degriya^go ̨^
chipmunk% (refers% to% the% stripe% on% the% chipmunk’s% back) : jihnyo^ge ̨^ fox : hehshai: # ;
# ;
frog : sgwa^ahda^ # ; ground% hog,% woodchuck,% gopher : tehto ̨^ mink : jo ̨^daga^
mouse : jino:we ̨:
# ; # ;
muskrat : tea:o ̨t
raccoon : sa:no:^
skunk : dre ̨:na:
skunk : dre:na:
squirrel : joni:tsgro ̨:t
grey% squirrel,% black% squirrel : kdago ̨^ salamander : do:dihs
otter : sgwa:ye ̨h
barn% swallow : gwiyo:ge ̨^
bluebird : jo ̨:nyo ̨:^
mud% puppies,% dogfish : no ̨hsodai:yo ̨: flying% squirrel : gwa^da:
bird : jide ̨:^e ̨h
raspberries : jo ̨^dae:ya:^
sea% shell : ji^dro ̨:we ̨:
beech : onohotsge ̨^e ̨^
iron% wood% (tree)%;% red% oak : teo:ji^ corn% tassel : tsa^ge ̨:da^ # ;
142
# ;
# ;
# ;
# ; # ;
eel : go ̨:deh
Channel% catfish : tgwiyo:ge ̨^
ants : jinho ̨hgwahe ̨h
bed% bug : ji^no ̨hdo:ya^
butterfly% (something% is% wet%;% refers% to% the% transformation) : ji^dana:we ̨:
# ; # ;
# ; # ;
# ; # ;
# ; # ;
# ;
# ; # ;
# ;
# ;
# ; # ;
# ;
# ;
# ;
# ;
# ;
# ;
# ;
# ;
# ;
morel,% black% type% of% mushroom : yahge ̨hda^
# ;
wild% walnut : tsinyohgwa:k river,% stream,% creek : gihe ̨:k sugar : nawe ̨^da^
strawberry : jihso ̨:dahk
wolf : otahyo ̨:ni: wolf : tahyo ̨:ni: a% ghost : jihsge ̨: a% crab : ji^o: tree : grahe:t
# ;
# ;
# ; # ;
#; # ; #
;
LEXICON
3znP+ :
3znA+ :
3znA+ :
o+ a+ ga+
# ; # ;
deverbalNouns deverbalORoots ; deverbalARoots ;
LEXICON
mittens
ball : e ̨^nhotr sexuality : e ̨dehsr
: e ̨^nyotr
NSF ; NSF ;
LEXICON
0 : deverbal% noun% root
deverbal% noun% root : 0
sexuality : idehsra
help : ye ̨nawahsr
the% ability% to% think%;% thinking% skills helpfulness : ya^dagenhahsr
corn% bread% paddles%;% corn% soup% paddles
corn% bread% paddles%;% corn% soup% paddles
junk : tgi^tr
sickness : noho ̨kdehsr
to% take% someone’s% part%;% advocacy : nhehsr water% drum : na^jowi^tr NSF ; leggings : risr
religion%;% the% Christian% faith : rihwiyohsde ̨hsr sin : rihwane^aksra
work : riho^de ̨hsr
paper : hyado ̨hsr
power,% strength : hshahsde ̨hsr
cradleboard : Caho ̨hsr
NSF ;
#; #;
NSF ; NSF ;
deverbalGaRoots deverbalNullRoots ;
deverbalNullRoots
deverbalGaRoots
143
;
: ya^dowehdahsr NSF ;
: atgwe ̨nya^tr : atgo ̨nya^tr NSF ;
NSF ;
NSF ; NSF ;
NSF ;
NSF ;
NSF ;
NSF ; NSF ;
NSF ;
NSF ; NSF ;
NSF ;
LEXICON
0 : deverbal% noun% root
deverbal% noun% root : 0
blankets : ye ̨hsr
flint% (stone) : tragwe ̨^d
wealth : atgahno ̨nihsr
poplar : nrahdo ̨dahsr
soother,% pacifier,% nipple : no ̨nhe^dr material,% cloth : niga:he ̨hsr
power,% strength : hshahsde ̨hsr
fun : ado ̨tgado ̨hsr
celebration : ado ̨tgadehsr
fat,% pig% rinds : ^drohsr
sweat : i^daihe ̨hdr
LEXICON
0 : deverbal% noun% root deverbal% noun% root : 0 hoe : atsho^kdo ̨hsr
pants : atna^tsotr
belt : atna^gwihdr
sports,% games : atgahnyehtr hat : nahaotr
coat,% dress : agya^dawi^tr disaster : adrihwagyao ̨hsr bat% (mammal) : adra^wihsd birth : ado ̨nhehsr
shyness : adi^gro ̨hsra lunch,% groceries : ade ̨na^tr table : adekwahahsra friendship%;% also% refers% socks : ahdahdi^tr
# ; # ;
LEXICON
0 : @U.INALIEN.POSS@
0 : @U.INALIEN.UNPOSS@o+
LEXICON
!
inalienableNouns
  deverbalORoots
NSF ;
NSF ;
 NSF ;
  deverbalARoots
NSF ;
# ; # ;
NSF ; NSF ;
NSF ;
NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ;
NSF ;
NSF ; to% a% ceremonial% friend : adao^tra
inalienablePrefixes inalienableAPrefixes ; inalienableIPrefixes ;
inalienableEe ̨Prefixes ; inalienableOo ̨Prefixes ; inalienableH^CPrefixes ;
144
NSF ;
NSF ;
NSF ;
NSF ;
NSF ;
NSF ;
inalienablePrefixes ; inalienableStems ;
NSF ; NSF ;
!
LEXICON
1sA+ : g+ 1idA+ : (e)gy+ 1edA+ : (y)agy+ 1ipA+ : (e)dw+ 1epA+ : (y)agw+ 2sA+ : (h)s+ 2dA+ : (h)j+ 2pA+ : (h)sw+ 3msA+ : h+ 3fisA+ : (y)o ̨+ 3znsA+ : w+ 3mdpA+ : he ̨n+ 3fidpA+ : g a o ̨ + 3zndpA+ : g e ̨ n +
LEXICON
1sA+ : g+
1idA+ : (e)kn+ 1idA+ : (e)tn+ 1edA+ : (y)akn+ 1ipA+ : (e)dwe ̨+ 1epA+ : (y)agwe ̨+ 2sA+ : (h)s+ 2dA+ : (h)sn+ 2pA+ : (h)swe ̨+ 3msA+ : he ̨+ 3fisA+ : (y)e ̨+ 3znsA+ : ge ̨+ 3mdpA+ : had+ 3fidpA+ : gae+ 3zndpA+ : gad+
!LEXICON
!1sA+ : g+
!1idA+ : (e)kn
!1idA+ : (e)tn+
inalienableH^CCPrefixes ; inalineableNPrefixes ; inalienableYWRPrefixes ; inalienableOtherCPrefixes ;
inalienableUPrefixes ;
inalienableAPrefixes inalienableAStems ;
inalienableAStems ; inalienableAStems ;
inalienableAStems ; inalienableAStems ;
inalienableAStems ; inalienableAStems ;
inalienableAStems ; inalienableAStems ;
inalienableAStems ; inalienableAStems ;
inalienableAStems ; inalienableAStems ; inalienableAStems ;
inalienableIPrefixes inalienableIStems ;
inalienableIStems ; inalienableIStems ;
inalienableIStems ;
inalienableIStems ; inalienableIStems ;
inalienableIStems ; inalienableIStems ;
inalienableIStems ; inalienableIStems ;
inalienableIStems ; inalienableIStems ;
inalienableIStems ; inalienableIStems ; inalienableIStems ;
inalienableEe ̨Prefixes
145
!1edA+ : (y)akn+ !1ipA+ : (e)dw+ !1epA+ : (y)agw+ !2sA+ : (h)s+ !2dA+ : (h)sn+ !2pA+ : (h)sw+ !3msA+ : h+ !3fisA+ : (y)ag+ !3znsA+ : w+ !3mdpA+ : he ̨n+ !3fidpA+ : ga:g+ !3zndpA+ : ge ̨n+
LEXICON
1sA+ : g+ 1idA+ : (e)kn+ 1idA+ : (e)tn+ 1edA+ : (y)akn+ 1ipA+ : (e)gy+ 1epA+ : (y)agy+ 2sA+ : (h)s+ 2dA+ : (h)sn+ 2pA+ : (h)j+ 3msA+ : h+ 3fisA+ : (y)ag+ 3znsA+ : (y)+ 3mdpA+ : he ̨n+ 3fidpA+ : ga:g+ 3zndpA+ : ge ̨n+
!LEXICON
!1sA+ : g+
!1idA+ : kn+
!1idA+ : tn+
!1edA+ : akn+
!1ipA+ : gy+
!1epA+ : agy+
!2sA+ : s+
!2dA+ : sn+
!2pA+ : j+
!3msA+ : h+
!3fisA+ : ag+
!3znsA+ : w+
inalienableOo ̨Prefixes inalienableOo ̨Stems ;
inalienableOo ̨Stems ; inalienableOo ̨Stems ;
inalienableOo ̨Stems ; inalienableOo ̨Stems ;
inalienableOo ̨Stems ; inalienableOo ̨Stems ;
inalienableOo ̨Stems ; inalienableOo ̨Stems ;
inalienableOo ̨Stems ; inalienableOo ̨Stems ;
inalienableOo ̨Stems ; inalienableOo ̨Stems ;
inalienableOo ̨Stems ; inalienableOo ̨Stems ;
 inalienableUPrefixes
146
!3mdpA+ : he ̨n+ !3fidpA+ : ga:g+ !3zndpA+ : ge ̨n+
LEXICON
1sA+ : k+
1idA+ : (e)kni+
1idA+ : (e)tni+
1edA+ : (y)akni+
1ipA+ : (e)dwa+
1epA+ : (y)agwa+
2sA+ : (eh)s+
2dA+ : (eh)sni+
2pA+ : (eh)swa+
3msA+ : ha+
3fisA+ : (y)e+
3znsA+ : ga+
3mdpA+ : hadi+
3fidpA+ : gae+
3zndpA+ : gadi+
LEXICON
ge+
(e)kni+
(e)tni+
(y)akni+
(e)dwa+
(y)agwa+
(eh)se+
(eh)sni+
(eh)swa+
ha+
(y)e+
ga+
hadi+
gae+
gadi+
LEXICON
1sA+ : k+
1idA+ : (e)kni+
1idA+ : (e)tni+
1edA+ : (y)akni+
inalienableH^CPrefixes inalienableH^CStems ;
inalienableH^CStems ;
inalienableH^CStems ; inalienableH^CStems ;
inalienableH^CStems ; inalienableH^CStems ;
inalienableH^CStems ; inalienableH^CStems ; inalienableH^CStems ;
inalienableH^CStems ; inalienableH^CStems ;
inalienableH^CStems ; inalienableH^CStems ; inalienableH^CStems ;
inalienableH^CStems ;
inalienableH^CCPrefixes inalienableH^CCStems ;
inalienableH^CCStems ; inalienableH^CCStems ;
inalienableH^CCStems ; inalienableH^CCStems ;
inalienableH^CCStems ; inalienableH^CCStems ;
inalienableH^CCStems ; inalienableH^CCStems ;
inalienableH^CCStems ; inalienableH^CCStems ;
inalienableH^CCStems ; inalienableH^CCStems ;
inalienableH^CCStems ; inalienableH^CCStems ;
inalineableNPrefixes inalineableNStems ;
inalineableNStems ;
inalineableNStems ; inalineableNStems ;
147
1ipA+ : (e)dwa+
1epA+ : (y)agwa+
2sA+ : (eh)s+
2dA+ : (eh)sni+
2pA+ : (eh)swa+
3msA+ : ha+
3fisA+ : (y)e+
3znsA+ : ga+
3mdpA+ : hadi+
inalineableNStems ; inalineableNStems ;
inalineableNStems ; inalineableNStems ;
inalineableNStems ; inalineableNStems ;
inalineableNStems ; inalineableNStems ;
inalineableNStems ; inalineableNStems ;
inalineableNStems ;
inalienableYWRPrefixes inalienableYWRStems ;
inalienableYWRStems ;
inalienableYWRStems ; inalienableYWRStems ;
inalienableYWRStems ; inalienableYWRStems ;
inalienableYWRStems ; inalienableYWRStems ; inalienableYWRStems ;
inalienableYWRStems ; inalienableYWRStems ;
inalienableYWRStems ; inalienableYWRStems ; inalienableYWRStems ;
inalienableYWRStems ;
inalienableOtherCPrefixes inalienableOtherCStems ;
inalienableOtherCStems ; inalienableOtherCStems ;
inalienableOtherCStems ; inalienableOtherCStems ;
inalienableOtherCStems ; inalienableOtherCStems ;
inalienableOtherCStems ; inalienableOtherCStems ;
inalienableOtherCStems ; inalienableOtherCStems ;
inalienableOtherCStems ; inalienableOtherCStems ;
148
3fidpA+
3zndpA+
LEXICON
1sA+ : g+
1idA+ : (e)kni+
1idA+ : (e)tni+
1edA+ : (y)akni+
1ipA+ : (e)dwa+
1epA+ : (y)agwa+
2sA+ : (eh)s+
2dA+ : (eh)sni+
2pA+ : (eh)swa+
3msA+ : ha+
3fisA+ : (y)e+
3znsA+ : ga+
3mdpA+ : hadi+
: gae+ : gadi+
3fidpA+
3zndpA+
LEXICON
1sA+ : ge+
1idA+ : (e)kni+
1idA+ : (e)tni+
1edA+ : (y)akni+
1ipA+ : (e)dwa+
1epA+ : (y)agwa+
2sA+ : (eh)se+
2dA+ : (eh)sni+
2pA+ : (eh)swa+
3msA+ : ha+
3fisA+ : (y)e+
3znsA+ : ga+
3mdpA+ : hadi+
: gae+ : gadi+
3fidpA+ : gae+
3zndpA+ : gadi+
LEXICON
inalienableOtherCStems ; inalienableOtherCStems ;
inalienableStems inalienableAStems ; inalienableIStems ; inalienableOo ̨Stems ; inalienableH^CStems ; inalienableH^CCStems ; inalineableNStems ; inalienableYWRStems ; inalienableOtherCStems ;
LEXICON
0 : inalienable% noun% root% beginning% with% %+a inalienable% noun% root% beginning% with% %+a : 0 on% your% ears : aho ̨hd
on% your% foot : ahsi^d
on% my% toes : ahyagwiy
LEXICON
0 : inalienable% noun% root% beginning% with% %+i inalienable% noun% root% beginning% with% %+i : 0 (on)% my% skin : ihn
#;
#; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
#;
#; inalienableSuffix ;
#;
#; inalienableSuffix ;
# ; # ;
# ; # ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ;
!LEXICON
LEXICON
0 : inalienable% noun% root% beginning% with% %+o ̨ inalienable% noun% root% beginning% with% %+o ̨ : 0 on% your% knee : o ̨ts
LEXICON
0 : inalienable% noun% root%
0 : inalienable% noun% root%
inalienable% noun% root% beginning% with% %+h : 0 inalienable% noun% root% beginning% with% %+^C : 0 on% its% throat : ha^d
on% your% groin : han
on% your% ribs : hdega:
149
inalienableAStems
inalienableIStems
inalienableEe ̨Stems
inalienableOo ̨Stems
inalienableH^CStems !12 beginning% with% %+h beginning% with% %+^C
on% your% anus : hetga^
on% your% buttocks : hna^ts
on% your% shoulders : hne ̨s
on% your% leg : hsin
on% your% hand : hsohd
on% your% upper% lip : hso ̨hga:
on% your% lip : hsohgw
on% your% (p)% elbows : hyohs
on% its% tail% (pertaining% to% birds) : ^yohgw
LEXICON inalineableNStems !7 0 : inalienable% noun% root% beginning% with% %+n inalienable% noun% root% beginning% with% %+n : 0 on% your% arm : ne ̨tsh
on% your% head : no ̨^a:
on% your% breast : no ̨^gw
on% your% teeth : no^j
on% your% nipples : no ̨nhe^dr on% his% penis,% phallus : nr on% your% shin : nye ̨d
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ;
# ; # ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ;
#; #;
#;
#; #;
#; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ;
LEXICON inalienableYWRStems !10 inalienable% noun% root% beginning% with% %+y : 0 inalienable% noun% root% beginning% with% %+w : 0 inalienable% noun% root% beginning% with% %+r : 0 0 : inalienable% noun% root% beginning% with% %+y 0 : inalienable% noun% root% beginning% with% %+w 0 : inalienable% noun% root% beginning% with% %+r on% your% body : ya^d
on% your% waist : ya^ga: on% your% gums : yo^d
on% your% cheeks : yo^gw on% your% chin : yo^ts
on% your% chin : yu^ts
on% your% tongue : we ̨^nahs on% your% tongue : we ̨^nohs on% your% thumb : we ̨^yo ̨hga: on% your% heel : rad
on% the% ball% of% my% foot : ragwahd
LEXICON inalienableOtherCStems !14
inalienable% noun% root% beginning% with% %+g : 0 # ; inalienable% noun% root% beginning% with% %+^V : 0 # ;
150
inalienable% noun% root% beginning% with% %+k : 0 inalienable% noun% root% beginning% with% %+w% : 0 inalienable% noun% root% beginning% with% %+j : 0
# ; # ;
# ;
# ; # ;
# ; # ;
# ; inalienableSuffix ;
on% your% eyelashes : gahehd
on% your% eyebrow : gahgwaohs
on% your% hairline,% upper% brow%;% forehead : ge ̨^sd inalienableSuffix ;
0 : inalienable% noun% root% 0 : inalienable% noun% root% 0 : inalienable% noun% root% 0 : inalienable% noun% root% 0 : inalienable% noun% root% on% your% eyes : gah
beginning% with% %+g beginning% with% %+^V beginning% with% %+k beginning% with% %+w beginning% with% %+j
on% the% bridge% of% my% nose : go ̨^d on% your% face : go ̨hs
on% its% whiskers : go ̨hsto ̨^
on% my% chest : ^ahs
on% your% belly : kse^d on% your% ankle : jaoho^gw on% my% nail : ji^ehd
on% my% nail : ji^ohd
on% your% hip : jisgo^gw
LEXICON
on% my% inner% thigh : ^nho ̨hsga: inalienableSuffix ;
on% your% nose : ^nyo ̨hs
on% your% neck% (front% of% the% neck) : hnya^s on% its% beak : hnye ̨dahs
his% testicles : hsgwa:
on% your% calf% (of% leg) : hsna^d
on% your% upper% back : hswa^n
on% your% upper% back : hswe^n
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ; inalienableSuffix ;
locativeSuffix ; NSF ;
LEXICON
0 : @U.INALIEN.POSS@
0 : @U.INALIEN.UNPOSS@
LEXICON
+loc : +a^geh
LEXICON
inalienableSuffix
locativeSuffix
      # ;
#;
inalienableH^CCStems !8
allBasicNouns basicNounPossessedPrefixes ;
151
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
inalienableSuffix ;
inalienableSuffix ; inalienableSuffix ;
LEXICON
1sP+ :
1dP+ :
1pP+ :
2sP+ :
2dP+ :
2pP+ :
3msP+ :
3fisP+ :  0
3znsP+ :  0
3mdpP+ :  0
3fidpP+ :
3zndpP+ :
LEXICON
basicNounUnpossessedPrefixes ;
basicNounPossessedPrefixes wagPrefixes ;
yo ̨kniPrefixes ; yo ̨gwaPrefixes ; saPrefixes ; sniPrefixes ; swaPrefixes ;
          hoPrefixes ;
           yagoPrefixes ;
           yoPrefixes ;
           hodiPrefixes ;
yagodiPrefixes ; yodiPrefixes ;
wagPrefixes basicNounsAStems ; basicNounsIStems ;
basicNounsEStems ; basicNounse ̨Stems ; basicNounsOStems ; basicNounso ̨Stems ;
basicNounshor^CornStems ; basicNounsyorwStems ;
basicNounsCOtherStems ;
yo ̨kniPrefixes basicNounsAStems ; basicNounsIStems ;
basicNounsEStems ; basicNounse ̨Stems ; basicNounsOStems ; basicNounso ̨Stems ; basicNounsOtherStems ;
yo ̨gwaPrefixes basicNounsAStems ;
basicNounsIStems ; basicNounsEStems ; basicNounse ̨Stems ; basicNounsOStems ;
152
0 0 ! ! ! ! 0 0 0
0
: (w)ag+
: (w)ag+
: (w)ak+
: (w)ag+
: (w)age+
LEXICON
0 : (y)o ̨gy+ 0 : (y)o ̨kn+ !0 : (y)o ̨kn+ !0 : (y)o ̨kn+ !0 : (y)o ̨kn+ !0 : (y)o ̨kn+ 0 : (y)o ̨kni+
LEXICON
0 : (y)o ̨gw+ 0 : (y)o ̨gwe ̨+ !0 : (y)o ̨gw+ !0 : (y)o ̨gw+ !0 : (y)o ̨gy+
0 0 0 0 0 0
0 0
!0 : (y)o ̨gy+ 0 : (y)o ̨gwa+
LEXICON 0 : s+ 0:se ̨+ !0:s+ !0:s+ !0:s+ !0:s+ 0:sa+
LEXICON 0 : j+ 0:sn+ !0:sn+ !0:sn+ !0:sn+ !0:sn+ 0:sni+
LEXICON 0 : sw+ 0 : swe ̨+ !0:sw+ !0:sw+ !0 : j+ !0 : j+ 0:swa+
LEXICON
0 : ho+
0 : ho+
!0 : haw+
!0 : haw+
!0 : h+
!0 : h+
0 : ho+
LEXICON
0 : (ya)go+
basicNounso ̨Stems ; basicNounsOtherStems ;
saPrefixes basicNounsAStems ;
basicNounsIStems ; basicNounsEStems ; basicNounse ̨Stems ; basicNounsOStems ; basicNounso ̨Stems ; basicNounsOtherStems ;
sniPrefixes basicNounsAStems ;
basicNounsIStems ; basicNounsEStems ; basicNounse ̨Stems ; basicNounsOStems ; basicNounso ̨Stems ; basicNounsOtherStems ;
swaPrefixes basicNounsAStems ;
basicNounsIStems ; basicNounsEStems ;
basicNounse ̨Stems ; basicNounsOStems ; basicNounso ̨Stems ;
basicNounsOtherStems ;
hoPrefixes basicNounsAStems ;
basicNounsIStems ; basicNounsEStems ;
basicNounse ̨Stems ; basicNounsOStems ;
basicNounso ̨Stems ; basicNounsOtherStems ;
yagoPrefixes basicNounsAStems ;
153
0 : (ya)go+
!(0 : ya)gaw+
!0 : (ya)gaw+
!0 : (ya)g+
!0 : (ya)g+
0 : (ya)go+
LEXICON
0 : (y)o+
0 : (y)o+
!0 : (y)aw+
!0 : (y)o+
!0 : (y)+
!0 : (y)+
0 : (y)o+
LEXICON
0 : hon+
0 : hod+
!0 : hon+
!0 : hon+
!0 : hon+
!0 : hon+
0 : hodi+
LEXICON
0 : (ya)gon+
0 : (ya)god+
!0 : (ya)gon+
!0 : (ya)gon+
!0 : (ya)gon+
!0 : (ya)gon+
0 : (ya)godi+
LEXICON
0 : (y)on+
0 : (y)od+
!0 : (y)on+
!0 : (y)on+
!0 : (y)on+
!0 : (y)on+
0 : (y)odi+
basicNounsIStems ; basicNounsEStems ; basicNounse ̨Stems ;
basicNounsOStems ; basicNounso ̨Stems ; basicNounsOtherStems ;
yoPrefixes basicNounsAStems ;
basicNounsIStems ; basicNounsEStems ;
basicNounse ̨Stems ; basicNounsOStems ;
basicNounso ̨Stems ; basicNounsOtherStems ;
hodiPrefixes basicNounsAStems ;
basicNounsIStems ; basicNounsEStems ;
basicNounse ̨Stems ; basicNounsOStems ; basicNounso ̨Stems ; basicNounsOtherStems ;
yagodiPrefixes basicNounsAStems ; basicNounsIStems ;
basicNounsEStems ; basicNounse ̨Stems ; basicNounsOStems ; basicNounso ̨Stems ; basicNounsOtherStems ;
yodiPrefixes basicNounsAStems ; basicNounsIStems ;
basicNounsEStems ; basicNounse ̨Stems ; basicNounsOStems ; basicNounso ̨Stems ; basicNounsOtherStems ;
154
LEXICON
3znA+ : ga+
3znP+ : o+
3znA+ : a+
basicNounUnpossessedPrefixes gaBNouns ;
          oBNouns ;
          aBNouns ;
nullBNouns ;
! Grouping by initial stem vowel for possessed basic nouns LEXICON basicNounshor^CornStems
nullBNounshVStems ; gaoh^CNouns ; normalOBNounsh^CnStems ; normalGaBNounsh^CnStems ;
LEXICON basicNounsyorwStems normalOBNounsYWStems ;
normalGaBNounsYWStems ;
LEXICON basicNounsCOtherStems gaoJNouns ;
normalOBNounsOtherCStems ; normalGaBNounsOtherCStems ; oLoanWords ; nullBNounshCStems ;
LEXICON basicNounsAStems aoBNouns ;
normalABNouns ; normalOBNounsAStems ;
LEXICON basicNounsIStems normalOBNounsIStems ;
normalGaBNounsIStems ;
!LEXICON basicNounsEStems !#;
!LEXICON basicNounse ̨Stems !#;
155
!LEXICON basicNounso ̨Stems !#;
LEXICON basicNounsOtherStems oLoanWords ;
nullBNouns ;
gaoBNouns ; normalOBNounsOtherStems ; normalGaBNounsOtherStems ;
! End grouping by stem vowel for possessed basic nouns
LEXICON gaBNouns normalGaBNouns ;
gaoBNouns ;
LEXICON oBNouns normalOBNouns ;
                            gaoBNouns ;
                            aoBNouns;
                            nullBNouns;
                            oLoanWords;
LEXICON aBNouns normalABNouns ;
aoBNouns ;
LEXICON oLoanWords 0 : basic% noun% root% (loan% words) basic% noun% root% (loan% words) : 0 tea : di:
cheese : ji:s
LEXICON
0 : basic% noun% root% (unprefixed) basic% noun% root% (unprefixed) : 0
nullBNounshVStems ; nullBNounshCStems ;
156
# ; # ;
# ; # ;
# ; # ;
nullBNouns
LEXICON nullBNounshVStems basic% noun% root% (beginning% in% %+hV) : 0 potato : ho ̨na^d NSF ;
LEXICON nullBNounshCStems basic% noun% root% (beginning% in% %+hCC) : 0
# ;
# ;
colts% foot : hsgwae ̨^d LEXICON
NSF ;
gaoBNouns gaoh^CNouns ; gaoJNouns ;
LEXICON
basic% noun% root% (beginning% in% %+j% or% hCC% that% takes% ga%+% or% o%+) : 0 # ; 0 : basic% noun% root% (beginning% in% %+j% or% hCC% that% takes% ga%+% or% o%+) # ;
nakedness%;% nudity : ji^gw
straight% pin%;% pin%;% brooch%;% safety% pin : jihoha: dirty% clothes : hsdagw
beak : hnye ̨dahs
clothespin : ^wahsd
cargo%;% bundle%;% load : hehn a% motor%;% engine : ho ̨^jihsd
NSF ; NSF ;
gaoJNouns
NSF ;
NSF ;
NSF ; NSF ;
LEXICON
0 : basic% noun% root% (beginning% in% %+hV% or% ^CV% that% takes% ga%+% or% o%+) basic% noun% root% (beginning% in% %+hV% or% ^CV% that% takes% ga%+% or% o%+) : 0
gaoh^CNouns
LEXICON aoBNouns
0 : basic% noun% root% (beginning% in% %+a% that% takes% o%+% or% a%+) basic% noun% root% (beginning% in% %+a% that% takes% o%+% or% a%+) : 0 ladder%;% stairs : ado ̨hne^ts NSF ;
LEXICON normalABNouns
0 : basic% noun% root% (beginning% basic% noun% root% (beginning% in%
in% %+a% that% takes% a%+) %+a% that% takes% a%+) : 0
# ; # ;
fence : ade ̨he ̨
blouse%;% middy : adehsw
lunch%;% groceries : ade ̨na^tr
skate : ado^jin
bow% (as% in% bow% and% arrow) : adoda: axe%;% tomahawk : adoge ̨
NSF ;
NSF ;
NSF ;
NSF ;
NSF ;
157
NSF ; NSF ;
hunt : adowado ̨:
luck : adra^sw
shoes : ahdahgw
clothing%;% clothes : ahgwe ̨ny roof : ahsgw
closthes : atro ̨ni^d calendar : atsoge ̨ flower : awe ̨he ̨ weeds : awe ̨nohgr
LEXICON normalOBNouns
LEXICON
NSF ;
eyebrow : gahgwaohs
grass : gaho^j
cadaver%;% dead% body : ganye ̨^d
hair%;% a% rag%;% (it% is)% ragged%;% tattered : ge^a:
cotton% batting%;% q-tips : go ̨^dr a% limb%;% twig%;% branch : gwiy leaves% of% corn : jao ̨s curtains%;% lace : ji^a:
the% brain : ji^dro ̨wahd
bug%;% insect%;% worm : ji^no ̨w gonorrhea : jigwe ̨d
porridge%;% mush : jihgw
mush : jihsgw
cluster% of% stars%;% star : jihso ̨da:
NSF ;
NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ;
normalOBNounsAStems ; normalOBNounsIStems ; normalOBNounsOtherStems ;
normalOBNounsOtherStems normalOBNounsh^CnStems ; normalOBNounsYWStems ; normalOBNounsOtherCStems ;
LEXICON
0 : basic% noun% root% (beginning% with% a% C% other% than% %+y/w/r/% taking% o%+) basic% noun% root% (beginning% with% a% C% other% than% %+^C/y/w% taking% o%+) : 0 # ;
sod%;% moss : ^o ̨hgwa:
vines : ^o ̨hs
a% price% (on% it) : ga:
pants : ga^d
a% tear% (in% one’s% eye) : gahdr
eyelash%;% the% stem% of% a% berry%;% the% eye% of% the% corn% kernel : gahehd NSF ;
normalOBNounsOtherCStems
NSF ; NSF ;
NSF ;
158
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ;
NSF ;
NSF ;
# ;
bell : jihwe ̨d
salt : jike^d
nasal% mucous : jino ̨hgr
yellow : jitgwa:
a% nutshell : kd
root%;% edible%
stump%;% knots%
its% food : kw
willow%;% nape%
snake : shaihsd
flour%;% powder
sumac : tgo^d
housefly%;% fly
mist%;% steam%;% fog : tsad syrup%;% honey%;% gum : tsehsd peach% pit : tsge ̨^e ̨:
balsam% fir : tsgo^d
saliva%;% spit%;% sputum : tsgr
NSF ; NSF ;
NSF ; NSF ;
other%;% another : y
body : ya^d
basement%;% track%;% ditch : yad pants : yahgw
NSF ;
NSF ;
NSF ;
NSF ;
roots% (pepper% roots%;% turnips%;% carrots) : kdeh
NSF ;
in% a% tree : kjin of% neck : sehd
: te^tr
: tre ̨^d
NSF ; NSF ;
NSF ; NSF ;
NSF ;
tire%;% its% track%;% anything% that% leaves% tracks : yan
beads : ye ̨:
tobacco%;% cigarettes : ye ̨^gw
NSF ;
NSF ; NSF ;
159
NSF ; NSF ;
wood%;% firewood bandage : ye ̨hsa:
a% dead% body%;%
cheeks : yo^gw
guts%;% intestines : yo ̨w
NSF ; NSF ;
: ye ̨d
cadaver : yo ̨^d
NSF ;
NSF ; NSF ;
normalOBNounsh^CCStems ;
LEXICON normalOBNounsYWStems
0 : basic% noun% root% (beginning% with% %+y/w/r% that% takes% o%+) basic% noun% root% (beginning% with% %+y/w/r% that% takes% o%+) : 0
air%;% wind%;% a% moth : wa:
a% peeling : wa^wihsd
peelings%;% bark% of% a% tree : wajihsd
fin% of% a% fish%;% wings : way
wood% chips : hwe ̨^hga:
word%;% voice%;% speech : we ̨n
ice : widr
sleep%;% a% dream : widre ̨hd
young%;% offspring% (i.e.% of% an% animal)%;% baby : wiy
NSF ; NSF ;
NSF ; NSF ;
NSF ;
NSF ;
NSF ;
NSF ;
NSF ; NSF ;
NSF ;
NSF ; NSF ;
NSF ; NSF ;
message%;% it% matters%;% it% is% its% fault%;% word%;% affair%;% business : rihw
LEXICON normalOBNounsh^CCStems
leaf : nrahd NSF ;
tripe% (cow% stomach% lining)%;% animal% stomache : nrege ̨^d tapeworm : nre ̨he ̨ NSF ;
vomit%;% vomitus : nya^gw
native% mush% dishes% made% with% corn : nyah
stem : nye ̨d NSF ;
lumber% logs% (large)%;% timber : nhahd
snow%;% snowflake : ^gr
lumber% logs% (large)%;% timber : ^nhahgy
tail% of% an% animal : ^nhe ̨hts
tail% of% an% animal : ^nhwe ̨hts
egg : ^nho ̨hs
bur : ^nho ̨hd
onion : ^no ̨hs
nutmeat : hnya:
flint% corn% soup : hnye:h
nut : hnyo^gw
squash%;% melon : hnyo ̨hs
rain : hsda:
scale% (of% a% fish) : hsda:
scale% (of% a% fish) : hsdai
necklace : hsdao^gw
rust : hsge ̨^dr
louse : hsgeh
branch : hsgoh
wrinkles : hsgwi^dr
bone%;% bare% bones : hsgye ̨^da:
blue% beech% (tree) : hsgyo ̨^w
dough : hshe^
hamstrings%;% calves% (of% the% legs)%;% outer% thighs : hsna^d
NSF ;
NSF ;
straw : hsto ̨dr coal : hswe ̨^d
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ;
NSF ;
NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ;
NSF ; NSF ;
NSF ;
normalOBNounsh^CnStems NSF ;
NSF ;
NSF ; NSF ;
160
LEXICON
0 : basic% noun% root% (beginning% with% %+^CV/hCV/n% that% takes% o%+) basic% noun% root% (beginning% with% %+^CV/hCV/n% that% takes% o%+) : 0
bread : na^da:
horns%;% antlers : na^ga: cotton% batting : na^gwiy a% mattress : na^sgw
NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ;
clay%;% plaster%;% white-wash : nawad evergreen%;% conifer : ne ̨^d
roe% (fish% eggs) : ne^da:
morel% mushroom : negre ̨d
NSF ; NSF ;
peas : negw
corn : ne ̨he ̨:
hickory% wood%;% stick : ne ̨noga:
NSF ; NSF ;
pills : ne ̨nyo^gw milk : no ̨^gw catfish : no ̨ge ̨^d corn% cob : no ̨hgwe ̨ a% husk : no ̨ny
NSF ; NSF ;
NSF ; NSF ;
NSF ; % is% fat%;% gristle%;% rind : ^do ̨dr
NSF ;
NSF ;
sand : ^nehs
nudity : ^nest
nudity : ^nost
stem%;% hull% of% berries : ^nihsda:
skirt%;% tail%;% feather : ^yohgw
quill%;% plume%;% feather%;% voice%;% throat%;% larynx%;% esophagus : ha^d
a% parable%;% tale%;% story%;% legend : ^ga: ashes%;% bullet%;% dust : ^ge ̨he ̨
NSF ;
NSF ;
road : hah
soot : hakd
corn% husk : he^a:
dirt%;% earth%;% ground%;% land : hehd
fur : he ̨hda: NSF ; decayed% tree%;% log%;% wood%;% board : hehs (raw)% sausage%;% bologna%;% wieners : hets
NSF ; NSF ;
one% corn% stalk : thorn%;% thistle : cloud : hji^gr grease%;% oil : hn
a% bush%;% a% whip basswood : hodr slippery% elm : hohsgr pelt : hohwa:
mouth : hsa:
beans : hsahe^d
frost : hse ̨he ̨
thread%;% string%;% cord : hsiy maple : hwahd
a% splint : hwe ̨^ga: corn% ears : hwe ̨hda: foam : hwe ̨hsd
NSF ; NSF ;
NSF ;
hey hikd
: ho ̨d
NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ;
NSF ;
NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ;
NSF ;
NSF ;
NSF ; NSF ;
161
NSF ;
NSF ; NSF ;
NSF ;
NSF ;
NSF ; NSF ;
NSF ;
LEXICON normalOBNounsAStems
0 : basic% noun% root% (beginning% with% %+a% that% takes% o%+) basic% noun% root% (beginning% with% %+a% that% takes% o%+) : 0
# ; # ;
rust : ahsge ̨^dr
snowsnake%;% pole : a^e ̨n NSF ; cocoon%;% nest%;% hive%;% bee-hive : adehshe ̨
wall : ade ̨nihs NSF ; number : ahshed
fruit : ahy
NSF ; NSF ;
LEXICON normalOBNounsIStems
0 : basic% noun% root% (beginning% with% %+i% that% takes% o%+) basic% noun% root% (beginning% with% %+i% that% takes% o%+) : 0 feces%;% shit%;% excrement : i^d
clay%;% mud%;% mortar : i^da:
flame : i^do ̨hgw
fish : ijo ̨^d
# ;
# ;
NSF ;
normalGaBNouns normalGaBNounsIStems ; normalGaBNounsOtherStems ;
normalGaBNounsOtherStems normalGaBNounsh^CnStems ; normalGaBNounsYWStems ; normalGaBNounsOtherCStems ;
LEXICON
0 : basic% noun% root% (beginning% with% a% C% other% than% %+^C/y/w% taking% ga%+) basic% noun% root% (beginning% with% a% C% other% than% %+^C/y/w% taking% ga%+) : 0
LEXICON
LEXICON
basket : ^ahdr
white% oak : ga^d
eye% glasses : gahihsd shovel : gahwehs
paddle : gawehs
tie%;% scarf : gehd pillow%;% cushion : go ̨^dr the% mask : go ̨hs
dish%;% plate%;% bowl : je ̨ the% devil : jihay
lamp : jihsd
hammer : jihw
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
NSF ; NSF ;
162
normalGaBNounsOtherCStems
NSF ; NSF ;
NSF ;
# ; # ;
food : kw
a% handle
wallet%;%
bottle%;%
one% animal%;% pet : tsene ̨^
doll : ya^d
NSF ; NSF ;
NSF ;
purse%;% pocketbook%;% suitcase : tgwe ̨^d NSF ;
: tge ̨hets jar : tse^d
NSF ;
LEXICON
0 : basic% noun% root% (beginning% with% %+y/w/r% that% takes% ga%+) basic% noun% root% (beginning% with% %+y/w/r% that% takes% ga%+) : 0 bag%;% mattress%;% tick%;% pouch% (ie.% a% mattress% bag% into%
a% rope : Catsge ̨^d
tin%;% metal : Cihsd leggings : Cisr
sleep%;% a% dream : Cidre ̨hd song : re ̨n
an% agreement : rihwihs log : ro ̨d
NSF ; NSF ;
nails%;% wire%;% needle : hso ̨wahd car%;% truck%;% vehicle : ^drehd diaper : ^droda
skirt%;% slip : ^ka:
NSF ;
NSF ; NSF ;
marriage : ^na^gw
the% mind : ^nigo ̨h
earrings : ^wahsha:
Avocet% blue% stocking% (bird) : ^yohgw pail : na^j
cup : na^johsgw
town%;% community : nad comb : nahd
bass% drum : nahgw
normalGaBNounsYWStems
which% straw% is% stuffed) : ya: NSF ; a% celestial% orb% (ie.% the% sun%;% the% moon) : Cagwa:
NSF ; NSF ;
NSF ;
NSF ; NSF ;
normalGaBNounsh^CnStems
LEXICON
0 : basic% noun% root% (beginning% with% %+^C/n/h% taking% ga%+) # ; basic% noun% root% (beginning% with% %+^C/n/h% taking% ga%+) : 0 # ; forest%;% bush : had
elm : ho ̨ga:
boat : ho ̨w
headdress : hsdow
a% name : hse ̨n
stone%;% rock%;% boulder%;% bullet : hsgwa:
NSF ; NSF ;
NSF ; NSF ;
NSF ;
NSF ;
NSF ;
163
NSF ;
NSF ;
NSF ;
NSF ;
NSF ;
NSF ;
NSF ; NSF ;
NSF ;
NSF ;
NSF ;
tame% animal%;% pet%;% domestic% animal : nahsgw a% peacock%;% bride%;% boastfulness : nai^d
bed : nakd
a% board :
NSF ;
nehsda:
NSF ;
NSF ; NSF ;
NSF ;
# ; # ;
NSF ;
leather%;%
porcupine : nhe^d
stick : nhy
a% house : no ̨hs
a% dance : no ̨ny
guitar%;% any% string% instrument%;% (refers% to%rounded% back% of% a% turtle) : now NSF ; spoon%;% canoe%;% birch% bark% canoe : nyod NSF ;
hide : nehw
NSF ;
LEXICON normalGaBNounsIStems
0 : basic% noun% root% (beginning% with% %+i% that% takes% ga%+) basic% noun% root% (beginning% with% %+i% that% takes% ga%+) : 0
bottle%;% jar : itse^d
mattress%;% sleeping% mat : itsga:
NSF ;
LEXICON NSF +NSF : +a^
# ;
NSF ; NSF ;
#;
164
NSF ;
Appendix C
Test Cases
This appendix contains tables listing all the surface and underlying forms that were used to the validity of my machine. There are two sets of data, one for use with testing the abstract approach and one for testing the concrete approach. Each data set consists of six series of tables; one for each type of noun (the tables are divided by prefix type where applicable: ie. a separate table for possessed an unpossessed basic nouns).
As described in §7.2.1 the data from the surface column of each table was run through the machine, and compared to the expected output from the underlying column. If there was a mismatch or missing word, the program reported an error. This process was then repeated taking the data from the underlying column, running it through the machine and comparing the output with the expected result from the surface column.
C.1 Data for the Abstract Approach
Table C.1: Unpossessed Basic Nouns
Surface
Underlying
ho ̨ na^da^
ho ̨ na^d+a^
odi:
o+di:
ga^wahsda^
ga+^wahsd+a^
o^wahsda^
o+^wahsd+a^
gahsdagwa^
ga+hsdagw+a^
ohsdagwa^
o+hsdagw+a^
ado ̨ hne^tsa^
a+ado ̨ hne^ts+a^
awe ̨ nohgra^
a+awe ̨ nohgr+a^
o^nhahgya^
o+^nhahgy+a^
ohya^
o+ahy+a^
ohwe ̨ hsda^
o+hwe ̨ hsd+a^
Surface
Underlying
hsgwae ̨ ^da^
hsgwae ̨ ^d+a^
oji:s
o+ji:s
gahehna^
ga+hehn+a^
ohehna^
o+hehn+a^
gaji^gwa^
ga+ji^gw+a^
oji^gwa^
o+ji^gw+a^
o d o ̨ h n e ^ t s a ^
o+ado ̨ hne^ts+a^
adra^swa^
a+adra^sw+a^
onhahda^
o+nhahd+a^
oga:^
o+ga:+a^
o^da^
o+i^d+a^
0This is an incorrect form that was used during the testing. This underscores the fact that despite using a computer to check for errors, work is always subject to human error. Please see the discussion in §7.2.1 for more information.
165
Unpossessed Basic Nouns Continued
Surface
Underlying
okwa^
o+kw+a^
oihwa^
o+rihw+a^
otsgra^
o+tsgr+a^
owiya^
o+wiy+a^
oya^da^
o+ya^d+a^
ga:gwa:^
ga+Cagwa:+a^
gahso ̨ wahda^
ga+hso ̨ wahd+a^
gaje ̨^
ga+je ̨+a^
gana^ja^
ga+na^j+a^
gatge ̨hetsa^
ga+tge ̨hets+a^
Surface
Underlying
ona^da:^
o+na^da:+a^
osehda^
o+sehd+a^
owa:^
o+wa:+a^
oya^
o+y+a^
ga^wahsha:^
ga+^wahsha:+a^
gaga^da^
ga+ga^d+a^
ge ̨tsga:^
ga+itsga:+a^
gakwa^
ga+kw+a^
gao ̨ da^
ga+ro ̨ d+a^
gaya:^
ga+ya:+a^
Table C.2: Possessed Basic Nouns
Surface
Underlying
ako ̨ na^da^
(w)ag+ho ̨ na^d+a^
o ̨ gwaho ̨ na^da^
(y)o ̨ gwa+ho ̨ na^d+a^
sniho ̨ na^da^
sni+ho ̨ na^d+a^
hoho ̨ na^da^
ho+ho ̨ na^d+a^
oho ̨ na^da^
(y)o+ho ̨ na^d+a^
g o d i h o ̨ n a ^ d a ^
( y a ) g o d i + h o ̨ n a ^ d + a ^
agehsgwae ̨ ^da^
(w)ag+hsgwae ̨ ^d+a^
o ̨ gwahsgwae ̨ ^da^
(y)o ̨ gwa+hsgwae ̨ ^d+a^
snihsgwae ̨ ^da^
sni+hsgwae ̨ ^d+a^
hohsgwae ̨ ^da^
ho+hsgwae ̨ ^d+a^
ohsgwae ̨ ^da^
(y)o+hsgwae ̨ ^d+a^
g o d i h s g w a e ̨ ^ d a ^
( y a ) g o d i + h s g w a e ̨ ^ d + a ^
akwahsda^
(w)ag+^wahsd+a^
o ̨ gwa^wahsda^
(y)o ̨ gwa+^wahsd+a^
sni^wahsda^
sni+^wahsd+a^
ho^wahsda^
ho+^wahsd+a^
o^wahsda^
(y)o+^wahsd+a^
godi^wahsda^
(ya)godi+^wahsd+a^
akehna^
(w)ag+hehn+a^
o ̨ gwahehna^
(y)o ̨ gwa+hehn+a^
snihehna^
sni+hehn+a^
Surface
Underlying
o ̨ kniho ̨ na^da^
(y)o ̨ kni+ho ̨ na^d+a^
saho ̨ na^da^
sa+ho ̨ na^d+a^
swaho ̨ na^da^
swa+ho ̨ na^d+a^
goho ̨ na^da^
(ya)go+ho ̨ na^d+a^
h o d i h o ̨ n a ^ d a ^
h o d i + h o ̨ n a ^ d + a ^
o d i h o ̨ n a ^ d a ^
( y ) o d i + h o ̨ n a ^ d + a ^
o ̨ knihsgwae ̨ ^da^
(y)o ̨ kni+hsgwae ̨ ^d+a^
sahsgwae ̨ ^da^
sa+hsgwae ̨ ^d+a^
swahsgwae ̨ ^da^
swa+hsgwae ̨ ^d+a^
gohsgwae ̨ ^da^
(ya)go+hsgwae ̨ ^d+a^
h o d i h s g w a e ̨ ^ d a ^
h o d i + h s g w a e ̨ ^ d + a ^
o d i h s g w a e ̨ ^ d a ^
( y ) o d i + h s g w a e ̨ ^ d + a ^
o ̨ kni^wahsda^
(y)o ̨ kni+^wahsd+a^
sa^wahsda^
sa+^wahsd+a^
swa^wahsda^
swa+^wahsd+a^
go^wahsda^
(ya)go+^wahsd+a^
hodi^wahsda^
hodi+^wahsd+a^
odi^wahsda^
(y)odi+^wahsd+a^
o ̨ knihehna^
(y)o ̨ kni+hehn+a^
sahehna^
sa+hehn+a^
swahehna^
swa+hehn+a^
166
Possessed Basic Nouns Continued
Surface
Underlying
hohehna^
ho+hehn+a^
ohehna^
(y)o+hehn+a^
godihehna^
(ya)godi+hehn+a^
agejihoha:^
(w)ag+jihoha:+a^
o ̨ g w a j i h o h a : ^
(y)o ̨ gwa+jihoha:+a^
snijihoha:^
sni+jihoha:+a^
hojihoha:^
ho+jihoha:+a^
ojihoha:^
(y)o+jihoha:+a^
godijihoha:^
(ya)godi+jihoha:+a^
agado ̨ hne^tsa^
(w)ag+ado ̨ hne^ts+a^
o ̨ gwado ̨ hne^tsa^
(y)o ̨ gwa+ado ̨ hne^ts+a^
jado ̨ hne^tsa^
sni+ado ̨ hne^ts+a^
h o d o ̨ h n e ^ t s a ^
ho+ado ̨ hne^ts+a^
o d o ̨ h n e ^ t s a ^
(y)o+ado ̨ hne^ts+a^
gonado ̨ hne^tsa^
( y a ) g o d i + a d o ̨ h n e ^ t s + a ^
*age^nho ̨ hsa^1
(w)ag+^nho ̨ hs+a^
o ̨ gwa^nho ̨ hsa^
(y)o ̨ gwa+^nho ̨ hs+a^
sni^nho ̨ hsa^
sni+^nho ̨ hs+a^
ho^nho ̨ hsa^
ho+^nho ̨ hs+a^
o^nho ̨ hsa^
(y)o+^nho ̨ hs+a^
g o d i ^ n h o ̨ h s a ^
( y a ) g o d i + ^ n h o ̨ h s + a ^
age^o ̨ hgwa:^
(w)ag+^o ̨ hgwa:+a^
o ̨ gwa^o ̨ hgwa:^
(y)o ̨ gwa+^o ̨ hgwa:+a^
sni^o ̨ hgwa:^
sni+^o ̨ hgwa:+a^
ho^o ̨ hgwa:^
ho+^o ̨ hgwa:+a^
o^o ̨ hgwa:^
(y)o+^o ̨ hgwa:+a^
g o d i ^ o ̨ h g w a : ^
( y a ) g o d i + ^ o ̨ h g w a : + a ^
agenhahda^
(w)ag+nhahd+a^
o ̨ gwanhahda^
(y)o ̨ gwa+nhahd+a^
sninhahda^
sni+nhahd+a^
honhahda^
ho+nhahd+a^
onhahda^
(y)o+nhahd+a^
godinhahda^
(ya)godi+nhahd+a^
agega^da^
(w)ag+ga^d+a^
o ̨ gwaga^da^
(y)o ̨ gwa+ga^d+a^
sniga^da^
sni+ga^d+a^
hoga^da^
ho+ga^d+a^
oga^da^
(y)o+ga^d+a^
Surface
Underlying
gohehna^
(ya)go+hehn+a^
hodihehna^
hodi+hehn+a^
odihehna^
(y)odi+hehn+a^
o ̨ knijihoha:^
(y)o ̨ kni+jihoha:+a^
sajihoha:^
sa+jihoha:+a^
swajihoha:^
swa+jihoha:+a^
gojihoha:^
(ya)go+jihoha:+a^
hodijihoha:^
hodi+jihoha:+a^
odijihoha:^
(y)odi+jihoha:+a^
o ̨ gyado ̨ hne^tsa^
(y)o ̨ kni+ado ̨ hne^ts+a^
sado ̨ hne^tsa^
sa+ado ̨ hne^ts+a^
swado ̨ hne^tsa^
swa+ado ̨ hne^ts+a^
g o d o ̨ h n e ^ t s a ^
(ya)go+ado ̨ hne^ts+a^
honado ̨ hne^tsa^
h o d i + a d o ̨ h n e ^ t s + a ^
onado ̨ hne^tsa^
( y ) o d i + a d o ̨ h n e ^ t s + a ^
o ̨ kni^nho ̨ hsa^
(y)o ̨ kni+^nho ̨ hs+a^
sa^nho ̨ hsa^
sa+^nho ̨ hs+a^
swa^nho ̨ hsa^
swa+^nho ̨ hs+a^
go^nho ̨ hsa^
(ya)go+^nho ̨ hs+a^
h o d i ^ n h o ̨ h s a ^
h o d i + ^ n h o ̨ h s + a ^
o d i ^ n h o ̨ h s a ^
( y ) o d i + ^ n h o ̨ h s + a ^
o ̨ kni^o ̨ hgwa:^
(y)o ̨ kni+^o ̨ hgwa:+a^
sa^o ̨ hgwa:^
sa+^o ̨ hgwa:+a^
swa^o ̨ hgwa:^
swa+^o ̨ hgwa:+a^
go^o ̨ hgwa:^
(ya)go+^o ̨ hgwa:+a^
h o d i ^ o ̨ h g w a : ^
h o d i + ^ o ̨ h g w a : + a ^
o d i ^ o ̨ h g w a : ^
( y ) o d i + ^ o ̨ h g w a : + a ^
o ̨ kninhahda^
(y)o ̨ kni+nhahd+a^
sanhahda^
sa+nhahd+a^
swanhahda^
swa+nhahd+a^
gonhahda^
(ya)go+nhahd+a^
hodinhahda^
hodi+nhahd+a^
odinhahda^
(y)odi+nhahd+a^
o ̨ kniga^da^
(y)o ̨ kni+ga^d+a^
saga^da^
sa+ga^d+a^
swaga^da^
swa+ga^d+a^
goga^da^
(ya)go+ga^d+a^
hodiga^da^
hodi+ga^d+a^
167
Possessed Basic Nouns Continued
Surface
Underlying
Surface
Underlying
godiga^da^
(ya)godi+ga^d+a^
odiga^da^
(y)odi+ga^d+a^
akakda^
(w)ag+hakd+a^
o ̨ knihakda^
(y)o ̨ kni+hakd+a^
o ̨ gwahakda^
(y)o ̨ gwa+hakd+a^
sahakda^
sa+hakd+a^
snihakda^
sni+hakd+a^
swahakda^
swa+hakd+a^
hohakda^
ho+hakd+a^
gohakda^
(ya)go+hakd+a^
ohakda^
(y)o+hakd+a^
hodihakda^
hodi+hakd+a^
godihakda^
(ya)godi+hakd+a^
odihakda^
(y)odi+hakd+a^
agi^do ̨ hgwa^
(w)ag+i^do ̨ hgw+a^
o ̨ kni^do ̨ hgwa^
(y)o ̨ kni+i^do ̨ hgw+a^
o ̨ gwe ̨ ^do ̨ hgwa^
(y)o ̨ gwa+i^do ̨ hgw+a^
s e ̨ ^ d o ̨ h g w a ^
sa+i^do ̨ hgw+a^
sni^do ̨ hgwa^
sni+i^do ̨ hgw+a^
s w e ̨ ^ d o ̨ h g w a ^
swa+i^do ̨ hgw+a^
ho^do ̨ hgwa^
ho+i^do ̨ hgw+a^
go^do ̨ hgwa^
(ya)go+i^do ̨ hgw+a^
o^do ̨ hgwa^
(y)o+i^do ̨ hgw+a^
h o d i ^ d o ̨ h g w a ^
h o d i + i ^ d o ̨ h g w + a ^
g o d i ^ d o ̨ h g w a ^
( y a ) g o d i + i ^ d o ̨ h g w + a ^
o d i ^ d o ̨ h g w a ^
(y)odi+i^do ̨ hgw+a^
agejihso ̨ da:^
(w)ag+jihso ̨ da:+a^
o ̨ knijihso ̨ da:^
(y)o ̨ kni+jihso ̨ da:+a^
o ̨ g w a j i h s o ̨ d a : ^
(y)o ̨ gwa+jihso ̨ da:+a^
s a j i h s o ̨ d a : ^
sa+jihso ̨ da:+a^
snijihso ̨ da:^
sni+jihso ̨ da:+a^
s w a j i h s o ̨ d a : ^
swa+jihso ̨ da:+a^
h o j i h s o ̨ d a : ^
ho+jihso ̨ da:+a^
g o j i h s o ̨ d a : ^
(ya)go+jihso ̨ da:+a^
o j i h s o ̨ d a : ^
(y)o+jihso ̨ da:+a^
h o d i j i h s o ̨ d a : ^
h o d i + j i h s o ̨ d a : + a ^
g o d i j i h s o ̨ d a : ^
( y a ) g o d i + j i h s o ̨ d a : + a ^
o d i j i h s o ̨ d a : ^
(y)odi+jihso ̨ da:+a^
agekdeha^
(w)ag+kdeh+a^
o ̨ knikdeha^
(y)o ̨ kni+kdeh+a^
o ̨ gwakdeha^
(y)o ̨ gwa+kdeh+a^
sakdeha^
sa+kdeh+a^
snikdeha^
sni+kdeh+a^
swakdeha^
swa+kdeh+a^
hokdeha^
ho+kdeh+a^
gokdeha^
(ya)go+kdeh+a^
okdeha^
(y)o+kdeh+a^
hodikdeha^
hodi+kdeh+a^
godikdeha^
(ya)godi+kdeh+a^
odikdeha^
(y)odi+kdeh+a^
agrihwa^
(w)ag+rihw+a^
o ̨ kni:hwa^
(y)o ̨ kni+rihw+a^
o ̨ gwaihwa^
(y)o ̨ gwa+rihw+a^
saihwa^
sa+rihw+a^
sni:hwa^
sni+rihw+a^
swaihwa^
swa+rihw+a^
hoihwa^
ho+rihw+a^
goihwa^
(ya)go+rihw+a^
oihwa^
(y)o+rihw+a^
hodi:hwa^
hodi+rihw+a^
godi:hwa^
(ya)godi+rihw+a^
odi:hwa^
(y)odi+rihw+a^
agesehda^
(w)ag+sehd+a^
o ̨ knisehda^
(y)o ̨ kni+sehd+a^
o ̨ gwasehda^
(y)o ̨ gwa+sehd+a^
sasehda^
sa+sehd+a^
snisehda^
sni+sehd+a^
swasehda^
swa+sehd+a^
hosehda^
ho+sehd+a^
gosehda^
(ya)go+sehd+a^
osehda^
(y)o+sehd+a^
hodisehda^
hodi+sehd+a^
godisehda^
(ya)godi+sehd+a^
odisehda^
(y)odi+sehd+a^
agetsehsda^
(w)ag+tsehsd+a^
o ̨ knitsehsda^
(y)o ̨ kni+tsehsd+a^
o ̨ gwatsehsda^
(y)o ̨ gwa+tsehsd+a^
satsehsda^
sa+tsehsd+a^
168
Possessed Basic Nouns Continued
Surface
Underlying
Surface
Underlying
snitsehsda^
sni+tsehsd+a^
swatsehsda^
swa+tsehsd+a^
hotsehsda^
ho+tsehsd+a^
gotsehsda^
(ya)go+tsehsd+a^
otsehsda^
(y)o+tsehsd+a^
hoditsehsda^
hodi+tsehsd+a^
goditsehsda^
(ya)godi+tsehsd+a^
oditsehsda^
(y)odi+tsehsd+a^
agwa^wihsda^
(w)ag+wa^wihsd+a^
o ̨ kniwa^wihsda^
(y)o ̨ kni+wa^wihsd+a^
o ̨ gwawa^wihsda^
(y)o ̨ gwa+wa^wihsd+a^
sawa^wihsda^
sa+wa^wihsd+a^
sniwa^wihsda^
sni+wa^wihsd+a^
swawa^wihsda^
swa+wa^wihsd+a^
howa^wihsda^
ho+wa^wihsd+a^
gowa^wihsda^
(ya)go+wa^wihsd+a^
owa^wihsda^
(y)o+wa^wihsd+a^
hodiwa^wihsda^
hodi+wa^wihsd+a^
godiwa^wihsda^
(ya)godi+wa^wihsd+a^
odiwa^wihsda^
(y)odi+wa^wihsd+a^
agyo ̨ ^da^
(w)ag+yo ̨ ^d+a^
o ̨ kniyo ̨ ^da^
(y)o ̨ kni+yo ̨ ^d+a^
o ̨ gwayo ̨ ^da^
(y)o ̨ gwa+yo ̨ ^d+a^
sayo ̨ ^da^
sa+yo ̨ ^d+a^
sniyo ̨ ^da^
sni+yo ̨ ^d+a^
swayo ̨ ^da^
swa+yo ̨ ^d+a^
hoyo ̨ ^da^
ho+yo ̨ ^d+a^
goyo ̨ ^da^
(ya)go+yo ̨ ^d+a^
oyo ̨ ^da^
(y)o+yo ̨ ^d+a^
h o d i y o ̨ ^ d a ^
h o d i + y o ̨ ^ d + a ^
g o d i y o ̨ ^ d a ^
( y a ) g o d i + y o ̨ ^ d + a ^
o d i y o ̨ ^ d a ^
( y ) o d i + y o ̨ ^ d + a ^
agihsda^
(w)ag+Cihsd+a^
o ̨ kni:hsda^
(y)o ̨ kni+Cihsd+a^
o ̨ gwaihsda^
(y)o ̨ gwa+Cihsd+a^
saihsda^
sa+Cihsd+a^
sni:hsda^
sni+Cihsd+a^
swaihsda^
swa+Cihsd+a^
hoihsda^
ho+Cihsd+a^
goihsda^
(ya)go+Cihsd+a^
oihsda^
(y)o+Cihsd+a^
hodi:hsda^
hodi+Cihsd+a^
godi:hsda^
(ya)godi+Cihsd+a^
odi:hsda^
(y)odi+Cihsd+a^
agatsge ̨^da^
(w)ag+Catsge ̨^d+a^
o ̨ kniatsge ̨ ^da^
(y)o ̨ kni+Catsge ̨ ^d+a^
o ̨ g w a : t s g e ̨ ^ d a ^
(y)o ̨ gwa+Catsge ̨ ^d+a^
sa:tsge ̨ ^da^
sa+Catsge ̨^d+a^
sniatsge ̨ ^da^
sni+Catsge ̨ ^d+a^
swa:tsge ̨ ^da^
swa+Catsge ̨ ^d+a^
hoatsge ̨^da^
ho+Catsge ̨^d+a^
goatsge ̨^da^
(ya)go+Catsge ̨^d+a^
oatsge ̨^da^
(y)o+Catsge ̨ ^d+a^
hodiatsge ̨^da^
hodi+Catsge ̨^d+a^
godiatsge ̨^da^
(ya)godi+Catsge ̨^d+a^
odiatsge ̨^da^
(y)odi+Catsge ̨^d+a^
age^ahdra^
(w)ag+^ahdr+a^
o ̨ kni^ahdra^
(y)o ̨ kni+^ahdr+a^
o ̨ gwa^ahdra^
(y)o ̨ gwa+^ahdr+a^
sa^ahdra^
sa+^ahdr+a^
sni^ahdra^
sni+^ahdr+a^
swa^ahdra^
swa+^ahdr+a^
ho^ahdra^
ho+^ahdr+a^
go^ahdra^
(ya)go+^ahdr+a^
o^ahdra^
(y)o+^ahdr+a^
hodi^ahdra^
hodi+^ahdr+a^
godi^ahdra^
(ya)godi+^ahdr+a^
odi^ahdra^
(y)odi+^ahdr+a^
agitsga:^
(w)ag+itsga:+a^
o ̨ knitsga:^
(y)o ̨ kni+itsga:+a^
o ̨ g w e ̨ t s g a : ^
(y)o ̨ gwa+itsga:+a^
se ̨ tsga:^
sa+itsga:+a^
snitsga:^
sni+itsga:+a^
swe ̨ tsga:^
swa+itsga:+a^
hotsga:^
ho+itsga:+a^
gotsga:^
(ya)go+itsga:+a^
otsga:^
(y)o+itsga:+a^
hoditsga:^
hodi+itsga:+a^
169
Possessed Basic Nouns Continued
Surface
Underlying
Surface
Underlying
goditsga:^
(ya)godi+itsga:+a^
oditsga:^
(y)odi+itsga:+a^
agre ̨na^
(w)ag+re ̨n+a^
o ̨ k n i e ̨ n a ^
(y)o ̨ kni+re ̨ n+a^
o ̨ g w a e ̨ n a ^
( y ) o ̨ g w a + r e ̨ n + a ^
sae ̨ na^
sa+re ̨n+a^
snie ̨ na^
sni+re ̨n+a^
s w a e ̨ n a ^
swa+re ̨ n+a^
hoe ̨na^
ho+re ̨n+a^
goe ̨na^
(ya)go+re ̨n+a^
oe ̨na^
(y)o+re ̨n+a^
h o d i e ̨ n a ^
hodi+re ̨n+a^
godie ̨na^
(ya)godi+re ̨n+a^
odie ̨na^
(y)odi+re ̨n+a^
agrihwihsa^
(w)ag+rihwihs+a^
o ̨ kni:hwihsa^
(y)o ̨ kni+rihwihs+a^
o ̨ gwaihwihsa^
(y)o ̨ gwa+rihwihs+a^
saihwihsa^
sa+rihwihs+a^
sni:hwihsa^
sni+rihwihs+a^
swaihwihsa^
swa+rihwihs+a^
hoihwihsa^
ho+rihwihs+a^
goihwihsa^
(ya)go+rihwihs+a^
oihwihsa^
(y)o+rihwihs+a^
hodi:hwihsa^
hodi+rihwihs+a^
godi:hwihsa^
(ya)godi+rihwihs+a^
odi:hwihsa^
(y)odi+rihwihs+a^
agro ̨ da^
(w)ag+ro ̨ d+a^
o ̨ knio ̨ da^
(y)o ̨ kni+ro ̨ d+a^
o ̨ gwao ̨ da^
(y)o ̨ gwa+ro ̨ d+a^
sao ̨ da^
sa+ro ̨ d+a^
snio ̨ da^
sni+ro ̨ d+a^
swao ̨ da^
swa+ro ̨ d+a^
hoo ̨ da^
ho+ro ̨ d+a^
goo ̨ da^
(ya)go+ro ̨ d+a^
o o ̨ d a ^
(y)o+ro ̨ d+a^
h o d i o ̨ d a ^
h o d i + r o ̨ d + a ^
g o d i o ̨ d a ^
( y a ) g o d i + r o ̨ d + a ^
o d i o ̨ d a ^
( y ) o d i + r o ̨ d + a ^
170
Table C.3: Deverbal Nouns
Surface
Underlying
e ̨dehsra^
e ̨dehsr+a^
e ̨^nhotra^
e ̨^nhotr+a^
gaye ̨nawahsra^
ga+ye ̨nawahsr+a^
gaya^dagenhahsra^
ga+ya^dagenhahsr+a^
gatgo ̨ nya^tra^
ga+atgo ̨ nya^tr+a^
ganoho ̨ kdehsra^
ga+noho ̨ kdehsr+a^
gana^jowi^tra^
ga+na^jowi^tr+a^
gaihwiyohsde ̨ hsra^
ga+rihwiyohsde ̨ hsr+a^
gaiho^de ̨hsra^
ga+riho^de ̨hsr+a^
gahshahsde ̨ hsra^
ga+hshahsde ̨ hsr+a^
oye ̨ hsra^
o+ye ̨hsr+a^
onrahdo ̨ dahsra^
o+nrahdo ̨ dahsr+a^
oniga:he ̨hsra^
o+niga:he ̨hsr+a^
o d o ̨ t g a d o ̨ h s r a ^
o+ado ̨ tgado ̨ hsr+a^
o^drohsra^
o+^drohsr+a^
atsho^kdo ̨ hsra^
a+atsho^kdo ̨ hsr+a^
atna^gwihdra^
a+atna^gwihdr+a^
anahaotra^
a+nahaotr+a^
adrihwagyao ̨ hsra^
a+adrihwagyao ̨ hsr+a^
ado ̨ nhehsra^
a+ado ̨ nhehsr+a^
ade ̨na^tra^
a+ade ̨na^tr+a^
adao^tra^
a+adao^tra+a^
Surface
Underlying
e ̨^nyotra^
e ̨^nyotr+a^
ge ̨dehsra^
ga+idehsra+a^
gaya^dowehdahsra^
ga+ya^dowehdahsr+a^
gatgwe ̨nya^tra^
ga+atgwe ̨nya^tr+a^
gatgi^tra^
ga+tgi^tr+a^
ganhehsra^
ga+nhehsr+a^
gaisra^
ga+risr+a^
gaihwane^aksra^
ga+rihwane^aksra+a^
gahyado ̨ hsra^
ga+hyado ̨ hsr+a^
ga:ho ̨ hsra^
ga+Caho ̨ hsr+a^
otgahno ̨ nihsra^
o+atgahno ̨ nihsr+a^
ono ̨ nhe^dra^
o+no ̨ nhe^dr+a^
ohshahsde ̨ hsra^
o+hshahsde ̨ hsr+a^
o d o ̨ t g a d e h s r a ^
o+ado ̨ tgadehsr+a^
o^daihe ̨hdra^
o+i^daihe ̨ hdr+a^
atna^tsotra^
a+atna^tsotr+a^
atgahnyehtra^
a+atgahnyehtr+a^
agya^dawi^tra^
a+agya^dawi^tr+a^
adra^wihsda^
a+adra^wihsd+a^
adi^gro ̨ hsra^
a+adi^gro ̨ hsra+a^
adekwahahsra^
a+adekwahahsra+a^
ahdahdi^tra^
a+ahdahdi^tr+a^
171
Table C.4: Defective Nouns
Surface
Underlying
sgwa:gwao ̨ do ̨ ^
sgwa:gwao ̨ do ̨ ^
da:gu:s
da:gu:s
so:wa:s
so:wa:s
ho ̨ :ga:k
ho ̨ :ga:k
gwihsgwihs
gwihsgwihs
soho ̨ :t
soho ̨ :t
jogrihs
jogrihs
di^di:^
di^di:^
ga^ga:^
ga^ga:^
gwiye ̨ ^gwiye ̨ ^
gwiye ̨ ^gwiye ̨ ^
j i ^ n h o ̨ w e ̨ : s e :
ji^nho ̨ we ̨ :se:
sa^sa^
sa^sa^
g w e : s e ̨ ^
g w e : s e ̨ ^
jihsgogo^
jihsgogo^
johwe ̨ ^sdaga^
johwe ̨ ^sdaga^
hnyagwai^
hnyagwai^
tgwiyo:ge ̨ ^
tgwiyo:ge ̨ ^
ji^no ̨ hdo:ya^
ji^no ̨ hdo:ya^
jino ̨ hsano ̨ h
jino ̨ hsano ̨ h
ji^ao:ye ̨ :
ji^ao:ye ̨ :
degriya^go ̨ ^
degriya^go ̨ ^
hehshai:
hehshai:
tehto ̨ ^
tehto ̨ ^
jino:we ̨ :
jino:we ̨ :
sa:no:^
sa:no:^
dre:na:
dre:na:
kdago ̨ ^
kdago ̨ ^
sgwa:ye ̨ h
sgwa:ye ̨ h
jo ̨ :nyo ̨ :^
jo ̨ :nyo ̨ :^
gwa^da:
gwa^da:
jo ̨ ^dae:ya:^
jo ̨ ^dae:ya:^
o n o h o t s g e ̨ ^ e ̨ ^
o n o h o t s g e ̨ ^ e ̨ ^
tsa^ge ̨ :da^
tsa^ge ̨ :da^
tsinyohgwa:k
tsinyohgwa:k
nawe ̨ ^da^
nawe ̨ ^da^
otahyo ̨ :ni:
otahyo ̨ :ni:
jihsge ̨ :
jihsge ̨ :
grahe:t
grahe:t
Surface
Underlying
dago:s
dago:s
dakshae^dohs
dakshae^dohs
twe ̨ :twe ̨ :t
twe ̨ :twe ̨ :t
doge ̨ :t
doge ̨:t
gwa^yo ̨ ^
gwa^yo ̨ ^
gyo:gyo:^
gyo:gyo:^
gwido^gwido^
gwido^gwido^
jikjiye:^
jikjiye:^
hihi:
hihi:
dihsdihs
dihsdihs
duwisduwi:^
duwisduwi:^
gwe ̨ :dihs
gwe ̨ :dihs
tsahgo:wah
tsahgo:wah
gwaoh
gwaoh
gwe ̨ ^gohnye ̨ ^
gwe ̨ ^gohnye ̨ ^
go ̨ :deh
go ̨ :deh
jinho ̨ hgwahe ̨ h
j i n h o ̨ h g w a h e ̨ h
ji^dana:we ̨ :
ji^dana:we ̨ :
jihsda:
jihsda:
jino ̨ hyahae:
jino ̨ hyahae:
jihnyo^ge ̨ ^
jihnyo^ge ̨ ^
sgwa^ahda^
sgwa^ahda^
jo ̨ ^daga^
jo ̨ ^daga^
tea:o ̨ t
tea:o ̨ t
dre ̨ :na:
dre ̨ :na:
joni:tsgro ̨ :t
joni:tsgro ̨ :t
do:dihs
do:dihs
gwiyo:ge ̨ ^
gwiyo:ge ̨ ^
n o ̨ h s o d a i : y o ̨ :
n o ̨ h s o d a i : y o ̨ :
jide ̨ :^e ̨ h
j i d e ̨ : ^ e ̨ h
ji^dro ̨ :we ̨ :
ji^dro ̨ :we ̨ :
teo:ji^
teo:ji^
yahge ̨ hda^
yahge ̨ hda^
gihe ̨ :k
gihe ̨ :k
jihso ̨ :dahk
jihso ̨ :dahk
tahyo ̨ :ni:
tahyo ̨ :ni:
ji^o:
ji^o:
172
Table C.5: Inalienable Nouns
Surface
Underlying
gaho ̨ hda^geh
g+aho ̨ hd+a^geh
gyaho ̨ hda^geh
(e)kni+aho ̨ hd+a^geh
dwaho ̨ hda^geh
(e)dwa+aho ̨ hd+a^geh
saho ̨ hda^geh
(h)s+aho ̨ hd+a^geh
swaho ̨ hda^geh
(h)swa+aho ̨ hd+a^geh
o ̨ ho ̨ hda^geh
(y)o ̨ +aho ̨ hd+a^geh
h e ̨ n a h o ̨ h d a ^ g e h
hadi+aho ̨ hd+a^geh
g e ̨ n a h o ̨ h d a ^ g e h
gadi+aho ̨ hd+a^geh
gyahsi^da^geh
(e)tni+ahsi^d+a^geh
agyahsi^da^geh
(y)akni+ahsi^d+a^geh
agwahsi^da^geh
(y)agwa+ahsi^d+a^geh
jahsi^da^geh
(h)sni+ahsi^d+a^geh
hahsi^da^geh
ha+ahsi^d+a^geh
wahsi^da^geh
w+ahsi^d+a^geh
gao ̨ hsi^da^geh
gao ̨ +ahsi^d+a^geh
gihna^geh
g+ihn+a^geh
knihna^geh
(e)kni+ihn+a^geh
dwe ̨ hna^geh
(e)dwa+ihn+a^geh
sihna^geh
(h)s+ihn+a^geh
swe ̨ hna^geh
(h)swa+ihn+a^geh
e ̨hna^geh
(y)e ̨+ihn+a^geh
hadihna^geh
hadi+ihn+a^geh
gadihna^geh
gadi+ihn+a^geh
tno ̨ tsa^geh
(e)tni+o ̨ ts+a^geh
akno ̨ tsa^geh
(y)akni+o ̨ ts+a^geh
agyo ̨ tsa^geh
(y)agwa+o ̨ ts+a^geh
sno ̨ tsa^geh
(h)sni+o ̨ ts+a^geh
ho ̨ tsa^geh
ha+o ̨ ts+a^geh
o ̨ tsa^geh
(y)+o ̨ ts+a^geh
ga:go ̨ tsa^geh
ga:g+o ̨ ts+a^geh
gwe ̨^nahsa^geh
g+we ̨^nahs+a^geh
kniwe ̨ ^nahsa^geh
(e)kni+we ̨ ^nahs+a^geh
dwawe ̨ ^nahsa^geh
(e)dwa+we ̨ ^nahs+a^geh
swe ̨ ^nahsa^geh
(eh)s+we ̨ ^nahs+a^geh
swawe ̨ ^nahsa^geh
(eh)swa+we ̨ ^nahs+a^geh
ewe ̨ ^nahsa^geh
(y)e+we ̨ ^nahs+a^geh
hadiwe ̨ ^nahsa^geh
hadi+we ̨ ^nahs+a^geh
gadiwe ̨^nahsa^geh
gadi+we ̨^nahs+a^geh
tnigaha^geh
(e)tni+gah+a^geh
Surface
Underlying
gyaho ̨ hda^geh
(e)tni+aho ̨ hd+a^geh
agyaho ̨ hda^geh
(y)akni+aho ̨ hd+a^geh
agwaho ̨ hda^geh
(y)agwa+aho ̨ hd+a^geh
jaho ̨ hda^geh
(h)sni+aho ̨ hd+a^geh
haho ̨ hda^geh
ha+aho ̨ hd+a^geh
waho ̨ hda^geh
w+aho ̨ hd+a^geh
gao ̨ ho ̨ hda^geh
gao ̨ +aho ̨ hd+a^geh
gahsi^da^geh
g+ahsi^d+a^geh
gyahsi^da^geh
(e)kni+ahsi^d+a^geh
dwahsi^da^geh
(e)dwa+ahsi^d+a^geh
sahsi^da^geh
(h)s+ahsi^d+a^geh
swahsi^da^geh
(h)swa+ahsi^d+a^geh
o ̨ hsi^da^geh
(y)o ̨ +ahsi^d+a^geh
he ̨nahsi^da^geh
hadi+ahsi^d+a^geh
ge ̨nahsi^da^geh
gadi+ahsi^d+a^geh
tnihna^geh
(e)tni+ihn+a^geh
aknihna^geh
(y)akni+ihn+a^geh
agwe ̨hna^geh
(y)agwa+ihn+a^geh
snihna^geh
(h)sni+ihn+a^geh
he ̨hna^geh
ha+ihn+a^geh
ge ̨hna^geh
ga+ihn+a^geh
gaehna^geh
gae+ihn+a^geh
go ̨ tsa^geh
g+o ̨ ts+a^geh
kno ̨ tsa^geh
(e)kni+o ̨ ts+a^geh
gyo ̨ tsa^geh
(e)dwa+o ̨ ts+a^geh
so ̨ tsa^geh
(h)s+o ̨ ts+a^geh
jo ̨ tsa^geh
(h)swa+o ̨ ts+a^geh
ago ̨ tsa^geh
(y)ag+o ̨ ts+a^geh
h e ̨ n o ̨ t s a ^ g e h
hadi+o ̨ ts+a^geh
g e ̨ n o ̨ t s a ^ g e h
gadi+o ̨ ts+a^geh
tniwe ̨ ^nahsa^geh
(e)tni+we ̨ ^nahs+a^geh
akniwe ̨ ^nahsa^geh
(y)akni+we ̨ ^nahs+a^geh
agwawe ̨ ^nahsa^geh
(y)agwa+we ̨ ^nahs+a^geh
sniwe ̨ ^nahsa^geh
(eh)sni+we ̨ ^nahs+a^geh
hawe ̨ ^nahsa^geh
ha+we ̨^nahs+a^geh
gawe ̨ ^nahsa^geh
ga+we ̨^nahs+a^geh
gaewe ̨ ^nahsa^geh
gae+we ̨^nahs+a^geh
gegaha^geh
g+gah+a^geh
knigaha^geh
(e)kni+gah+a^geh
173
Inalienable Nouns Continued
Surface
Underlying
Surface
Underlying
aknigaha^geh
(y)akni+gah+a^geh
dwagaha^geh
(e)dwa+gah+a^geh
agwagaha^geh
(y)agwa+gah+a^geh
segaha^geh
(eh)s+gah+a^geh
snigaha^geh
(eh)sni+gah+a^geh
swagaha^geh
(eh)swa+gah+a^geh
hagaha^geh
ha+gah+a^geh
egaha^geh
(y)e+gah+a^geh
gagaha^geh
ga+gah+a^geh
hadigaha^geh
hadi+gah+a^geh
gaegaha^geh
gae+gah+a^geh
gadigaha^geh
gadi+gah+a^geh
ketga^a^geh
g+hetga^+a^geh
tnihetga^a^geh
(e)tni+hetga^+a^geh
knihetga^a^geh
(e)kni+hetga^+a^geh
aknihetga^a^geh
(y)akni+hetga^+a^geh
dwahetga^a^geh
(e)dwa+hetga^+a^geh
(eh)s+hetga^+a^geh
agwahetga^a^geh
(y)agwa+hetga^+a^geh
setga^a^geh
snihetga^a^geh
(eh)sni+hetga^+a^geh
swahetga^a^geh
(eh)swa+hetga^+a^geh
hahetga^a^geh
ha+hetga^+a^geh
ehetga^a^geh
(y)e+hetga^+a^geh
gahetga^a^geh
ga+hetga^+a^geh
hadihetga^a^geh
hadi+hetga^+a^geh
gaehetga^a^geh
gae+hetga^+a^geh
gadihetga^a^geh
gadi+hetga^+a^geh
ge^nho ̨ hsga:^geh
g+^nho ̨ hsga:+a^geh
tni^nho ̨ hsga:^geh
(e)tni+^nho ̨ hsga:+a^geh
kni^nho ̨ hsga:^geh
(e)kni+^nho ̨ hsga:+a^geh
akni^nho ̨ hsga:^geh
(y)akni+^nho ̨ hsga:+a^geh
dwa^nho ̨ hsga:^geh
(e)dwa+^nho ̨ hsga:+a^geh
agwa^nho ̨ hsga:^geh
(y)agwa+^nho ̨ hsga:+a^geh
se^nho ̨ hsga:^geh
(eh)s+^nho ̨ hsga:+a^geh
sni^nho ̨ hsga:^geh
(eh)sni+^nho ̨ hsga:+a^geh
swa^nho ̨ hsga:^geh
(eh)swa+^nho ̨ hsga:+a^geh
ha^nho ̨ hsga:^geh
ha+^nho ̨ hsga:+a^geh
gae+^nho ̨ hsga:+a^geh
e^nho ̨ hsga:^geh
(y)e+^nho ̨ hsga:+a^geh
ga^nho ̨ hsga:^geh
ga+^nho ̨ hsga:+a^geh
hadi^nho ̨ hsga:^geh
hadi+^nho ̨ hsga:+a^geh
gae^nho ̨ hsga:^geh
gadi^nho ̨ hsga:^geh
gadi+^nho ̨ hsga:+a^geh
ge^ahsa^geh
g+^ahs+a^geh
tni^ahsa^geh
(e)tni+^ahs+a^geh
kni^ahsa^geh
(e)kni+^ahs+a^geh
akni^ahsa^geh
(y)akni+^ahs+a^geh
dwa^ahsa^geh
(e)dwa+^ahs+a^geh
agwa^ahsa^geh
(y)agwa+^ahs+a^geh
se^ahsa^geh
(eh)s+^ahs+a^geh
sni^ahsa^geh
(eh)sni+^ahs+a^geh
swa^ahsa^geh
(eh)swa+^ahs+a^geh
(y)e+^ahs+a^geh
ha^ahsa^geh
ha+^ahs+a^geh
e^ahsa^geh
ga^ahsa^geh
ga+^ahs+a^geh
hadi^ahsa^geh
hadi+^ahs+a^geh
gae^ahsa^geh
gae+^ahs+a^geh
gadi^ahsa^geh
gadi+^ahs+a^geh
gekse^da^geh
g+kse^d+a^geh
tnikse^da^geh
(e)tni+kse^d+a^geh
knikse^da^geh
(e)kni+kse^d+a^geh
aknikse^da^geh
(y)akni+kse^d+a^geh
dwakse^da^geh
(e)dwa+kse^d+a^geh
agwakse^da^geh
(y)agwa+kse^d+a^geh
sekse^da^geh
(eh)s+kse^d+a^geh
snikse^da^geh
(eh)sni+kse^d+a^geh
swakse^da^geh
(eh)swa+kse^d+a^geh
hakse^da^geh
ha+kse^d+a^geh
ekse^da^geh
(y)e+kse^d+a^geh
gakse^da^geh
ga+kse^d+a^geh
hadikse^da^geh
hadi+kse^d+a^geh
gaekse^da^geh
gae+kse^d+a^geh
gadikse^da^geh
gadi+kse^d+a^geh
kno ̨ ^a:^geh
g+no ̨ ^a:+a^geh
tnino ̨ ^a:^geh
(e)tni+no ̨ ^a:+a^geh
knino ̨ ^a:^geh
(e)kni+no ̨ ^a:+a^geh
aknino ̨ ^a:^geh
(y)akni+no ̨ ^a:+a^geh
174
Inalienable Nouns Continued
Surface
Underlying
Surface
Underlying
dwano ̨ ^a:^geh
(e)dwa+no ̨ ^a:+a^geh
agwano ̨ ^a:^geh
(y)agwa+no ̨ ^a:+a^geh
sno ̨ ^a:^geh
(eh)s+no ̨ ^a:+a^geh
snino ̨ ^a:^geh
(eh)sni+no ̨ ^a:+a^geh
swano ̨ ^a:^geh
(eh)swa+no ̨ ^a:+a^geh
hano ̨ ^a:^geh
ha+no ̨ ^a:+a^geh
eno ̨ ^a:^geh
(y)e+no ̨ ^a:+a^geh
gano ̨ ^a:^geh
ga+no ̨ ^a:+a^geh
hadino ̨ ^a:^geh
hadi+no ̨ ^a:+a^geh
gaeno ̨ ^a:^geh
gae+no ̨ ^a:+a^geh
gadino ̨ ^a:^geh
gadi+no ̨ ^a:+a^geh
gragwahda^geh
g+ragwahd+a^geh
tniagwahda^geh
(e)tni+ragwahd+a^geh
kniagwahda^geh
(e)kni+ragwahd+a^geh
akniagwahda^geh
(y)akni+ragwahd+a^geh
dwa:gwahda^geh
(e)dwa+ragwahd+a^geh
agwa:gwahda^geh
(y)agwa+ragwahd+a^geh
sragwahda^geh
(eh)s+ragwahd+a^geh
sniagwahda^geh
(eh)sni+ragwahd+a^geh
swa:gwahda^geh
(eh)swa+ragwahd+a^geh
ha:gwahda^geh
ha+ragwahd+a^geh
eagwahda^geh
(y)e+ragwahd+a^geh
ga:gwahda^geh
ga+ragwahd+a^geh
hadiagwahda^geh
hadi+ragwahd+a^geh
gaeagwahda^geh
gae+ragwahd+a^geh
gadiagwahda^geh
gadi+ragwahd+a^geh
g w e ̨ ^ y o ̨ h g a : ^ g e h
g+we ̨ ^yo ̨ hga:+a^geh
tniwe ̨ ^yo ̨ hga:^geh
(e)tni+we ̨ ^yo ̨ hga:+a^geh
kniwe ̨ ^yo ̨ hga:^geh
(e)kni+we ̨ ^yo ̨ hga:+a^geh
akniwe ̨ ^yo ̨ hga:^geh
(y)akni+we ̨ ^yo ̨ hga:+a^geh
dwawe ̨ ^yo ̨ hga:^geh
(e)dwa+we ̨ ^yo ̨ hga:+a^geh
agwawe ̨ ^yo ̨ hga:^geh
(y)agwa+we ̨ ^yo ̨ hga:+a^geh
swe ̨ ^yo ̨ hga:^geh
(eh)s+we ̨ ^yo ̨ hga:+a^geh
sniwe ̨ ^yo ̨ hga:^geh
(eh)sni+we ̨ ^yo ̨ hga:+a^geh
swawe ̨ ^yo ̨ hga:^geh
(eh)swa+we ̨ ^yo ̨ hga:+a^geh
hawe ̨ ^yo ̨ hga:^geh
h a + w e ̨ ^ y o ̨ h g a : + a ^ g e h
ewe ̨ ^yo ̨ hga:^geh
(y)e+we ̨ ^yo ̨ hga:+a^geh
gawe ̨ ^yo ̨ hga:^geh
g a + w e ̨ ^ y o ̨ h g a : + a ^ g e h
hadiwe ̨ ^yo ̨ hga:^geh
hadi+we ̨ ^yo ̨ hga:+a^geh
gaewe ̨ ^yo ̨ hga:^geh
g a e + w e ̨ ^ y o ̨ h g a : + a ^ g e h
g a d i w e ̨ ^ y o ̨ h g a : ^ g e h
gadi+we ̨ ^yo ̨ hga:+a^geh
gejaoho^gwa^geh
g+jaoho^gw+a^geh
tnijaoho^gwa^geh
(e)tni+jaoho^gw+a^geh
knijaoho^gwa^geh
(e)kni+jaoho^gw+a^geh
aknijaoho^gwa^geh
(y)akni+jaoho^gw+a^geh
dwajaoho^gwa^geh
(e)dwa+jaoho^gw+a^geh
agwajaoho^gwa^geh
(y)agwa+jaoho^gw+a^geh
sejaoho^gwa^geh
(eh)s+jaoho^gw+a^geh
snijaoho^gwa^geh
(eh)sni+jaoho^gw+a^geh
swajaoho^gwa^geh
(eh)swa+jaoho^gw+a^geh
hajaoho^gwa^geh
ha+jaoho^gw+a^geh
ejaoho^gwa^geh
(y)e+jaoho^gw+a^geh
gajaoho^gwa^geh
ga+jaoho^gw+a^geh
hadijaoho^gwa^geh
hadi+jaoho^gw+a^geh
gaejaoho^gwa^geh
gae+jaoho^gw+a^geh
gadijaoho^gwa^geh
gadi+jaoho^gw+a^geh
gya^ga:^geh
g+ya^ga:+a^geh
tniya^ga:^geh
(e)tni+ya^ga:+a^geh
kniya^ga:^geh
(e)kni+ya^ga:+a^geh
akniya^ga:^geh
(y)akni+ya^ga:+a^geh
dwaya^ga:^geh
(e)dwa+ya^ga:+a^geh
agwaya^ga:^geh
(y)agwa+ya^ga:+a^geh
sya^ga:^geh
(eh)s+ya^ga:+a^geh
sniya^ga:^geh
(eh)sni+ya^ga:+a^geh
swaya^ga:^geh
(eh)swa+ya^ga:+a^geh
haya^ga:^geh
ha+ya^ga:+a^geh
eya^ga:^geh
(y)e+ya^ga:+a^geh
gaya^ga:^geh
ga+ya^ga:+a^geh
hadiya^ga:^geh
hadi+ya^ga:+a^geh
gaeya^ga:^geh
gae+ya^ga:+a^geh
gadiya^ga:^geh
gadi+ya^ga:+a^geh
175
Table C.6: Unpossessed Inalienable Nouns
Surface
Underlying
oho ̨ hda^
o+aho ̨ hd+a^
ohna^
o+ihn+a^
owe ̨ ^nahsa^
o+we ̨^nahs+a^
ohetga^a^
o+hetga^+a^
o^ahsa^
o+^ahs+a^
ono ̨ ^a:^
o+no ̨ ^a:+a^
o w e ̨ ^ y o ̨ h g a : ^
o + w e ̨ ^ y o ̨ h g a : + a ^
oya^ga:^
o+ya^ga:+a^
Surface
Underlying
ohsi^da^
o+ahsi^d+a^
o ̨ t s a ^
o+o ̨ ts+a^
ogaha^
o+gah+a^
o^nho ̨ hsga:^
o+^nho ̨ hsga:+a^
okse^da^
o+kse^d+a^
oagwahda^
o+ragwahd+a^
ojaoho^gwa^
o+jaoho^gw+a^
176
C.2 Data for the Concrete Approach
Table C.7: Unpossessed Basic Nouns
Surface
Underlying
ho ̨ na^da^
ho ̨ na^d+a^
odi:
o+di:
ga^wahsda^
ga+^wahsd+a^
o^wahsda^
o+^wahsd+a^
gahsdagwa^
ga+hsdagw+a^
ohsdagwa^
o+hsdagw+a^
ado ̨ hne^tsa^
a+ado ̨ hne^ts+a^
awe ̨nohgra^
a+awe ̨ nohgr+a^
o^nhahgya^
o+^nhahgy+a^
ohya^
o+ahy+a^
ohwe ̨ hsda^
o+hwe ̨ hsd+a^
okwa^
o+kw+a^
oihwa^
o+rihw+a^
otsgra^
o+tsgr+a^
owiya^
o+wiy+a^
oya^da^
o+ya^d+a^
ga:gwa:^
ga+Cagwa:+a^
gahso ̨ wahda^
ga+hso ̨ wahd+a^
gaje ̨^
ga+je ̨+a^
gana^ja^
ga+na^j+a^
gatge ̨hetsa^
ga+tge ̨hets+a^
Surface
Underlying
hsgwae ̨ ^da^
hsgwae ̨ ^d+a^
oji:s
o+ji:s
gahehna^
ga+hehn+a^
ohehna^
o+hehn+a^
gaji^gwa^
ga+ji^gw+a^
oji^gwa^
o+ji^gw+a^
o d o ̨ h n e ^ t s a ^
o+ado ̨ hne^ts+a^
adra^swa^
a+adra^sw+a^
onhahda^
o+nhahd+a^
oga:^
o+ga:+a^
o^da^
o+i^d+a^
ona^da:^
o+na^da:+a^
osehda^
o+sehd+a^
owa:^
o+wa:+a^
oya^
o+y+a^
ga^wahsha:^
ga+^wahsha:+a^
gaga^da^
ga+ga^d+a^
ge ̨tsga:^
ga+itsga:+a^
gakwa^
ga+kw+a^
gao ̨ da^
ga+ro ̨ d+a^
gaya:^
ga+ya:+a^
177
Table C.8: Possessed Basic Nouns
Surface
Underlying
ako ̨ na^da^
(w)ak+ho ̨ na^d+a^
o ̨ gwaho ̨ na^da^
(y)o ̨ gwa+ho ̨ na^d+a^
sniho ̨ na^da^
sni+ho ̨ na^d+a^
hoho ̨ na^da^
ho+ho ̨ na^d+a^
oho ̨ na^da^
(y)o+ho ̨ na^d+a^
g o d i h o ̨ n a ^ d a ^
( y a ) g o d i + h o ̨ n a ^ d + a ^
agehsgwae ̨ ^da^
(w)age+hsgwae ̨ ^d+a^
o ̨ gwahsgwae ̨ ^da^
(y)o ̨ gwa+hsgwae ̨ ^d+a^
snihsgwae ̨ ^da^
sni+hsgwae ̨ ^d+a^
hohsgwae ̨ ^da^
ho+hsgwae ̨ ^d+a^
ohsgwae ̨ ^da^
(y)o+hsgwae ̨ ^d+a^
g o d i h s g w a e ̨ ^ d a ^
( y a ) g o d i + h s g w a e ̨ ^ d + a ^
akwahsda^
(w)ak+^wahsd+a^
o ̨ gwa^wahsda^
(y)o ̨ gwa+^wahsd+a^
sni^wahsda^
sni+^wahsd+a^
ho^wahsda^
ho+^wahsd+a^
o^wahsda^
(y)o+^wahsd+a^
godi^wahsda^
(ya)godi+^wahsd+a^
akehna^
(w)ak+hehn+a^
o ̨ gwahehna^
(y)o ̨ gwa+hehn+a^
snihehna^
sni+hehn+a^
hohehna^
ho+hehn+a^
ohehna^
(y)o+hehn+a^
godihehna^
(ya)godi+hehn+a^
agejihoha:^
(w)age+jihoha:+a^
o ̨ g w a j i h o h a : ^
(y)o ̨ gwa+jihoha:+a^
snijihoha:^
sni+jihoha:+a^
hojihoha:^
ho+jihoha:+a^
ojihoha:^
(y)o+jihoha:+a^
godijihoha:^
(ya)godi+jihoha:+a^
agado ̨ hne^tsa^
(w)ag+ado ̨ hne^ts+a^
o ̨ gwado ̨ hne^tsa^
(y)o ̨ gw+ado ̨ hne^ts+a^
jado ̨ hne^tsa^
j+ado ̨ hne^ts+a^
h o d o ̨ h n e ^ t s a ^
ho+ado ̨ hne^ts+a^
o d o ̨ h n e ^ t s a ^
(y)o+ado ̨ hne^ts+a^
gonado ̨ hne^tsa^
(ya)gon+ado ̨ hne^ts+a^
age^nho ̨ hsa^
(w)age+^nho ̨ hs+a^
o ̨ gwa^nho ̨ hsa^
(y)o ̨ gwa+^nho ̨ hs+a^
sni^nho ̨ hsa^
sni+^nho ̨ hs+a^
Surface
Underlying
o ̨ kniho ̨ na^da^
(y)o ̨ kni+ho ̨ na^d+a^
saho ̨ na^da^
sa+ho ̨ na^d+a^
swaho ̨ na^da^
swa+ho ̨ na^d+a^
goho ̨ na^da^
(ya)go+ho ̨ na^d+a^
h o d i h o ̨ n a ^ d a ^
h o d i + h o ̨ n a ^ d + a ^
o d i h o ̨ n a ^ d a ^
( y ) o d i + h o ̨ n a ^ d + a ^
o ̨ knihsgwae ̨ ^da^
(y)o ̨ kni+hsgwae ̨ ^d+a^
sahsgwae ̨ ^da^
sa+hsgwae ̨ ^d+a^
swahsgwae ̨ ^da^
swa+hsgwae ̨ ^d+a^
gohsgwae ̨ ^da^
(ya)go+hsgwae ̨ ^d+a^
h o d i h s g w a e ̨ ^ d a ^
h o d i + h s g w a e ̨ ^ d + a ^
o d i h s g w a e ̨ ^ d a ^
( y ) o d i + h s g w a e ̨ ^ d + a ^
o ̨ kni^wahsda^
(y)o ̨ kni+^wahsd+a^
sa^wahsda^
sa+^wahsd+a^
swa^wahsda^
swa+^wahsd+a^
go^wahsda^
(ya)go+^wahsd+a^
hodi^wahsda^
hodi+^wahsd+a^
odi^wahsda^
(y)odi+^wahsd+a^
o ̨ knihehna^
(y)o ̨ kni+hehn+a^
sahehna^
sa+hehn+a^
swahehna^
swa+hehn+a^
gohehna^
(ya)go+hehn+a^
hodihehna^
hodi+hehn+a^
odihehna^
(y)odi+hehn+a^
o ̨ knijihoha:^
(y)o ̨ kni+jihoha:+a^
sajihoha:^
sa+jihoha:+a^
swajihoha:^
swa+jihoha:+a^
gojihoha:^
(ya)go+jihoha:+a^
hodijihoha:^
hodi+jihoha:+a^
odijihoha:^
(y)odi+jihoha:+a^
o ̨ gyado ̨ hne^tsa^
(y)o ̨ gy+ado ̨ hne^ts+a^
sado ̨ hne^tsa^
s+ado ̨ hne^ts+a^
swado ̨ hne^tsa^
sw+ado ̨ hne^ts+a^
g o d o ̨ h n e ^ t s a ^
(ya)go+ado ̨ hne^ts+a^
honado ̨ hne^tsa^
hon+ado ̨ hne^ts+a^
onado ̨ hne^tsa^
(y)on+ado ̨ hne^ts+a^
o ̨ kni^nho ̨ hsa^
(y)o ̨ kni+^nho ̨ hs+a^
sa^nho ̨ hsa^
sa+^nho ̨ hs+a^
swa^nho ̨ hsa^
swa+^nho ̨ hs+a^
178
Basic Nouns Continued
Surface
Underlying
Surface
Underlying
ho^nho ̨ hsa^
ho+^nho ̨ hs+a^
go^nho ̨ hsa^
(ya)go+^nho ̨ hs+a^
o^nho ̨ hsa^
(y)o+^nho ̨ hs+a^
hodi^nho ̨ hsa^
h o d i + ^ n h o ̨ h s + a ^
g o d i ^ n h o ̨ h s a ^
( y a ) g o d i + ^ n h o ̨ h s + a ^
odi^nho ̨ hsa^
( y ) o d i + ^ n h o ̨ h s + a ^
age^o ̨ hgwa:^
(w)age+^o ̨ hgwa:+a^
o ̨ kni^o ̨ hgwa:^
(y)o ̨ kni+^o ̨ hgwa:+a^
o ̨ gwa^o ̨ hgwa:^
(y)o ̨ gwa+^o ̨ hgwa:+a^
sa^o ̨ hgwa:^
sa+^o ̨ hgwa:+a^
sni^o ̨ hgwa:^
sni+^o ̨ hgwa:+a^
swa^o ̨ hgwa:^
swa+^o ̨ hgwa:+a^
ho^o ̨ hgwa:^
ho+^o ̨ hgwa:+a^
go^o ̨ hgwa:^
(ya)go+^o ̨ hgwa:+a^
o^o ̨ hgwa:^
(y)o+^o ̨ hgwa:+a^
h o d i ^ o ̨ h g w a : ^
h o d i + ^ o ̨ h g w a : + a ^
g o d i ^ o ̨ h g w a : ^
( y a ) g o d i + ^ o ̨ h g w a : + a ^
(w)age+nhahd+a^
o d i ^ o ̨ h g w a : ^
( y ) o d i + ^ o ̨ h g w a : + a ^
agenhahda^
o ̨ kninhahda^
(y)o ̨ kni+nhahd+a^
o ̨ gwanhahda^
(y)o ̨ gwa+nhahd+a^
sanhahda^
sa+nhahd+a^
sninhahda^
sni+nhahd+a^
swanhahda^
swa+nhahd+a^
honhahda^
ho+nhahd+a^
gonhahda^
(ya)go+nhahd+a^
onhahda^
(y)o+nhahd+a^
hodinhahda^
hodi+nhahd+a^
godinhahda^
(ya)godi+nhahd+a^
odinhahda^
(y)odi+nhahd+a^
agega^da^
(w)age+ga^d+a^
o ̨ kniga^da^
(y)o ̨ kni+ga^d+a^
o ̨ gwaga^da^
(y)o ̨ gwa+ga^d+a^
saga^da^
sa+ga^d+a^
sniga^da^
sni+ga^d+a^
swaga^da^
swa+ga^d+a^
hoga^da^
ho+ga^d+a^
(ya)godi+ga^d+a^
goga^da^
(ya)go+ga^d+a^
oga^da^
(y)o+ga^d+a^
hodiga^da^
hodi+ga^d+a^
godiga^da^
odiga^da^
(y)odi+ga^d+a^
akakda^
(w)ak+hakd+a^
o ̨ knihakda^
(y)o ̨ kni+hakd+a^
o ̨ gwahakda^
(y)o ̨ gwa+hakd+a^
sahakda^
sa+hakd+a^
snihakda^
sni+hakd+a^
swahakda^
swa+hakd+a^
hohakda^
ho+hakd+a^
gohakda^
(ya)go+hakd+a^
ohakda^
(y)o+hakd+a^
(ya)godi+hakd+a^
hodihakda^
hodi+hakd+a^
godihakda^
odihakda^
(y)odi+hakd+a^
agi^do ̨ hgwa^
(w)ag+i^do ̨ hgw+a^
o ̨ kni^do ̨ hgwa^
(y)o ̨ kn+i^do ̨ hgw+a^
o ̨ gwe ̨ ^do ̨ hgwa^
(y)o ̨ gwe ̨ +i^do ̨ hgw+a^
s e ̨ ^ d o ̨ h g w a ^
se ̨ +i^do ̨ hgw+a^
sni^do ̨ hgwa^
sn+i^do ̨ hgw+a^
swe ̨ ^do ̨ hgwa^
swe ̨ +i^do ̨ hgw+a^
ho^do ̨ hgwa^
ho+i^do ̨ hgw+a^
go^do ̨ hgwa^
(ya)go+i^do ̨ hgw+a^
o^do ̨ hgwa^
(y)o+i^do ̨ hgw+a^
hodi^do ̨ hgwa^
h o d + i ^ d o ̨ h g w + a ^
g o d i ^ d o ̨ h g w a ^
( y a ) g o d + i ^ d o ̨ h g w + a ^
o d i ^ d o ̨ h g w a ^
( y ) o d + i ^ d o ̨ h g w + a ^
agejihso ̨ da:^
(w)age+jihso ̨ da:+a^
o ̨ knijihso ̨ da:^
(y)o ̨ kni+jihso ̨ da:+a^
o ̨ g w a j i h s o ̨ d a : ^
(y)o ̨ gwa+jihso ̨ da:+a^
s a j i h s o ̨ d a : ^
sa+jihso ̨ da:+a^
snijihso ̨ da:^
sni+jihso ̨ da:+a^
s w a j i h s o ̨ d a : ^
swa+jihso ̨ da:+a^
h o j i h s o ̨ d a : ^
ho+jihso ̨ da:+a^
g o j i h s o ̨ d a : ^
(ya)go+jihso ̨ da:+a^
o j i h s o ̨ d a : ^
(y)o+jihso ̨ da:+a^
hodijihso ̨ da:^
h o d i + j i h s o ̨ d a : + a ^
179
Basic Nouns Continued
Surface
Underlying
Surface
Underlying
g o d i j i h s o ̨ d a : ^
( y a ) g o d i + j i h s o ̨ d a : + a ^
o d i j i h s o ̨ d a : ^
( y ) o d i + j i h s o ̨ d a : + a ^
agekdeha^
(w)age+kdeh+a^
o ̨ knikdeha^
(y)o ̨ kni+kdeh+a^
o ̨ gwakdeha^
(y)o ̨ gwa+kdeh+a^
sakdeha^
sa+kdeh+a^
snikdeha^
sni+kdeh+a^
swakdeha^
swa+kdeh+a^
hokdeha^
ho+kdeh+a^
gokdeha^
(ya)go+kdeh+a^
okdeha^
(y)o+kdeh+a^
hodikdeha^
hodi+kdeh+a^
godikdeha^
(ya)godi+kdeh+a^
odikdeha^
(y)odi+kdeh+a^
agrihwa^
(w)ag+rihw+a^
o ̨ kni:hwa^
(y)o ̨ kni+rihw+a^
o ̨ gwaihwa^
(y)o ̨ gwa+rihw+a^
sni+rihw+a^
saihwa^
sa+rihw+a^
sni:hwa^
swaihwa^
swa+rihw+a^
hoihwa^
ho+rihw+a^
goihwa^
(ya)go+rihw+a^
oihwa^
(y)o+rihw+a^
hodi:hwa^
hodi+rihw+a^
godi:hwa^
(ya)godi+rihw+a^
odi:hwa^
(y)odi+rihw+a^
agesehda^
(w)age+sehd+a^
o ̨ knisehda^
(y)o ̨ kni+sehd+a^
o ̨ gwasehda^
(y)o ̨ gwa+sehd+a^
sasehda^
sa+sehd+a^
snisehda^
sni+sehd+a^
swasehda^
swa+sehd+a^
hosehda^
ho+sehd+a^
gosehda^
(ya)go+sehd+a^
osehda^
(y)o+sehd+a^
hodisehda^
hodi+sehd+a^
godisehda^
(ya)godi+sehd+a^
(y)o ̨ gwa+tsehsd+a^
odisehda^
(y)odi+sehd+a^
agetsehsda^
(w)age+tsehsd+a^
o ̨ knitsehsda^
(y)o ̨ kni+tsehsd+a^
o ̨ gwatsehsda^
satsehsda^
sa+tsehsd+a^
snitsehsda^
sni+tsehsd+a^
swatsehsda^
swa+tsehsd+a^
hotsehsda^
ho+tsehsd+a^
gotsehsda^
(ya)go+tsehsd+a^
otsehsda^
(y)o+tsehsd+a^
hoditsehsda^
hodi+tsehsd+a^
goditsehsda^
(ya)godi+tsehsd+a^
oditsehsda^
(y)odi+tsehsd+a^
agwa^wihsda^
(w)ag+wa^wihsd+a^
(y)o ̨ gwa+wa^wihsd+a^
o ̨ kniwa^wihsda^
(y)o ̨ kni+wa^wihsd+a^
o ̨ gwawa^wihsda^
sawa^wihsda^
sa+wa^wihsd+a^
sniwa^wihsda^
sni+wa^wihsd+a^
swawa^wihsda^
swa+wa^wihsd+a^
howa^wihsda^
ho+wa^wihsd+a^
gowa^wihsda^
(ya)go+wa^wihsd+a^
owa^wihsda^
(y)o+wa^wihsd+a^
hodiwa^wihsda^
hodi+wa^wihsd+a^
godiwa^wihsda^
(ya)godi+wa^wihsd+a^
odiwa^wihsda^
(y)odi+wa^wihsd+a^
agyo ̨ ^da^
(w)ag+yo ̨ ^d+a^
o ̨ kniyo ̨ ^da^
(y)o ̨ kni+yo ̨ ^d+a^
o ̨ gwayo ̨ ^da^
(y)o ̨ gwa+yo ̨ ^d+a^
sayo ̨ ^da^
sa+yo ̨ ^d+a^
sniyo ̨ ^da^
sni+yo ̨ ^d+a^
swayo ̨ ^da^
swa+yo ̨ ^d+a^
hoyo ̨ ^da^
ho+yo ̨ ^d+a^
goyo ̨ ^da^
(ya)go+yo ̨ ^d+a^
oyo ̨ ^da^
(y)o+yo ̨ ^d+a^
h o d i y o ̨ ^ d a ^
h o d i + y o ̨ ^ d + a ^
g o d i y o ̨ ^ d a ^
( y a ) g o d i + y o ̨ ^ d + a ^
o d i y o ̨ ^ d a ^
( y ) o d i + y o ̨ ^ d + a ^
agihsda^
(w)ag+Cihsd+a^
o ̨ kni:hsda^
(y)o ̨ kni+Cihsd+a^
180
Basic Nouns Continued
Surface
Underlying
Surface
Underlying
o ̨ gwaihsda^
(y)o ̨ gwa+Cihsd+a^
saihsda^
sa+Cihsd+a^
sni:hsda^
sni+Cihsd+a^
swaihsda^
swa+Cihsd+a^
hoihsda^
ho+Cihsd+a^
goihsda^
(ya)go+Cihsd+a^
oihsda^
(y)o+Cihsd+a^
hodi:hsda^
hodi+Cihsd+a^
godi:hsda^
(ya)godi+Cihsd+a^
odi:hsda^
(y)odi+Cihsd+a^
agatsge ̨^da^
(w)ag+Catsge ̨ ^d+a^
o ̨ kniatsge ̨ ^da^
(y)o ̨ kni+Catsge ̨ ^d+a^
o ̨ gwa:tsge ̨ ^da^
(y)o ̨ gwa+Catsge ̨ ^d+a^
sa:tsge ̨ ^da^
sa+Catsge ̨ ^d+a^
sniatsge ̨ ^da^
sni+Catsge ̨ ^d+a^
swa:tsge ̨ ^da^
swa+Catsge ̨ ^d+a^
hoatsge ̨^da^
ho+Catsge ̨ ^d+a^
(y)o+Catsge ̨ ^d+a^
goatsge ̨^da^
(ya)go+Catsge ̨^d+a^
oatsge ̨^da^
h o d i a t s g e ̨ ^ d a ^
hodi+Catsge ̨^d+a^
godiatsge ̨^da^
( y a ) g o d i + C a t s g e ̨ ^ d + a ^
odiatsge ̨^da^
(y)odi+Catsge ̨^d+a^
age^ahdra^
(w)age+^ahdr+a^
o ̨ kni^ahdra^
(y)o ̨ kni+^ahdr+a^
o ̨ gwa^ahdra^
(y)o ̨ gwa+^ahdr+a^
sa^ahdra^
sa+^ahdr+a^
sni^ahdra^
sni+^ahdr+a^
swa^ahdra^
swa+^ahdr+a^
ho^ahdra^
ho+^ahdr+a^
go^ahdra^
(ya)go+^ahdr+a^
o^ahdra^
(y)o+^ahdr+a^
hodi^ahdra^
hodi+^ahdr+a^
godi^ahdra^
(ya)godi+^ahdr+a^
odi^ahdra^
(y)odi+^ahdr+a^
agitsga:^
(w)ag+itsga:+a^
o ̨ knitsga:^
(y)o ̨ kn+itsga:+a^
o ̨ gwe ̨ tsga:^
(y)o ̨ gwe ̨ +itsga:+a^
ho+itsga:+a^
se ̨ tsga:^
se ̨+itsga:+a^
snitsga:^
sn+itsga:+a^
swe ̨ tsga:^
swe ̨ +itsga:+a^
hotsga:^
gotsga:^
(ya)go+itsga:+a^
otsga:^
(y)o+itsga:+a^
hoditsga:^
hod+itsga:+a^
goditsga:^
(ya)god+itsga:+a^
oditsga:^
(y)od+itsga:+a^
agre ̨na^
(w)ag+re ̨n+a^
o ̨ k n i e ̨ n a ^
(y)o ̨ kni+re ̨ n+a^
o ̨ g w a e ̨ n a ^
(y)o ̨ gwa+re ̨ n+a^
sae ̨ na^
sa+re ̨n+a^
snie ̨ na^
sni+re ̨ n+a^
ho+re ̨n+a^
s w a e ̨ n a ^
swa+re ̨ n+a^
hoe ̨na^
goe ̨na^
(ya)go+re ̨n+a^
oe ̨na^
(y)o+re ̨ n+a^
h o d i e ̨ n a ^
hodi+re ̨n+a^
godie ̨na^
(ya)godi+re ̨n+a^
o d i e ̨ n a ^
(y)odi+re ̨n+a^
agrihwihsa^
(w)ag+rihwihs+a^
o ̨ kni:hwihsa^
(y)o ̨ kni+rihwihs+a^
o ̨ gwaihwihsa^
(y)o ̨ gwa+rihwihs+a^
saihwihsa^
sa+rihwihs+a^
sni:hwihsa^
sni+rihwihs+a^
swaihwihsa^
swa+rihwihs+a^
hoihwihsa^
ho+rihwihs+a^
goihwihsa^
(ya)go+rihwihs+a^
oihwihsa^
(y)o+rihwihs+a^
hodi:hwihsa^
hodi+rihwihs+a^
godi:hwihsa^
(ya)godi+rihwihs+a^
odi:hwihsa^
(y)odi+rihwihs+a^
agro ̨ da^
(w)ag+ro ̨ d+a^
o ̨ knio ̨ da^
(y)o ̨ kni+ro ̨ d+a^
o ̨ gwao ̨ da^
(y)o ̨ gwa+ro ̨ d+a^
sao ̨ da^
sa+ro ̨ d+a^
snio ̨ da^
sni+ro ̨ d+a^
swao ̨ da^
swa+ro ̨ d+a^
181
Basic Nouns Continued
Surface
Underlying
Surface
Underlying
hoo ̨ da^
ho+ro ̨ d+a^
goo ̨ da^
(ya)go+ro ̨ d+a^
o o ̨ d a ^
(y)o+ro ̨ d+a^
h o d i o ̨ d a ^
h o d i + r o ̨ d + a ^
g o d i o ̨ d a ^
( y a ) g o d i + r o ̨ d + a ^
o d i o ̨ d a ^
( y ) o d i + r o ̨ d + a ^
Table C.9: Deverbal Nouns
Surface
Underlying
e ̨dehsra^
e ̨dehsr+a^
e ̨^nhotra^
e ̨^nhotr+a^
gaye ̨nawahsra^
ga+ye ̨nawahsr+a^
gaya^dagenhahsra^
ga+ya^dagenhahsr+a^
gatgo ̨ nya^tra^
ga+atgo ̨ nya^tr+a^
ganoho ̨ kdehsra^
ga+noho ̨ kdehsr+a^
gana^jowi^tra^
ga+na^jowi^tr+a^
gaihwiyohsde ̨ hsra^
ga+rihwiyohsde ̨ hsr+a^
gaiho^de ̨hsra^
ga+riho^de ̨hsr+a^
gahshahsde ̨ hsra^
ga+hshahsde ̨ hsr+a^
oye ̨ hsra^
o+ye ̨hsr+a^
onrahdo ̨ dahsra^
o+nrahdo ̨ dahsr+a^
oniga:he ̨hsra^
o+niga:he ̨hsr+a^
o d o ̨ t g a d o ̨ h s r a ^
o+ado ̨ tgado ̨ hsr+a^
o^drohsra^
o+^drohsr+a^
atsho^kdo ̨ hsra^
a+atsho^kdo ̨ hsr+a^
atna^gwihdra^
a+atna^gwihdr+a^
anahaotra^
a+nahaotr+a^
adrihwagyao ̨ hsra^
a+adrihwagyao ̨ hsr+a^
ado ̨ nhehsra^
a+ado ̨ nhehsr+a^
ade ̨na^tra^
a+ade ̨na^tr+a^
adao^tra^
a+adao^tra+a^
Surface
Underlying
e ̨^nyotra^
e ̨^nyotr+a^
ge ̨dehsra^
ga+idehsra+a^
gaya^dowehdahsra^
ga+ya^dowehdahsr+a^
gatgwe ̨nya^tra^
ga+atgwe ̨nya^tr+a^
gatgi^tra^
ga+tgi^tr+a^
ganhehsra^
ga+nhehsr+a^
gaisra^
ga+risr+a^
gaihwane^aksra^
ga+rihwane^aksra+a^
gahyado ̨ hsra^
ga+hyado ̨ hsr+a^
ga:ho ̨ hsra^
ga+Caho ̨ hsr+a^
otgahno ̨ nihsra^
o+atgahno ̨ nihsr+a^
ono ̨ nhe^dra^
o+no ̨ nhe^dr+a^
ohshahsde ̨ hsra^
o+hshahsde ̨ hsr+a^
o d o ̨ t g a d e h s r a ^
o+ado ̨ tgadehsr+a^
o^daihe ̨hdra^
o+i^daihe ̨ hdr+a^
atna^tsotra^
a+atna^tsotr+a^
atgahnyehtra^
a+atgahnyehtr+a^
agya^dawi^tra^
a+agya^dawi^tr+a^
adra^wihsda^
a+adra^wihsd+a^
adi^gro ̨ hsra^
a+adi^gro ̨ hsra+a^
adekwahahsra^
a+adekwahahsra+a^
ahdahdi^tra^
a+ahdahdi^tr+a^
182
Table C.10: Defective Nouns
Surface
Underlying
sgwa:gwao ̨ do ̨ ^
sgwa:gwao ̨ do ̨ ^
da:gu:s
da:gu:s
so:wa:s
so:wa:s
ho ̨ :ga:k
ho ̨ :ga:k
gwihsgwihs
gwihsgwihs
soho ̨ :t
soho ̨ :t
jogrihs
jogrihs
di^di:^
di^di:^
ga^ga:^
ga^ga:^
gwiye ̨ ^gwiye ̨ ^
gwiye ̨ ^gwiye ̨ ^
j i ^ n h o ̨ w e ̨ : s e :
ji^nho ̨ we ̨ :se:
sa^sa^
sa^sa^
g w e : s e ̨ ^
g w e : s e ̨ ^
jihsgogo^
jihsgogo^
johwe ̨ ^sdaga^
johwe ̨ ^sdaga^
hnyagwai^
hnyagwai^
tgwiyo:ge ̨ ^
tgwiyo:ge ̨ ^
ji^no ̨ hdo:ya^
ji^no ̨ hdo:ya^
jino ̨ hsano ̨ h
jino ̨ hsano ̨ h
ji^ao:ye ̨ :
ji^ao:ye ̨ :
degriya^go ̨ ^
degriya^go ̨ ^
hehshai:
hehshai:
tehto ̨ ^
tehto ̨ ^
jino:we ̨ :
jino:we ̨ :
sa:no:^
sa:no:^
dre:na:
dre:na:
kdago ̨ ^
kdago ̨ ^
sgwa:ye ̨ h
sgwa:ye ̨ h
jo ̨ :nyo ̨ :^
jo ̨ :nyo ̨ :^
gwa^da:
gwa^da:
jo ̨ ^dae:ya:^
jo ̨ ^dae:ya:^
o n o h o t s g e ̨ ^ e ̨ ^
o n o h o t s g e ̨ ^ e ̨ ^
tsa^ge ̨ :da^
tsa^ge ̨ :da^
tsinyohgwa:k
tsinyohgwa:k
nawe ̨ ^da^
nawe ̨ ^da^
otahyo ̨ :ni:
otahyo ̨ :ni:
jihsge ̨ :
jihsge ̨ :
grahe:t
grahe:t
Surface
Underlying
dago:s
dago:s
dakshae^dohs
dakshae^dohs
twe ̨ :twe ̨ :t
twe ̨ :twe ̨ :t
doge ̨ :t
doge ̨:t
gwa^yo ̨ ^
gwa^yo ̨ ^
gyo:gyo:^
gyo:gyo:^
gwido^gwido^
gwido^gwido^
jikjiye:^
jikjiye:^
hihi:
hihi:
dihsdihs
dihsdihs
duwisduwi:^
duwisduwi:^
gwe ̨ :dihs
gwe ̨ :dihs
tsahgo:wah
tsahgo:wah
gwaoh
gwaoh
gwe ̨ ^gohnye ̨ ^
gwe ̨ ^gohnye ̨ ^
go ̨ :deh
go ̨ :deh
jinho ̨ hgwahe ̨ h
j i n h o ̨ h g w a h e ̨ h
ji^dana:we ̨ :
ji^dana:we ̨ :
jihsda:
jihsda:
jino ̨ hyahae:
jino ̨ hyahae:
jihnyo^ge ̨ ^
jihnyo^ge ̨ ^
sgwa^ahda^
sgwa^ahda^
jo ̨ ^daga^
jo ̨ ^daga^
tea:o ̨ t
tea:o ̨ t
dre ̨ :na:
dre ̨ :na:
joni:tsgro ̨ :t
joni:tsgro ̨ :t
do:dihs
do:dihs
gwiyo:ge ̨ ^
gwiyo:ge ̨ ^
n o ̨ h s o d a i : y o ̨ :
n o ̨ h s o d a i : y o ̨ :
jide ̨ :^e ̨ h
j i d e ̨ : ^ e ̨ h
ji^dro ̨ :we ̨ :
ji^dro ̨ :we ̨ :
teo:ji^
teo:ji^
yahge ̨ hda^
yahge ̨ hda^
gihe ̨ :k
gihe ̨ :k
jihso ̨ :dahk
jihso ̨ :dahk
tahyo ̨ :ni:
tahyo ̨ :ni:
ji^o:
ji^o:
183
Table C.11: Inalienable Nouns
Surface
Underlying
gaho ̨ hda^geh
g+aho ̨ hd+a^geh
agyaho ̨ hda^geh
(y)agy+aho ̨ hd+a^geh
agwaho ̨ hda^geh
(y)agw+aho ̨ hd+a^geh
jaho ̨ hda^geh
(h)j+aho ̨ hd+a^geh
haho ̨ hda^geh
h+aho ̨ hd+a^geh
waho ̨ hda^geh
w+aho ̨ hd+a^geh
gao ̨ ho ̨ hda^geh
gao ̨ +aho ̨ hd+a^geh
gahsi^da^geh
g+ahsi^d+a^geh
gyahsi^da^geh
(e)gy+ahsi^d+a^geh
dwahsi^da^geh
(e)dw+ahsi^d+a^geh
sahsi^da^geh
(h)s+ahsi^d+a^geh
swahsi^da^geh
(h)sw+ahsi^d+a^geh
o ̨ hsi^da^geh
(y)o ̨ +ahsi^d+a^geh
he ̨nahsi^da^geh
he ̨n+ahsi^d+a^geh
ge ̨nahsi^da^geh
ge ̨n+ahsi^d+a^geh
tnihna^geh
(e)tn+ihn+a^geh
aknihna^geh
(y)akn+ihn+a^geh
agwe ̨hna^geh
(y)agwe ̨+ihn+a^geh
snihna^geh
(h)sn+ihn+a^geh
he ̨hna^geh
he ̨+ihn+a^geh
ge ̨hna^geh
ge ̨+ihn+a^geh
gaehna^geh
gae+ihn+a^geh
go ̨ tsa^geh
g+o ̨ ts+a^geh
kno ̨ tsa^geh
(e)kn+o ̨ ts+a^geh
gyo ̨ tsa^geh
(e)gy+o ̨ ts+a^geh
so ̨ tsa^geh
(h)s+o ̨ ts+a^geh
jo ̨ tsa^geh
(h)j+o ̨ ts+a^geh
ago ̨ tsa^geh
(y)ag+o ̨ ts+a^geh
h e ̨ n o ̨ t s a ^ g e h
h e ̨ n + o ̨ t s + a ^ g e h
g e ̨ n o ̨ t s a ^ g e h
g e ̨ n + o ̨ t s + a ^ g e h
tniwe ̨ ^nahsa^geh
(e)tni+we ̨ ^nahs+a^geh
akniwe ̨ ^nahsa^geh
(y)akni+we ̨ ^nahs+a^geh
agwawe ̨ ^nahsa^geh
(y)agwa+we ̨ ^nahs+a^geh
sniwe ̨ ^nahsa^geh
(eh)sni+we ̨ ^nahs+a^geh
hawe ̨ ^nahsa^geh
ha+we ̨^nahs+a^geh
gawe ̨^nahsa^geh
ga+we ̨^nahs+a^geh
gaewe ̨ ^nahsa^geh
gae+we ̨^nahs+a^geh
gegaha^geh
ge+gah+a^geh
knigaha^geh
(e)kni+gah+a^geh
Surface
Underlying
gyaho ̨ hda^geh
(e)gy+aho ̨ hd+a^geh
dwaho ̨ hda^geh
(e)dw+aho ̨ hd+a^geh
saho ̨ hda^geh
(h)s+aho ̨ hd+a^geh
swaho ̨ hda^geh
(h)sw+aho ̨ hd+a^geh
o ̨ ho ̨ hda^geh
(y)o ̨ +aho ̨ hd+a^geh
he ̨ naho ̨ hda^geh
h e ̨ n + a h o ̨ h d + a ^ g e h
g e ̨ n a h o ̨ h d a ^ g e h
g e ̨ n + a h o ̨ h d + a ^ g e h
gyahsi^da^geh
(e)gy+ahsi^d+a^geh
agyahsi^da^geh
(y)agy+ahsi^d+a^geh
agwahsi^da^geh
(y)agw+ahsi^d+a^geh
jahsi^da^geh
(h)j+ahsi^d+a^geh
hahsi^da^geh
h+ahsi^d+a^geh
wahsi^da^geh
w+ahsi^d+a^geh
gao ̨ hsi^da^geh
gao ̨ +ahsi^d+a^geh
gihna^geh
g+ihn+a^geh
knihna^geh
(e)kn+ihn+a^geh
dwe ̨ hna^geh
(e)dwe ̨ +ihn+a^geh
sihna^geh
(h)s+ihn+a^geh
swe ̨ hna^geh
(h)swe ̨ +ihn+a^geh
e ̨hna^geh
(y)e ̨ +ihn+a^geh
hadihna^geh
had+ihn+a^geh
gadihna^geh
gad+ihn+a^geh
tno ̨ tsa^geh
(e)tn+o ̨ ts+a^geh
akno ̨ tsa^geh
(y)akn+o ̨ ts+a^geh
agyo ̨ tsa^geh
(y)agy+o ̨ ts+a^geh
sno ̨ tsa^geh
(h)sn+o ̨ ts+a^geh
ho ̨ tsa^geh
h+o ̨ ts+a^geh
o ̨ tsa^geh
(y)+o ̨ ts+a^geh
ga:go ̨ tsa^geh
ga:g+o ̨ ts+a^geh
gwe ̨ ^nahsa^geh
g+we ̨^nahs+a^geh
kniwe ̨ ^nahsa^geh
(e)kni+we ̨ ^nahs+a^geh
dwawe ̨ ^nahsa^geh
(e)dwa+we ̨ ^nahs+a^geh
swe ̨ ^nahsa^geh
(eh)s+we ̨ ^nahs+a^geh
swawe ̨ ^nahsa^geh
(eh)swa+we ̨ ^nahs+a^geh
ewe ̨ ^nahsa^geh
(y)e+we ̨ ^nahs+a^geh
hadiwe ̨ ^nahsa^geh
hadi+we ̨ ^nahs+a^geh
gadiwe ̨ ^nahsa^geh
gadi+we ̨^nahs+a^geh
tnigaha^geh
(e)tni+gah+a^geh
aknigaha^geh
(y)akni+gah+a^geh
184
Inalienable Nouns Continued
Surface
Underlying
Surface
Underlying
dwagaha^geh
(e)dwa+gah+a^geh
agwagaha^geh
(y)agwa+gah+a^geh
segaha^geh
(eh)se+gah+a^geh
snigaha^geh
(eh)sni+gah+a^geh
swagaha^geh
(eh)swa+gah+a^geh
hagaha^geh
ha+gah+a^geh
egaha^geh
(y)e+gah+a^geh
gagaha^geh
ga+gah+a^geh
hadigaha^geh
hadi+gah+a^geh
gaegaha^geh
gae+gah+a^geh
gadigaha^geh
gadi+gah+a^gehk+het
ketga^a^geh
ga^+a^geh
tnihetga^a^geh
(e)tni+hetga^+a^geh
knihetga^a^geh
(e)kni+hetga^+a^geh
aknihetga^a^geh
(y)akni+hetga^+a^geh
dwahetga^a^geh
(e)dwa+hetga^+a^geh
agwahetga^a^geh
(y)agwa+hetga^+a^geh
setga^a^geh
(eh)s+hetga^+a^geh
snihetga^a^geh
(eh)sni+hetga^+a^geh
swahetga^a^geh
(eh)swa+hetga^+a^geh
hahetga^a^geh
ha+hetga^+a^geh
ehetga^a^geh
(y)e+hetga^+a^geh
gahetga^a^geh
ga+hetga^+a^geh
hadihetga^a^geh
hadi+hetga^+a^geh
gaehetga^a^geh
gae+hetga^+a^geh
gadihetga^a^geh
gadi+hetga^+a^geh
ge^nho ̨ hsga:^geh
ge+^nho ̨ hsga:+a^geh
tni^nho ̨ hsga:^geh
(e)tni+^nho ̨ hsga:+a^geh
kni^nho ̨ hsga:^geh
(e)kni+^nho ̨ hsga:+a^geh
akni^nho ̨ hsga:^geh
(y)akni+^nho ̨ hsga:+a^geh
dwa^nho ̨ hsga:^geh
(e)dwa+^nho ̨ hsga:+a^geh
agwa^nho ̨ hsga:^geh
(y)agwa+^nho ̨ hsga:+a^geh
se^nho ̨ hsga:^geh
(eh)se+^nho ̨ hsga:+a^geh
sni^nho ̨ hsga:^geh
(eh)sni+^nho ̨ hsga:+a^geh
swa^nho ̨ hsga:^geh
(eh)swa+^nho ̨ hsga:+a^geh
ha^nho ̨ hsga:^geh
ha+^nho ̨ hsga:+a^geh
e^nho ̨ hsga:^geh
(y)e+^nho ̨ hsga:+a^geh
ga^nho ̨ hsga:^geh
ga+^nho ̨ hsga:+a^geh
hadi^nho ̨ hsga:^geh
hadi+^nho ̨ hsga:+a^geh
gae^nho ̨ hsga:^geh
gae+^nho ̨ hsga:+a^geh
gadi^nho ̨ hsga:^geh
gadi+^nho ̨ hsga:+a^geh
ge^ahsa^geh
ge+^ahs+a^geh
tni^ahsa^geh
(e)tni+^ahs+a^geh
kni^ahsa^geh
(e)kni+^ahs+a^geh
akni^ahsa^geh
(y)akni+^ahs+a^geh
dwa^ahsa^geh
(e)dwa+^ahs+a^geh
agwa^ahsa^geh
(y)agwa+^ahs+a^geh
se^ahsa^geh
(eh)se+^ahs+a^geh
sni^ahsa^geh
(eh)sni+^ahs+a^geh
swa^ahsa^geh
(eh)swa+^ahs+a^geh
ha^ahsa^geh
ha+^ahs+a^geh
e^ahsa^geh
(y)e+^ahs+a^geh
ga^ahsa^geh
ga+^ahs+a^geh
hadi^ahsa^geh
hadi+^ahs+a^geh
gae^ahsa^geh
gae+^ahs+a^geh
gadi^ahsa^geh
gadi+^ahs+a^geh
gekse^da^geh
ge+kse^d+a^geh
tnikse^da^geh
(e)tni+kse^d+a^geh
knikse^da^geh
(e)kni+kse^d+a^geh
aknikse^da^geh
(y)akni+kse^d+a^geh
dwakse^da^geh
(e)dwa+kse^d+a^geh
agwakse^da^geh
(y)agwa+kse^d+a^geh
sekse^da^geh
(eh)se+kse^d+a^geh
snikse^da^geh
(eh)sni+kse^d+a^geh
swakse^da^geh
(eh)swa+kse^d+a^geh
hakse^da^geh
ha+kse^d+a^geh
ekse^da^geh
(y)e+kse^d+a^geh
gakse^da^geh
ga+kse^d+a^geh
hadikse^da^geh
hadi+kse^d+a^geh
gaekse^da^geh
gae+kse^d+a^geh
gadikse^da^geh
gadi+kse^d+a^geh
kno ̨ ^a:^geh
k+no ̨ ^a:+a^geh
tnino ̨ ^a:^geh
(e)tni+no ̨ ^a:+a^geh
knino ̨ ^a:^geh
(e)kni+no ̨ ^a:+a^geh
aknino ̨ ^a:^geh
(y)akni+no ̨ ^a:+a^geh
dwano ̨ ^a:^geh
(e)dwa+no ̨ ^a:+a^geh
185
Inalienable Nouns Continued
Surface
Underlying
Surface
Underlying
agwano ̨ ^a:^geh
(y)agwa+no ̨ ^a:+a^geh
sno ̨ ^a:^geh
(eh)s+no ̨ ^a:+a^geh
snino ̨ ^a:^geh
(eh)sni+no ̨ ^a:+a^geh
swano ̨ ^a:^geh
(eh)swa+no ̨ ^a:+a^geh
hano ̨ ^a:^geh
ha+no ̨ ^a:+a^geh
eno ̨ ^a:^geh
(y)e+no ̨ ^a:+a^geh
gano ̨ ^a:^geh
ga+no ̨ ^a:+a^geh
hadino ̨ ^a:^geh
hadi+no ̨ ^a:+a^geh
gaeno ̨ ^a:^geh
gae+no ̨ ^a:+a^geh
gadino ̨ ^a:^geh
gadi+no ̨ ^a:+a^geh
gragwahda^geh
g+ragwahd+a^geh
tniagwahda^geh
(e)tni+ragwahd+a^geh
kniagwahda^geh
(e)kni+ragwahd+a^geh
akniagwahda^geh
(y)akni+ragwahd+a^geh
dwa:gwahda^geh
(e)dwa+ragwahd+a^geh
agwa:gwahda^geh
(y)agwa+ragwahd+a^geh
sragwahda^geh
(eh)s+ragwahd+a^geh
sniagwahda^geh
(eh)sni+ragwahd+a^geh
swa:gwahda^geh
(eh)swa+ragwahd+a^geh
ha:gwahda^geh
ha+ragwahd+a^geh
eagwahda^geh
(y)e+ragwahd+a^geh
ga:gwahda^geh
ga+ragwahd+a^geh
hadiagwahda^geh
hadi+ragwahd+a^geh
gaeagwahda^geh
gae+ragwahd+a^geh
gadiagwahda^geh
gadi+ragwahd+a^geh
gwe ̨ ^yo ̨ hga:^geh
g + w e ̨ ^ y o ̨ h g a : + a ^ g e h
tniwe ̨ ^yo ̨ hga:^geh
(e)tni+we ̨ ^yo ̨ hga:+a^geh
kniwe ̨ ^yo ̨ hga:^geh
(e)kni+we ̨ ^yo ̨ hga:+a^geh
akniwe ̨ ^yo ̨ hga:^geh
(y)akni+we ̨ ^yo ̨ hga:+a^geh
dwawe ̨ ^yo ̨ hga:^geh
(e)dwa+we ̨ ^yo ̨ hga:+a^geh
agwawe ̨ ^yo ̨ hga:^geh
(y)agwa+we ̨ ^yo ̨ hga:+a^geh
swe ̨ ^yo ̨ hga:^geh
(eh)s+we ̨ ^yo ̨ hga:+a^geh
sniwe ̨ ^yo ̨ hga:^geh
(eh)sni+we ̨ ^yo ̨ hga:+a^geh
swawe ̨ ^yo ̨ hga:^geh
(eh)swa+we ̨ ^yo ̨ hga:+a^geh
hawe ̨ ^yo ̨ hga:^geh
ha+we ̨ ^yo ̨ hga:+a^geh
ewe ̨ ^yo ̨ hga:^geh
(y)e+we ̨ ^yo ̨ hga:+a^geh
g a w e ̨ ^ y o ̨ h g a : ^ g e h
ga+we ̨ ^yo ̨ hga:+a^geh
hadiwe ̨ ^yo ̨ hga:^geh
hadi+we ̨ ^yo ̨ hga:+a^geh
gaewe ̨ ^yo ̨ hga:^geh
gae+we ̨ ^yo ̨ hga:+a^geh
gadiwe ̨ ^yo ̨ hga:^geh
g a d i + w e ̨ ^ y o ̨ h g a : + a ^ g e h
gejaoho^gwa^geh
ge+jaoho^gw+a^geh
tnijaoho^gwa^geh
(e)tni+jaoho^gw+a^geh
knijaoho^gwa^geh
(e)kni+jaoho^gw+a^geh
aknijaoho^gwa^geh
(y)akni+jaoho^gw+a^geh
dwajaoho^gwa^geh
(e)dwa+jaoho^gw+a^geh
agwajaoho^gwa^geh
(y)agwa+jaoho^gw+a^geh
sejaoho^gwa^geh
(eh)se+jaoho^gw+a^geh
snijaoho^gwa^geh
(eh)sni+jaoho^gw+a^geh
swajaoho^gwa^geh
(eh)swa+jaoho^gw+a^geh
hajaoho^gwa^geh
ha+jaoho^gw+a^geh
ejaoho^gwa^geh
(y)e+jaoho^gw+a^geh
gajaoho^gwa^geh
ga+jaoho^gw+a^geh
hadijaoho^gwa^geh
hadi+jaoho^gw+a^geh
gaejaoho^gwa^geh
gae+jaoho^gw+a^geh
gadijaoho^gwa^geh
gadi+jaoho^gw+a^geh
gya^ga:^geh
g+ya^ga:+a^geh
tniya^ga:^geh
(e)tni+ya^ga:+a^geh
kniya^ga:^geh
(e)kni+ya^ga:+a^geh
akniya^ga:^geh
(y)akni+ya^ga:+a^geh
dwaya^ga:^geh
(e)dwa+ya^ga:+a^geh
agwaya^ga:^geh
(y)agwa+ya^ga:+a^geh
sya^ga:^geh
(eh)s+ya^ga:+a^geh
sniya^ga:^geh
(eh)sni+ya^ga:+a^geh
swaya^ga:^geh
(eh)swa+ya^ga:+a^geh
haya^ga:^geh
ha+ya^ga:+a^geh
eya^ga:^geh
(y)e+ya^ga:+a^geh
gaya^ga:^geh
ga+ya^ga:+a^geh
hadiya^ga:^geh
hadi+ya^ga:+a^geh
gaeya^ga:^geh
gae+ya^ga:+a^geh
gadiya^ga:^geh
gadi+ya^ga:+a^geh
186
Table C.12: Unpossessed Inalienable Nouns
Surface
Underlying
oho ̨ hda^
o+aho ̨ hd+a^
ohna^
o+ihn+a^
owe ̨ ^nahsa^
o+we ̨^nahs+a^
ohetga^a^
o+hetga^+a^
o^ahsa^
o+^ahs+a^
ono ̨ ^a:^
o+no ̨ ^a:+a^
o w e ̨ ^ y o ̨ h g a : ^
o + w e ̨ ^ y o ̨ h g a : + a ^
oya^ga:^
o+ya^ga:+a^
Surface
Underlying
ohsi^da^
o+ahsi^d+a^
o ̨ t s a ^
o+o ̨ ts+a^
ogaha^
o+gah+a^
o^nho ̨ hsga:^
o+^nho ̨ hsga:+a^
okse^da^
o+kse^d+a^
oagwahda^
o+ragwahd+a^
ojaoho^gwa^
o+jaoho^gw+a^
187
